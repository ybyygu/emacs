#+TITLE: Emacs 配置 (based on spacemacs)
#+SETUPFILE: ~/Notes/common.org
#+SETUPFILE: ~/Notes/latex.org
#+STARTUP: indent

# Created: 2016-10-14 14:20
# Updated: 2016-12-08 13:25

* Memo
** [2016-12-10 Sat] 禁用选中的文字进入clipboard的功能 [[https://github.com/syl20bnr/spacemacs/blob/master/doc/FAQ.org#prevent-the-visual-selection-overriding-my-system-clipboard][URL]]
: ;; Prevent the visual selection overriding my system clipboard
: (fset 'evil-visual-update-x-selection 'ignore)
** [2016-12-10 Sat] 修改spacemacs中默认的undo行为 默认的undo太变态了
: (setq evil-want-fine-undo t)
** [2016-12-06 Tue] 修改 spacemacs-theme 中的变量 禁用 org-mode 标题行字体缩放
: (setq spacemacs-theme-org-heigh nil)
** [2016-12-06 Tue] 为了能使中英文同时缩放修改 chinese-fonts-setup
: (setq cfs-use-face-font-rescale (eq system-type 'gnu/linux))

** [2016-12-06 Tue] 使用 chinese layer 中的 fcitx 包, 方便中英文切换. 同时使用 pangu-spacing
** [2016-12-04 Sun] 启用 colors layer 配色更醒目
** [2016-12-04 Sun] python 环境下启用 ipython
: SPC m s i,
** [2016-10-23 Sun] 以后可以研究下 Kitchin 的 scimax, 将他的配置集成进来 [[https://github.com/jkitchin/scimax][URL]]
** [2016-10-17 Mon] 大致成了 以后多花点时间学习下 spacemacs 的命令[[http://spacemacs.org/doc/DOCUMENTATION.html#commands][ URL]]
1. 删除空格: SPC x d w
2. 字数统计: SPC x c
3. 对齐符号: SPC x a =, ... 按 "="对齐行
4. 段落居口: SPC x j c justification
5. 大小写 : SPC x u, SPC x U
6. 扩选   : SPC v SPC V (也可用来替换以前的 iedit 编译功能)
7. narrow: SPC n r, SPC n w
8. 注释:  SPC c l, SPC c y (注释并复制一行, 有用)
9. 打开 buffer 对应的文件: SPC f j
10. 删除 buffer 对应的文件: SPC f D
11. locate: SPC f L (真方便)
12. 保存文件: SPC fs
13. 书签功能: SPC f b 书签界面可以添加删除书签
14. 默认支持自动保存
15. 搜索 SPC s s Helm-swoop 太威武了
16. 最近访问的文件: SPC f r, 当前目录下(project) SPC p r
17. 查词: z=, ispell-word
18. auto pair: SPC t p

| ~SPC f C d~ | convert file from unix to dos encoding                                                                                          |
| ~SPC f C u~ | convert file from dos to unix encoding                                                                                          |
| ~SPC f D~   | delete a file and the associated buffer (ask for confirmation)                                                                  |
| ~SPC f E~   | open a file with elevated privileges (sudo edit)                                                                                |
| ~SPC f f~   | open file with =helm=                                                                                                           |
| ~SPC f F~   | try to open the file under point =helm=                                                                                         |
| ~SPC f j~   | jump to the current buffer file in dired                                                                                        |
| ~SPC f L~   | Locate a file (using =locate=)                                                                                                  |
| ~SPC f o~   | open a file using the default external program                                                                                  |
| ~SPC f R~   | rename the current file                                                                                                         |
| ~SPC f r~   | open a recent file with =helm=                                                                                                  |
| ~SPC f t~   | toggle file tree side bar using [[https://github.com/jaypei/emacs-neotree][NeoTree]]                                                                                         |
| ~SPC f v f~ | add a local variable to the current file                                                                                        |
| ~SPC f y~   | show and copy current file absolute path in the minibuffer                                                                      |
| ~SPC f e d~ | open the spacemacs dotfile (=~/.spacemacs=)                     |
| ~SPC f e D~ | open =ediff= buffer of =~/.spacemacs= and =.spacemacs.template= |
| ~SPC f e R~ | resync the dotfile with spacemacs                               |

**** Browsing files with Helm
| ~C-h~       | go up one level (parent directory |
| ~C-l~       | enter current directory           |
** [2016-10-17 Mon] 使用 use-package 来加载包 [[https://github.com/jwiegley/use-package][URL]]
** [2016-10-16 Sun] 可参考 Purcell 的配置: [[https://github.com/purcell/emacs.d][URL]]
** [2016-10-16 Sun] 中文字体的设置问题
*** 单独设 org-table [[https://emacs-china.org/t/org-mode/440/10][URL]]
#+BEGIN_SRC elisp
     (custom-set-faces
      ;; custom-set-faces was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(org-table ((t (:foreground "#6c71c4" :family "Ubuntu Mono")))))
#+END_SRC
*** 使用 chinese-fonts-setup
#+BEGIN_SRC elisp
  (use-package chinese-fonts-setup)
  (chinese-fonts-setup-enable)
  (cfs-set-spacemacs-fallback-fonts)
#+END_SRC

*** 基于 chinese layer
: (spacemacs//set-monospaced-font  "Monaco" "WenQuanYi Micro Hei Mono" 14 16)

问题: 视图缩放时中英不同步.

** [2016-10-15 Sat] 可参考 sachac 的配置: [[https://github.com/sachac/.emacs.d][URL]]
** [2016-10-15 Sat] spacemacs 设置修改方案
参考这里: [[https://github.com/ale-batt/dotspacemacs][URL]]

1. 修改.spacemacs 中的 user-config 函数, 从 gwp.org 文件中读取设置
   : (with-eval-after-load 'org (org-babel-load-file "~/etc/spacemacs/config.org"))
   或者:
   : (with-eval-after-load 'org (load-file "~/etc/spacemacs/config.el"))
** [2016-10-15 Sat] 参考子龙山人的配置 [[https://github.com/zilongshanren/spacemacs-private][URL]]
** [2016-10-14 Fri] emacs24-starter-kit 更新维护不是很活跃. 现在已是 emacs25 时代了. 考虑换到 spacemacs
* text
:PROPERTIES:
:header-args: :noweb-ref init-text
:END:
** 常规操作
1. mark: C-@, C-M-SPC
2. goto-line

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-l" 'goto-line) ; [Ctrl]-[L]

  ;; more convenient than C-M-BACKSPC
  ;; (global-set-key (kbd "<f5> k") 'kill-whole-line)
  ;; (global-set-key (kbd  "M-k") 'kill-whole-line)
  ;; (global-set-key (kbd  "M-K") 'kill-sentence)

#+END_SRC

** 快速插入日期
#+BEGIN_SRC emacs-lisp
  (defun gwp/insert-date (arg)
    "Insert date at point. With prefix argument, insert date and time."
    (interactive "P")
    (insert (format-time-string "%Y-%m-%d"))
    (when arg
      (insert (format-time-string " %H:%M"))
      )
    )

  ;; C-c i calls insert-date-string
  (global-set-key (kbd "C-c i") 'gwp/insert-date)
#+END_SRC

** 快捷插入
#+BEGIN_SRC emacs-lisp
  ;; referred: http://docs.huihoo.com/homepage/shredderyin/wiki/KeyBinding.html
  (define-prefix-command 'semicolon-map)
  (global-set-key (kbd ";") 'semicolon-map)
  (define-key semicolon-map (kbd "t") 'insert-true)
  (define-key semicolon-map (kbd "T") 'insert-todo)
  (define-key semicolon-map (kbd ";") 'insert-self)
  (define-key semicolon-map (kbd "<SPC>") 'insert-self-space)
  (define-key semicolon-map (kbd "f") 'insert-false)
  (define-key semicolon-map (kbd "F") 'insert-fixme)
  (define-key semicolon-map (kbd "n") 'insert-none)
  (define-key semicolon-map (kbd "{") 'insert-folding-start)
  (define-key semicolon-map (kbd "}") 'insert-folding-end)

  (defun insert-folding-start ()
    (interactive)
    (insert "# {{{")
  )

  (defun insert-folding-end ()
    (interactive)
    (insert "# }}}")
  )

  (defun insert-self ()
    (interactive)
    (insert ";")
  )

  (defun insert-self-space ()
    (interactive)
    (insert "; ")
  )

  (defun insert-none ()
    (interactive)
    (insert "None")
  )

  (defun insert-true ()
    (interactive)
    (insert "True")
  )

  (defun insert-todo ()
    (interactive)
    (insert "TODO: ")
  )

  (defun insert-false ()
    (interactive)
    (insert "False")
  )

  (defun insert-fixme ()
    (interactive)
    (insert "FIXME: ")
  )

#+END_SRC

** 处理空格
: SPC xdw 删除行尾空格.

#+BEGIN_SRC emacs-lisp
  (setq show-trailing-whitespace t)
  (global-set-key (kbd "<f5> SPC") 'delete-trailing-whitespace)
  ;; make sure this always work
  (global-set-key (kbd "C-x C-o") 'delete-blank-lines)
#+END_SRC

** 按行或段移动
: [ e move line up
: ] e move line down

#+BEGIN_SRC emacs-lisp
  (defun move-text-internal (arg)
     (cond
      ((and mark-active transient-mark-mode)
       (if (> (point) (mark))
          (exchange-point-and-mark))
       (let ((column (current-column))
            (text (delete-and-extract-region (point) (mark))))
         (forward-line arg)
         (move-to-column column t)
         (set-mark (point))
         (insert text)
         (exchange-point-and-mark)
         (setq deactivate-mark nil)))
      (t
       (beginning-of-line)
       (when (or (> arg 0) (not (bobp)))
         (forward-line)
         (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg))
         (forward-line -1)))))

  (defun move-text-down (arg)
     "Move region (transient-mark-mode active) or current line
    arg lines down."
     (interactive "*p")
     (move-text-internal arg))

  (defun move-text-up (arg)
     "Move region (transient-mark-mode active) or current line
    arg lines up."
     (interactive "*p")
     (move-text-internal (- arg))
     )

  (defun move-paragraph-down (arg)
     "Move current paragraph down."
     (interactive "*p")
     (transpose-paragraphs arg)
     (backward-paragraph arg)
     (forward-char))

  (defun move-paragraph-up (arg)
     "Move current paragraph down."
     (interactive "*p")
     (transpose-paragraphs (- arg))
     (backward-paragraph arg)
     (forward-char))

#+END_SRC
** 符号对操作
*** smart-parens [[https://github.com/Fuco1/smartparens][URL]]
比想像中的强大的多, 完全可以代替之前的设置.
1. 可以一对对的插入或删除
2. 可以在 region 里插入括号. 在 insert-mode 下选择区域, 按括号即可.

使用方法可以参考这里: [[https://ebzzry.github.io/emacs-pairs.html][URL]]
*** 旧的配置代码
#+BEGIN_SRC emacs-lisp

  (defvar my-skeleton-pair-alist
    '((?\) . ?\()
      (?\] . ?\[)
      (?} . ?{)
      ;; (?> . ?<)
      (?" . ?")))

  (defun my-skeleton-pair-end (arg)
    "Skip the char if it is an ending, otherwise insert it."
    (interactive "*p")
    (let ((char last-command-char))
      (if (and (assq char my-skeleton-pair-alist)
               (eq char (following-char)))
          (forward-char)
        (self-insert-command (prefix-numeric-value arg)))))


  (global-set-key (kbd "<f5> (") 'insert-pair)
  (global-set-key (kbd "<f5> <") 'insert-pair)
  (global-set-key (kbd "<f5> [") 'insert-pair)
  (global-set-key (kbd "<f5> {") 'insert-pair)
  (global-set-key (kbd "<f5> \"") 'insert-pair)
  (global-set-key (kbd "<f5> '") 'insert-pair)
  (global-set-key (kbd "<f5> C-d") 'delete-pair)
  ;; do not insert spaces
  (setq parens-require-spaces nil)

  ;; http://www.emacswiki.org/emacs/ParenthesesAppearance
  (show-paren-mode t)

  ;; enable electric pair by default
  ;; (setq electric-pair-mode t)

#+END_SRC

#+RESULTS:
: t

** 自动扩选
#+BEGIN_SRC emacs-lisp
;; http://xahlee.org/emacs/modernization_mark-word.html
;; by Nikolaj Schumacher, 2008-10-20. Released under GPL.
(defun semnav-up (arg)
  (interactive "p")
  (when (nth 3 (syntax-ppss))
    (if (> arg 0)
        (progn
          (skip-syntax-forward "^\"")
          (goto-char (1+ (point)))
          (decf arg))
      (skip-syntax-backward "^\"")
      (goto-char (1- (point)))
      (incf arg)))
  (up-list arg))

;; by Nikolaj Schumacher, 2008-10-20. Released under GPL.
(defun extend-selection (arg &optional incremental)
  "Select the current word.
Subsequent calls expands the selection to larger semantic unit."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     (or (and transient-mark-mode mark-active)
                         (eq last-command this-command))))
  (if incremental
      (progn
        (semnav-up (- arg))
        (forward-sexp)
        (mark-sexp -1))
    (if (> arg 1)
        (extend-selection (1- arg) t)
      (if (looking-at "\\=\\(\\s_\\|\\sw\\)*\\_>")
          (goto-char (match-end 0))
        (unless (memq (char-before) '(?\) ?\"))
          (forward-sexp)))
      (mark-sexp -1))))

(global-set-key (kbd "M-8") 'extend-selection)

(defun select-text-in-quote ()
"Select text between the nearest left and right delimiters.
Delimiters are paired characters: ()[]<>«»“”‘’「」, including \"\"."
 (interactive)
 (let (b1 b2)
   (skip-chars-backward "^<>(“{[「«\"‘")
   (setq b1 (point))
   (skip-chars-forward "^<>)”}]」»\"’")
   (setq b2 (point))
   (set-mark b1)
   )
 )

(defun select-none-blank-text ()
"Select none blank chars near the point in current line"
 (interactive)
 (let (b1 b2)
   (skip-chars-backward "^ \n")
   (setq b1 (point))
   (skip-chars-forward "^ \n")
   (setq b2 (point))
   (set-mark b1)
   )
 )

(defun select-word ()
"Select none blank chars near the point in current line"
 (interactive)
 (let (b1 b2)
   (backward-word)
   (setq b1 (point))
   (forward-word)
   (setq b2 (point))
   (set-mark b1)
   )
 )

(defun select-line ()
"Select current line"
 (interactive)
 (let (b1 b2)
   (move-beginning-of-line nil)
   (setq b1 (point))
   (move-end-of-line nil)
   (setq b2 (point))
   (set-mark b1)
   )
 )

;; (global-set-key (kbd "M-*") 'select-text-in-quote)
;; (global-set-key (kbd "M-4") 'select-word)
(global-set-key (kbd "M-5") 'select-none-blank-text)
;; (global-set-key (kbd "M-6") 'select-line)

;; https://github.com/magnars/expand-region.el
(starter-kit-install-if-needed 'expand-region)
(require 'expand-region)
(global-set-key (kbd "M-4") 'er/expand-region)

#+END_SRC

** 同时编辑多处文本
*** old config
#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'iedit)
  (require 'iedit)
  (define-key global-map (kbd "C-;") 'iedit-mode)
  ;; disable flyspell mode for the annoying conflicting key bindings
  (flyspell-mode 0)
#+END_SRC

** goto-last-change
*** 如果需要先安装下.

#+BEGIN_SRC emacs-lisp
(starter-kit-install-if-needed 'goto-last-change)
#+END_SRC

#+RESULTS:
*** 设置快捷键
#+BEGIN_SRC emacs-lisp
(require 'goto-last-change)
(global-set-key (kbd "<f5> b") 'goto-last-change)
#+END_SRC

#+RESULTS:
: goto-last-change

** gjf-mode: 编译 gaussian GJF 文件
#+BEGIN_SRC emacs-lisp
(require 'gjf-mode)
#+END_SRC

#+RESULTS:
: gjf-mode

* ui
:PROPERTIES:
:header-args: :noweb-ref init-ui
:END:
** 语言字体
中文问题相关 [[https://github.com/hick/emacs-chinese][URL]]

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (global-font-lock-mode t)

  ;; force a syntax-highlighting refresh
  (global-set-key (kbd "<f5> <f5>") 'font-lock-fontify-buffer)
  (auto-image-file-mode t)              ; View images inside Emacs
  ;; set line space wider than default
  (setq-default line-spacing 4)

  ;; chinese-fonts-setup is amazing
  (use-package chinese-fonts-setup
    :ensure t
    :config
    (progn
      (setq cfs-profiles
            '("program" "org-mode" "read-book"))
      (setq cfs-profiles-directory (expand-file-name
                                    "chinese-fonts-setup"
                                    dotspacemacs-directory))
      (setq cfs--current-profile-name "program")
      (setq cfs-use-face-font-rescale t)
      )
    (chinese-fonts-setup-enable)
    (cfs-set-spacemacs-fallback-fonts)
    )

  ;; 修改 frame 标题 方便 gnome-shell 桌面切换
  (setq frame-title-format '("" "%b: " buffer-file-name))
#+end_src

** 文本滚动
默认的闪花了眼. spacemacs 默认启用平滑滚动, 但鼠标的 wheel 操作还是偏快.

#+BEGIN_SRC emacs-lisp results: none
  ;; emacs scrolls too fast
  ;; http://stackoverflow.com/questions/445873/emacs-mouse-scrolling
  (setq mouse-wheel-scroll-amount '(1 ((Shift) . 2) ((control) . nil)))
  (setq mouse-wheel-progressive-speed nil)      ; constant speed
  (setq scroll-preserve-screen-position nil)    ; do not reposition the screen when moving the cursor

#+END_SRC

* calendar
cal-china-x: https://github.com/xwl/cal-china-x

#+name: init-calendar
#+BEGIN_SRC emacs-lisp
  (use-package cal-china-x)

  (setq mark-holidays-in-calendar t)

  (setq calendar-week-start-day 1)

  (setq general-holidays '(
               (holiday-fixed 1 1  "元旦")
               (holiday-fixed 2 14     "情人节")
               (holiday-fixed 3 14     "白色情人节")
               (holiday-fixed 4 1  "愚人节")
               (holiday-float 5 0 2    "母亲节")
               (holiday-float 6 0 3    "父亲节")
               (holiday-fixed 9 10     "教师节")
               (holiday-fixed 10 1     "国庆节")
               (holiday-fixed 12 25    "圣诞节")))

  (setq local-holidays '(
                 (holiday-lunar 12 30  "春节" 0)
                 (holiday-lunar 1 15     "元宵" 0)
                 (holiday-lunar 5 5  "端午" 0)
                 (holiday-lunar 7 7  "七夕" 0)
                 (holiday-lunar 8 15     "中秋" 0)
                 (holiday-lunar 8 25     "焱焱生日" 0)
                 (holiday-lunar 12 23     "金玉生日" 0)
                 (holiday-lunar 12 14     "文华生日" 0)
                 (holiday-lunar 2 3     "二毛生日" 0)
                 (holiday-lunar 9 9  "重阳" 0)
                 (holiday-lunar 12 8     "腊八" 0)
                 (holiday-lunar 12 24    "小年" 0)))

  (setq calendar-holidays local-holidays)

  (setq christian-holidays nil)
  (setq hebrew-holidays nil)
  (setq islamic-holidays nil)
  (setq solar-holidays nil)
  (setq bahai-holidays nil)
  (setq oriental-holidays nil)

  (setq calendar-mark-holidays-flag t)
  (setq mark-diary-entries t)
#+END_SRC

* development
:PROPERTIES:
:header-args: :noweb-ref init-dev
:END:
** 版本管理
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
;; (remove-hook 'vc-checkout-hook 'time-stamp)
(add-hook 'vc-before-checkin-hook 'time-stamp)

#+END_SRC
** tab key
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "ybyygu@gmail.com")
(setq default-tab-width 4)
(setq tab-width 4)                             ; Length of tab is 4 SPC

#+END_SRC

** 自动完成
系统自带的 abbrev 功能比较简单. 可以用 M-/来激活补全.

#+BEGIN_SRC emacs-lisp
  ;; abbreviations
  (setq abbrev-file-name "~/.emacs.d/abbreviations")
  (when (file-exists-p abbrev-file-name)
    (quietly-read-abbrev-file))
  (setq save-abbrevs 'silently)
#+END_SRC

* org-mode
用于配置 org-mode 一些必要设置. 其它尽量使用 org-mode in-buffer 设置. 可
参考 tumashu 的设置 [[https://github.com/tumashu/emacs-helper/blob/master/eh-org.el][URL]]
** settings
#+name: init-org
#+begin_src elisp
  (add-to-list 'auto-mode-alist '("\\.note\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("NOTE" . org-mode))

  (use-package org
    :ensure org-plus-contrib
    :config
    (progn
      (setq org-directory  "~/Notes")
      (setq org-default-notes-file (concat org-directory "/life.note"))
      (setq org-blank-before-new-entry nil)

      ;; disabled for updating to version 9.0
      ;; open link in new frame
      ;; (setq org-link-frame-setup
      ;;       (quote
      ;;        ((vm . vm-visit-folder-other-frame)
      ;;         (vm-imap . vm-visit-imap-folder-other-frame)
      ;;         (gnus . org-gnus-no-new-news)
      ;;         (file . find-file-other-frame)
      ;;         (wl . wl-other-frame))))
      )
    )
#+end_src
** agenda
*** init-org-agenda
用 use-package 来自动化处理

#+name: init-org-agenda
#+BEGIN_SRC elisp
  (use-package org-agenda
    :ensure org-plus-contrib
    :config
    (progn
      <<config-org-agenda>>
      )
    )

  ;; disabled for upgrading to org-9.0
  ;; auto export agenda
  ;; (defun gwp/run-agenda-store ()
  ;;   ""
  ;;   (message "Exporting agenda... ")
  ;;   (org-batch-store-agenda-views)
  ;;   (message "Agenda exported."))

  ;; ;; export agenda if I am away for 2 minutes
  ;; (run-with-idle-timer 600 t 'gwp/run-agenda-store)

#+END_SRC
*** config-org-agenda
#+name: config-org-agenda
#+BEGIN_SRC elisp
  ;; 2013-01-20: less is more
  ;; (setq org-agenda-files (append (file-expand-wildcards "~/Notes/*.note") (file-expand-wildcards "~/Notes/*/*.note")))
  (setq org-agenda-files "~/Notes/.agenda_files")

  (setq org-agenda-include-diary t)
  (setq org-agenda-span (quote month))

  ;; the default is todo-start
  (setq org-icalendar-use-scheduled (quote (event-if-not-todo event-if-todo todo-start)))
  (setq org-icalendar-alarm-time 5)

  (setq org-agenda-custom-commands
        '(("a" agenda "" nil ("~/Notes/org-cal.ics"))
          ("g" . "GTD contexts") ; description for "g" prefix
          )
        )

  (add-to-list 'org-agenda-custom-commands
               '("gr" "Reading"
                 ((tags-todo "Reading|Read"
                             (
                              (org-agenda-overriding-header "待读列表\n------------------")
                              (org-agenda-sorting-strategy '(category-keep priority-down))
                              (org-agenda-remove-tags t)
                              (org-agenda-compact-blocks t)
                              )
                             )
                  (tags "REFILE"
                        (
                         (org-agenda-overriding-header "Tasks to Refile\n------------------")
                         (org-tags-match-list-sublevels nil)
                         )
                        )
                  )
                 ((org-agenda-compact-blocks t))
                 )
               )

  (add-to-list 'org-agenda-custom-commands
               '("gt" "Tasks"
                 ((tags "ASAP+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "ASAP\n------------------")
                         (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )

                  (tags "Project+Action+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "Project\n------------------")
                         (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                         )
                        )
                  (tags "Action+Study+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "Topics\n------------------")
                         (org-agenda-files '("~/Notes/research.note"))
                         (org-agenda-sorting-strategy '(priority-down timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )

                  (tags "Action+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "生活琐事\n------------------")
                         (org-agenda-files '("~/Notes/life.note"))
                         (org-agenda-sorting-strategy '(priority-down timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )

                  (tags "Computer+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "电脑调优\n------------------")
                         (org-agenda-sorting-strategy '(priority-down timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )
                  )
                 ;; options set here apply to the entire block
                 (
                  (org-tags-match-list-sublevels nil)
                  (org-agenda-prefix-format "%-20c ")
                  (org-agenda-todo-keyword-format "")
                  (org-agenda-remove-tags t)
                  (org-agenda-compact-blocks t)
                  )
                 )
               )

  ;; Show all future entries for repeating tasks
  (setq org-agenda-repeating-timestamp-show-all t)
  ;; do not show agenda dates if they are empty
  (setq org-agenda-show-all-dates nil)

  ;; Sorting order for tasks on the agenda
  (setq org-agenda-sorting-strategy
        (quote ((agenda time-up priority-down category-up)
                (todo priority-down)
                (tags priority-down))))

  ;; Start the weekly agenda today
  (setq org-agenda-start-on-weekday nil)
  ;; do not include todo items
  (setq org-agenda-include-all-todo nil)

#+END_SRC
** gpg crypt
#+name: init-org-crypt
#+begin_src elisp
  (require 'epa-file)
  (epa-file-enable)
  (require 'org-crypt)

  ;; Encrypt all entries before saving
  (org-crypt-use-before-save-magic)
  (setq org-crypt-tag-matcher "crypt")
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  ; GPG key to use for encryption
  (setq org-crypt-key "38D95BC6411A87E7") ; ybyygu@gmail.com
  (setq org-crypt-disable-auto-save nil)
#+end_src

下面的用不到了. 因为是内置包.
#+begin_src emacs-lisp
  (use-package epa-file
               :config
               (epa-file-enable)
               )

  (use-package org-crypt
               :after org
               :demand t
               :config
               (progn
                 <<config-org-crypt>>
                 )
               )
#+end_src

** exports
:PROPERTIES:
:header-args: :noweb-ref init-org-export
:END:

主要添加 cn-article classes, 修改使用 xelatex 来处理 tex 文档.

也可以用这个包: https://github.com/tumashu/ox-latex-chinese

*** 修改文件关联
#+BEGIN_SRC emacs-lisp
  ;; allow bind variables
  (setq org-export-allow-bind-keywords t)

  ;; disable evaluation when export source codes
  (setq org-export-babel-evaluate nil)

  ;; disabled for updating to version 9.0
  ;; PDFs visited in Org-mode are opened in Evince (and not in the default choice)
  ;; http://stackoverflow.com/a/8836108/789593
  ;; (delete '("\\.pdf\\'" . default) org-file-apps)
  ;; (delete '("\\.djvu\\'" . default) org-file-apps)
  ;; (delete '("\\.png\\'" . default) org-file-apps)
  ;; (delete '("\\.ods\\'" . default) org-file-apps)
  ;; (delete '("\\.doc\\'" . default) org-file-apps)
  ;; (delete '("\\.html\\'" . default) org-file-apps)
  ;; (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))
  ;; (add-to-list 'org-file-apps '("\\.djvu\\'" . "evince %s"))
  ;; (add-to-list 'org-file-apps '("\\.ods\\'" . "libreoffice --calc %s"))
  ;; (add-to-list 'org-file-apps '("\\.doc\\'" . "libreoffice --writer %s"))
  ;; (add-to-list 'org-file-apps '("\\.png\\'" . "eog %s"))
  ;; (add-to-list 'org-file-apps '("\\.html\\'" . "firefox %s"))

#+END_SRC
*** latex
以后可以考虑使用 ox-latex-chinese 包

#+BEGIN_SRC emacs-lisp
  (require 'ox-beamer)
  (require 'ox-latex)

  (defun my-auto-tex-parameters ()
        "setup xelatex environment"

        (setq org-latex-classes
              (cons '("article"
                      "\\documentclass[11pt,article,oneside]{memoir}"
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                    org-latex-classes))

        (setq org-latex-classes
              (cons '("cn-article"
                      "\\documentclass[nocap]{ctexart}
                      [NO-DEFAULT-PACKAGES]
                      [NO-PACKAGES]"
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                    org-latex-classes))
        )

  (my-auto-tex-parameters)

  ;; Use XeLaTeX to export PDF in Org-mode
  (setq org-latex-pdf-process
        '("xelatex -interaction nonstopmode -output-directory %o %f"
          "xelatex -interaction nonstopmode -output-directory %o %f"
          "xelatex -interaction nonstopmode -output-directory %o %f")
        )
#+END_SRC

** refile
#+name: init-org-refile
#+BEGIN_SRC emacs-lisp
  ;; any headline with level <= 2 is a target
  (setq org-refile-targets '(
                             (org-agenda-files :tag . "Incoming")
                             )
        )

  (setq org-reverse-note-order t)
  (defun gwp/get-org-file-link-path ()
    (save-excursion
      (beginning-of-line)
      (search-forward "[[file:" (line-end-position))
      (if (org-in-regexp org-bracket-link-regexp 1)
          (org-link-unescape (match-string-no-properties 1))
        )
      )
    )

  (defun gwp/enter-to-read-state()
    "evoke external shell script when entering READ state"
    (when (equal org-state "READ")
      (setq file (gwp/get-org-file-link-path))
      (if file
          (progn
           (setq cmd (concat "org-to-read.sh " (shell-quote-argument file)))
           (message cmd)
           (shell-command cmd)
          )
          )
      )
      (when (equal org-last-state "READ")
        (message "try to remove READ state")
        (setq file (gwp/get-org-file-link-path))
        (if file
            (progn
              (setq cmd (concat "org-read-done.sh " (shell-quote-argument file)))
              (message cmd)
              (shell-command cmd)
              )
          )
        )
    )
  (add-hook 'org-after-todo-state-change-hook 'gwp/enter-to-read-state)

  ;; show a sparse-tree in READ keyword
  (defun gwp/org-show-read-tree ()
    "show a sparse-tree in READ keyword"
    (interactive)

    (let ((base-vector [?\C-u ?\M-x ?o ?r ?g ?- ?s ?h ?o ?w ?- ?t ?o ?d ?o ?- ?t ?r ?e ?e return ?R ?E ?A ?D return]))
      ;; create new macro of the form
      ;; C-u M-x org-show-todo-tree RET READ RET
      (execute-kbd-macro (vconcat base-vector
                                  (vector 'return)))))

#+END_SRC

** screenshot
*** org-attach-screenshot [[https://github.com/dfeich/org-screenshot][URL]]
感觉这个包比 org-download 质量更高一些. 优点:
1. 截屏的时候自动隐藏当前编辑窗口.
2. 使用 org-attach 来处理文件的删除.

使用 shutter:
: shutter -s -n -e --disable_systray -o

#+name: init-org-screenshot
#+BEGIN_SRC emacs-lisp :results none
  (defun gwp/init-org-attach-screenshot ()
    (use-package org-attach-screenshot
                 :after org
                 :bind
                 (("C-c <insert>" . org-attach-screenshot))
                 :config
                 (setq org-attach-screenshot-command-line "shutter -s -n -e --disable_systray -o %f")
                 )
    )
#+END_SRC

*** org-download
使用 org-download 包来实现截屏的功能. 这是 spacemacs org layer 中使用的包.

#+BEGIN_SRC elisp
  (use-package org-download
               :after org
               :disabled t
               :config
               (progn
                 ;; (setq org-download-method 'directory)
                 ;; or
                 (setq org-download-method 'attach)
                 (setq-default org-download-image-dir "./images/")
                 (setq org-download-screenshot-method "emacs-take-snapshot.sh %s")
                 ;; disable annotation
                 (setq org-download-annotate-function (lambda (_) ""))
                 )
               )
#+END_SRC
*** gwp/insert-screen
#+BEGIN_SRC emacs-lisp
  (defun delete-linked-file (start end)
    "Delete the file named at point."

    (interactive "r")

    (let ((file (buffer-substring start end)))
      (setq file (replace-regexp-in-string "^\s*\\[\\[" "" file))
      (setq file (replace-regexp-in-string "\\]\\]\s*$" "" file))
      (setq file (replace-regexp-in-string "^\s*file:" "" file))
      (message "filename %s" file)
      (if (and (file-exists-p file) (y-or-n-p (format "Delete %s? " file)))
          (progn
            (delete-region start end)
            (delete-file file)
            (message "Deleted %s" file)
            )
        (progn
          (message "Did not delete %s" file)
          )
        )
      )
    )

  (defun insert-screen (path)
    "Save screenshot into sub directory named as images.
    To use this function, you need install shutter"
    (interactive "P")

    (setq insert t)
    (if (org-in-regexp org-bracket-link-regexp 1)
        (progn
          (setq path (match-string-no-properties 1))
          (setq insert nil)
        )
      (progn
        (setq path (make-temp-name (format-time-string "images/%Y-%m-%d-%H%M")))
        (setq path (concat path ".png"))
        (setq insert t)
        )
      )

    (setq path (read-string "File name: " path))
    (if insert
        (insert (format "[[file:%s]]" path))
        )

    (shell-command (format "emacs-take-snapshot.sh %s" path))
    (message (concat "You have save screen as " path " at: " (file-name-directory buffer-file-name)))
    )

  (defun insert-link-from-clipboard-old (name)
    "Save file path in clipboard as link"
    (interactive "sLink description: ")

    ;; UTF8_STRING is necessary to work for copying in nautilus
    (setq content (x-get-selection 'CLIPBOARD 'UTF8_STRING))
    (if (file-readable-p content)
        (progn
          (setq link-path (file-relative-name content))
          (insert (format "[[file:%s][%s]]" link-path name))
          )
      (message "No file path found in clipboard.")
      )
    (setq current-prefix-arg '(4)) ; C-u
    (let ((default-directory choose-directory-default-directory))
      (call-interactively 'org-insert-link)
      )
    )

  (defun insert-link-from-clipboard (something)
    "Save file path in clipboard as relative link"
    (interactive "sEnter desc: ")
    (let ((base-vector [?\C-u ?\M-x ?o ?r ?g ?- ?i ?n ?s ?e ?r ?t ?- ?l ?i ?n ?k return ?\C-v return]))
      ;; create new macro of the form
      ;; C-u M-x org-insert-link RET C-v RET
      (execute-kbd-macro (vconcat base-vector
                                  (string-to-vector something)
                                  (vector 'return)))))

#+END_SRC
** zotero
主要是用来支持 "zotero:" 链接的.

#+name: init-org-zotxt
#+begin_src emacs-lisp
  (defun gwp/init-zotxt ()
    (use-package org-zotxt
                 :after org
                 :config (add-hook 'org-mode-hook (org-zotxt-mode t))
               )
    )

#+end_src

** babel
所有支持的语言: [[http://orgmode.org/worg/org-contrib/babel/languages.html][URL]]
1. [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-awk.html][awk]]
2. [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-R.html][R]]
3. [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][Python]]

  #+begin_src emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (R . t)
       (sh . t)
       (C . t)
       (perl . t)
       (plantuml . t)
       )
     )

    ;; http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-makefile.html
    ;; For tabs aren't lost in the Org mode buffer
    (setq org-src-preserve-indentation nil)

    (setq org-plantuml-jar-path
          (expand-file-name "~/.emacs.d/plantuml/plantuml.jar"))
    (add-hook 'org-babel-after-execute-hook 'gwp/display-inline-images 'append)

    (setq org-babel-python-command "python3")

    (defun gwp/display-inline-images ()
      (condition-case nil
          (org-display-inline-images)
        (error nil)))
    (setq org-confirm-babel-evaluate nil)
  #+end_src

  #+RESULTS:
* server mode
修改.spacemacs 文件:
: (setq-default dotspacemacs-persistent-server t)

退出 server 的方法:
: SPC q q
: SPC q s

#+BEGIN_SRC emacs-lisp
  ;; using existing Emacs process as the server
  (server-start)

  (defun gwp/quit-frame-and-kill-buffer ()
    "kill the current buffer and the current frame"
    (interactive)

    (remove-hook 'kill-buffer-query-functions 'server-kill-buffer-query-function)
    (kill-buffer)
    (delete-frame)
    )

  ;; quit emacs server
  (global-set-key (kbd "<C-f4>") 'save-buffers-kill-emacs)

  ;; http://stackoverflow.com/questions/268088/how-to-remove-the-prompt-for-killing-emacsclient-buffers
  ;; this seems work
  (defalias 'server-kill-buffer-query-function '(lambda () t))

#+END_SRC

#+RESULTS:
: save-buffers-kill-emacs

* spacemacs
** install
官方首页提供了三种安装方式. 迁移的时候考虑使用第二种或第三种.

1. spacemacs 目录放置到~/etc/spacemacs/.emacs.d
   : git clone https://github.com/syl20bnr/spacemacs.git ~/etc/spacemacs/.emacs.d

2. 修改配置文件中的路径
   elpa 默认仍是存在~/.emacs.d/elpa 下, 可以用 [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Files.html][package-user-dir]] 修改.

   #+header: :tangle init.el
   #+begin_src emacs-lisp
     (setq spacemacs-start-directory "~/etc/spacemacs/.emacs.d/")
     (setq package-user-dir (file-name-as-directory
                             (concat spacemacs-start-directory "elpa/")))
     (load-file (concat spacemacs-start-directory "init.el"))
   #+end_src

3. 命令行启动 emacs
   #+header: :tangle start.sh
   #+header: :shebang #! /bin/sh
   #+begin_src sh
     # HOME=`pwd` emacs
     # emacs -q -l ...
     emacs --no-init-file --load ~/etc/spacemacs/init.el
   #+end_src

** tips
*** gold-ratio 可以自动放大当前的 window 区域: SPC t g
*** 使用外部程序打开文件的方式
emacs 默认使用 docview mode 来打开链接的文件, 比如 PDF 等, 不太方便. 操作步骤:
1. dired-jump (SPC fj): 使用 dired 打开当前文件所在目录
2. 在 dired 界面上选择某个文件, 使用 external 程序打开 (SPC fo).
3. 也可以在 dired 界面上用"!"命令, 指定任意程序打开.
*** user-init 和 user-config
from FAQ: [[http://spacemacs.org/doc/FAQ.html][URL]]

1.12 Should I place my settings in user-init or user-config?

Any variable that layer configuration code will read and act on must be set in
user-init, and any variable that Spacemacs explicitly sets but you wish to
override must be set in user-config.

Anything that isn't just setting a variable should 99% be in user-config.
*** 打开.spacemacs 配置文件
: SPC f e d
*** 调整字体大小 (zoom)
: SPC z x +/-

** dot-spacemacs
这里设置 .spacemacs 相关的细节. .spacemacs 文件可放到.spacemacs.d 文件中,
并更名为 init.el
*** user-init
配置 elpa 国内源
#+BEGIN_SRC elisp
  (defun dotspacemacs/user-init ()
    "Initialization function for user code.
  It is called immediately after `dotspacemacs/init', before layer configuration
  executes.
   This function is mostly useful for variables that need to be set
  before packages are loaded. If you are unsure, you should try in setting them in
  `dotspacemacs/user-config' first."
    (setq configuration-layer--elpa-archives
          '(("melpa-cn" . "https://elpa.zilongshanren.com/melpa/")
            ("org-cn"   . "https://elpa.zilongshanren.com/org/")
            ("gnu-cn"   . "https://elpa.zilongshanren.com/gnu/")))
    )
#+END_SRC
*** user-config
#+begin_src emacs-lisp
  (setq-default dotspacemacs-persistent-server t)
#+end_src
*** custom-file
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" dotspacemacs-directory))
  (load custom-file 'no-error 'no-message)
#+end_src

在.spacemacs 文件最后添加
** gwp layer
*** packages.el
通过 packages.el 接口, 可以将自己的一些设置与 spacemacs 融为一体.

#+header: :noweb yes
#+header: :tangle ~/.spacemacs.d/layers/gwp/packages.el
#+BEGIN_SRC elisp
  ;;; packages.el --- gwp layer packages file for Spacemacs.

  ;;; Commentary:

  ;; Briefly, each package to be installed or configured by this layer should be
  ;; added to `gwp-packages'. Then, for each package PACKAGE:
  ;;
  ;; - If PACKAGE is not referenced by any other Spacemacs layer, define a
  ;;   function `gwp/init-PACKAGE' to load and initialize the package.

  ;; - Otherwise, PACKAGE is already referenced by another Spacemacs layer, so
  ;;   define the functions `gwp/pre-init-PACKAGE' and/or
  ;;   `gwp/post-init-PACKAGE' to customize the package as it is loaded.

  ;;; Code:

  (defconst gwp-packages
    '(
      (org :location built-in)
      (org-bullets :excluded t)  ;; shipped with spacemacs in org layer
      (org-download :excluded t) ;; shipped with spacemacs in org layer
      zotxt
      chinese-fonts-setup
      cal-china-x
      ox-latex-chinese
      org-attach-screenshot
      fcitx
      ;; pangu-spacing
      )

    "The list of Lisp packages required by the gwp layer.")

  (defun gwp/init-chinese-fonts-setup ()
    <<init-ui>>

    <<init-dev>>
    )

  (defun gwp/init-cal-china-x ()
    <<init-calendar>>
    )

  (defun gwp/post-init-org ()
    (with-eval-after-load 'org
      (progn
        <<init-org>>
        <<init-org-agenda>>
        <<init-org-crypt>>
        <<init-org-export>>
        <<init-org-refile>>
        )
      )
    )

  (defun gwp/init-ox-latex-chinese ()
    ;;
    )

  (defun gwp/init-fcitx ()
    (use-package fcitx
      :init
      (setq fcitx-active-evil-states '(insert emacs hybrid)) ; if you use hybrid mode
      ;; M-m is common in Spacemacs
      (fcitx-prefix-keys-add "M-m")

      ;; for Linux users, it is recommended
      (fcitx-aggressive-setup)
      (setq fcitx-use-dbus t)
      )
    )

  <<init-org-screenshot>>

  ;; codes taken from chinese-layer
  ;; (defun gwp/init-pangu-spacing ()
  ;;   (use-package pangu-spacing
  ;;     :defer t
  ;;     :init (progn (global-pangu-spacing-mode 1)
  ;;                  (spacemacs|hide-lighter pangu-spacing-mode)
  ;;                  ;; Always insert `real' space in org-mode.
  ;;                  (add-hook 'org-mode-hook
  ;;                            '(lambda ()
  ;;                               (set (make-local-variable 'pangu-spacing-real-insert-separtor) t))))))

  <<init-org-zotxt>>

  ;;; packages.el ends here

#+END_SRC
*** keybindings.el
#+header: :tangle ~/.spacemacs.d/layers/gwp/keybindings.el
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-l") 'goto-line)

  ;; make it easier to paste things
  ;; (define-key evil-insert-state-map (kbd "C-v") 'yank)
  ;; becasue I use hybrid mode
  (define-key evil-hybrid-state-map (kbd "C-v") 'yank)

  ;; make it easier to undo
  (define-key evil-hybrid-state-map (kbd "C-z") 'undo-tree-undo)
  (define-key evil-hybrid-state-map (kbd "M-u") 'undo-tree-undo)

  (defun gwp/insert-date (arg)
    "Insert date at point. With prefix argument, insert date and time."
    (interactive "P")
    (insert (format-time-string "%Y-%m-%d"))
    (when arg
      (insert (format-time-string " %H:%M"))
      )
    )

  ;; make it easier to update time-stamp
  ;; (global-set-key (kbd "C-c i") 'gwp/insert-date)
  (define-key evil-hybrid-state-map (kbd "C-c i") 'gwp/insert-date)

  ;; whitespace
  (setq show-trailing-whitespace t)
  (global-set-key (kbd "<f5> SPC") 'delete-trailing-whitespace)
  ;; make sure this always work
  (global-set-key (kbd "C-x C-o") 'delete-blank-lines)
#+END_SRC
*** config.el
这里添加 gwp layer 本身需要的配置. 暂时没有必要.

* deprecated
** development
*** 高亮当前行
所有已定义的颜色:
: list-colors-display

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  (set-face-attribute hl-line-face nil :underline nil :background "gray0")
#+END_SRC

*** 书签&导航等
主要用 bm, 书签持久化是从 bm.el 里抄来的.

#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'bm)
  (setq bm-restore-repository-on-load t)

  (require 'bm)
  (global-set-key (kbd "<left-fringe> <mouse-5>") 'bm-next-mouse)
  (global-set-key (kbd "<left-margin> <mouse-5>") 'bm-next-mouse)
  (global-set-key (kbd "<left-fringe> <mouse-4>") 'bm-previous-mouse)
  (global-set-key (kbd "<left-margin> <mouse-4>") 'bm-previous-mouse)
  (global-set-key [left-margin mouse-3] 'gwp-mouse-toggle-bm)
  (global-set-key [left-fringe mouse-3] 'gwp-mouse-toggle-bm)

  (setq-default bm-buffer-persistence t)
  (add-hook' after-init-hook 'bm-repository-load)
  (add-hook 'find-file-hooks 'bm-buffer-restore)
  (add-hook 'kill-buffer-hook 'bm-buffer-save)
  (add-hook 'kill-emacs-hook '(lambda nil
                    (bm-buffer-save-all)
                    (bm-repository-save)))

  (add-hook 'after-save-hook 'bm-buffer-save)
  ;; Restore bookmarks when buffer is reverted.
  (add-hook 'after-revert-hook 'bm-buffer-restore)
  ;; make sure bookmarks is saved before check-in (and revert-buffer)
  (add-hook 'vc-before-checkin-hook 'bm-buffer-save)

  (defun gwp-mouse-toggle-bm (e)
    "Toggle bookmarking
  This command should be bound to a mouse key.
  Argument E is a mouse event used by `mouse-set-point'."
    (interactive "@e")
    (save-excursion
      (mouse-set-point e)
      (bm-toggle)
      (bm-save)
      )
    )


#+END_SRC

#+RESULTS:
: gwp-mouse-toggle-bm

*** 注释
#+BEGIN_SRC emacs-lisp
  ; (starter-kit-install-if-needed 'line-comment-banner)
  ; (require 'line-comment-banner)
  ; (global-set-key (kbd "<f5> ;") 'line-comment-banner)

  ;; stolen from: http://www.emacswiki.org/emacs/CommentingCode
  (defun comment-dwim-line (&optional arg)
    "Replacement for the comment-dwim command.
    If no region is selected and current line is not blank and we are not at the end of the line,
    then comment current line.
    Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
      (interactive "*P")
      (comment-normalize-vars)
      (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
      (comment-or-uncomment-region (line-beginning-position) (line-end-position))
        (comment-dwim arg)))
  (global-set-key "\M-;" 'comment-dwim-line)


#+END_SRC

#+RESULTS:
: comment-dwim-line

*** 自动完成
系统自带的 abbrev 功能比较简单. 可以用 M-/来激活补全.

#+BEGIN_SRC emacs-lisp
  ;;
  ;; auto-complete
  ;; http://auto-complete.org/doc/manual.html
  ;;
  (starter-kit-install-if-needed 'auto-complete)
  (require 'auto-complete-config)
  (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
  (ac-config-default)
  ;; auto-start is really annoying
  (setq ac-auto-start nil)
  ;; override the default hippie-expand
  (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
  ;; (ac-set-trigger-key "TAB")

  ;;
  ;; yasnisppet
  ;;
  (starter-kit-load "yasnippet")

  ;; abbreviations
  (setq abbrev-file-name "~/.emacs.d/abbreviations")
  (when (file-exists-p abbrev-file-name)
    (quietly-read-abbrev-file))
  (setq save-abbrevs 'silently)
#+END_SRC

#+RESULTS:
: silently

** python
*** 使用 emacs 中自带的 python.el
   试了下, 一切都正常. 先这么着吧.

  #+begin_src emacs-lisp
    ;; (starter-kit-load "python")
    ;; Why python.el is better than python-mode.el:
    ;; http://mail.python.org/pipermail/python-mode/2007-October/000411.html

    (starter-kit-install-if-needed 'highlight-indentation)

    ;; enables IPython globally
    (setq python-shell-interpreter "ipython"
         python-shell-interpreter-args "--simple-prompt")

    (defun my-python-hook ()
      ;; disabled at 2013-01-19. will slow down the scrolling when codes was folded
      (linum-mode 1)
      ;; make left margin not jumpy
      ;; learned from:
      (setq linum-format "%3d\u2502")
      (menu-bar-mode 1)

      ;; easy reading the hierarchy of the code; I known that from elpy package
      (highlight-indentation-mode 1)

      ;; (load-ropemacs)
      ;; (ropemacs-mode 1)

      ;; org-mode style cycling folding
      ;; actually does not work in v6.0.12; maybe latter version will be ok
      ;; (setq py-org-cycle-p t)

      ;; outline-magic is better than org-cycle, indeed
      ;; http://stackoverflow.com/a/4093889/173271?sgp=2
      ;; (define-key python-mode-map [backtab] 'outline-cycle)
      ;; (define-key outline-minor-mode-map [M-S-down] 'outline-move-subtree-down)
      ;; (define-key outline-minor-mode-map [M-S-up] 'outline-move-subtree-up)
    )
    (add-hook 'python-mode-hook 'my-python-hook)
  #+end_src

  #+RESULTS:
  | (lambda nil (set (make-local-variable (quote yas-indent-line)) (quote fixed))) | er/add-python-mode-expansions | my-python-hook |

*** jedi
   jedi 依赖 auto-complete. jedi-server 安装时要将 virtualenv2 软链为
   virtualenv

   jedi 的快捷键:
   : C-c .
   : C-c ,
#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'jedi)
  ;; (add-hook 'python-mode-hook 'jedi:setup)
  ;; (setq jedi:complete-on-dot t)                 ; optional
#+END_SRC

#+RESULTS:
: t

** 界面显示相关
*** 配色主题
[[http://emacsthemes.caisah.info/][这里]] 有很多主题的图示, 看花眼了. [[https://github.com/owainlewis/emacs-color-themes][这个]] 也不错, 以很多程序员的名字命名.

#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'zenburn-theme)
  (starter-kit-install-if-needed 'smyx-theme)
  ;;(load-theme 'zenburn t)
  (load-theme 'smyx t)
  ;;(load-theme 'desert t)
  ;;(load-theme 'odersky t)
  ;; (load-file "~/.emacs.d/src/desert-theme.el" )
  ;; (load-file "~/.emacs.d/src/gwp-color-theme.el" )

#+END_SRC

#+RESULTS:
: t

* Local variables
# Local Variables:
# time-stamp-format: "%:y-%02m-%02d %02H:%02M"
# time-stamp-pattern: "100/Updated: %%$"
# End:
