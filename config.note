#+TITLE: Emacs 配置 (based on spacemacs)
#+SETUPFILE: ~/Notes/common.org
#+STARTUP: indent

# Created: 2016-10-14 14:20
# Updated: 2016-09-03 09:12

* 配置备忘
** [2016-10-16 Sun] 可参考 Purcell的配置: [[https://github.com/purcell/emacs.d][URL]]
** [2016-10-16 Sun] 中文字体的设置问题
*** 单独设 org-table [[https://emacs-china.org/t/org-mode/440/10][URL]]
#+BEGIN_SRC elisp
     (custom-set-faces
      ;; custom-set-faces was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(org-table ((t (:foreground "#6c71c4" :family "Ubuntu Mono")))))
#+END_SRC
*** 使用 chinese-fonts-setup
#+BEGIN_SRC elisp
  (use-package chinese-fonts-setup)
  (chinese-fonts-setup-enable)
  (cfs-set-spacemacs-fallback-fonts)
#+END_SRC

*** 中英文分别设置
** [2016-10-15 Sat] 可参考 sachac 的配置: [[https://github.com/sachac/.emacs.d][URL]]
** [2016-10-15 Sat] spacemacs 设置修改方案
参考这里: [[https://github.com/ale-batt/dotspacemacs][URL]]

1. 修改.spacemacs 中的 user-config 函数, 从 gwp.org 文件中读取设置
   : (with-eval-after-load 'org (org-babel-load-file "~/etc/spacemacs/config.org")) 
   或者: 
   : (with-eval-after-load 'org (load-file "~/etc/spacemacs/config.el")) 
** [2016-10-15 Sat] 参考子龙山人的配置 [[https://github.com/zilongshanren/spacemacs-private][URL]]
** [2016-10-14 Fri] emacs24-starter-kit 更新维护不是很活跃. 现在已是 emacs25 时代了. 考虑换到 spacemacs
官方首页提供了三种安装方式. 迁移的时候考虑使用第二种或第三种.

1. spacemacs 目录放置到~/etc/spacemacs/.emacs.d
   : git clone https://github.com/syl20bnr/spacemacs.git ~/etc/spacemacs/.emacs.d

2. 修改配置文件中的路径
   elpa默认仍是存在~/.emacs.d/elpa下, 可以用 [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Files.html][package-user-dir]] 修改.
   
   #+header: :tangle init.el
   #+begin_src emacs-lisp
     (setq spacemacs-start-directory "~/etc/spacemacs/.emacs.d/")
     (setq package-user-dir (file-name-as-directory
                             (concat spacemacs-start-directory "elpa/")))
     (load-file (concat spacemacs-start-directory "init.el"))
   #+end_src

3. 命令行启动 emacs
   #+header: :tangle start.sh
   #+header: :shebang #! /bin/sh
   #+begin_src sh
     # HOME=`pwd` emacs
     # emacs -q -l ...
     emacs --no-init-file --load ~/etc/spacemacs/init.el
   #+end_src
* Tips 
** user-init 和 user-config
from FAQ: [[http://spacemacs.org/doc/FAQ.html][URL]]

1.12 Should I place my settings in user-init or user-config?

Any variable that layer configuration code will read and act on must be set in
user-init, and any variable that Spacemacs explicitly sets but you wish to
override must be set in user-config.

Anything that isn't just setting a variable should 99% be in user-config.
** 打开.spacemacs 配置文件
: SPC f e d
** 调整字体大小 (zoom)
: SPC z x +/-

* scripts
* dot-spacemacs
这里设置 .spacemacs 相关的细节. .spacemacs文件可放到.spacemacs.d文件中,
并更名为init.el
** user-init
配置 elpa 国内源
#+BEGIN_SRC elisp
  (defun dotspacemacs/user-init ()
    "Initialization function for user code.
  It is called immediately after `dotspacemacs/init', before layer configuration
  executes.
   This function is mostly useful for variables that need to be set
  before packages are loaded. If you are unsure, you should try in setting them in
  `dotspacemacs/user-config' first."
    (setq configuration-layer--elpa-archives
          '(("melpa-cn" . "https://elpa.zilongshanren.com/melpa/")
            ("org-cn"   . "https://elpa.zilongshanren.com/org/")
            ("gnu-cn"   . "https://elpa.zilongshanren.com/gnu/")))
    )
#+END_SRC
** user-config
#+begin_src emacs-lisp
  (load-file (expand-file-name "gwp.org" dotspacemacs-directory))
#+end_src
** custom-file
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" dotspacemacs-directory))
  (load custom-file 'no-error 'no-message)
#+end_src

在.spacemacs文件最后添加

* 界面显示相关
1. 中文问题相关 [[https://github.com/hick/emacs-chinese][URL]]
** 语言字体等
#+name: init-ui
#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8) 
  (global-font-lock-mode t)

  ;; force a syntax-highlighting refresh
  (global-set-key (kbd "<f5> <f5>") 'font-lock-fontify-buffer)
  (auto-image-file-mode t)              ; View images inside Emacs
  ;; set line space wider than default
  (setq-default line-spacing 4)

  ;; chinese-fonts-setup is amazing
  (use-package chinese-fonts-setup
    :ensure t
    :config
    (progn
      (setq cfs-profiles
            '("program" "org-mode" "read-book"))
      (setq cfs-profiles-directory (expand-file-name
                                    "chinese-fonts-setup"
                                    dotspacemacs-directory))
      (setq cfs--current-profile-name "program")
      ;; (setq cfs-use-face-font-rescale (eq system-type 'gnu/linux))
      )
    (chinese-fonts-setup-enable)
    (cfs-set-spacemacs-fallback-fonts)
    )
#+end_src

* org-download
#+BEGIN_SRC elisp
  (defun wally/init-org-download()
    (use-package org-download
      :bind    (:map org-mode-map
                     ("\C-c\M-y" . org-download-image)
                     )
      :config
      (setq org-download-method 'directory)
      (setq-default org-download-image-dir
                    (expand-file-name  "~/Wally/Journal/Figure/.org-download"))
      (setq org-download-timestamp "_%Y-%m-%d_%H:%M:%S")
      )
    )

  (use-package org-download
    :init
    (defun m/org-download-annotate-default (link) ; Insert image with fixed width
      "Annotate LINK with the time of download."
      (format "#+attr_html: :width 300px"))
    (setq org-download-method 'attach
          org-download-screenshot-method "escrotum -s %s"
          org-download-annotate-function 'm/org-download-annotate-default)
    :bind
    (:map
     org-mode-map
     ("M-<print>" . org-download-screenshot)
     )
    )

  (with-eval-after-load 'org
    (require 'org-crypt)
    ;; (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance (quote ("crypt")))
    ;; GPG key to use for encryption
    ;; Either the Key ID or set to nil to use symmetric encryption.
    (setq org-crypt-key nil)
    (setq org-crypt-disable-auto-save nil)
    )


#+END_SRC
* org-mode 
用于配置 org-mode 相关的一些设置.
** org-mode
#+name: init-org
#+begin_src elisp
  (use-package org
    :mode (("\\.org$" . org-mode))
    :ensure org-plus-contrib
    :config
    (progn
      (setq org-directory  "~/Notes")
      (setq org-default-notes-file (concat org-directory "/life.note"))
      (add-to-list 'auto-mode-alist '("\\.note$" . org-mode))
      (add-to-list 'auto-mode-alist '("NOTE" . org-mode))
      (setq org-blank-before-new-entry nil)

      ;; open link in new frame
      (setq org-link-frame-setup
            (quote
             ((vm . vm-visit-folder-other-frame)
              (vm-imap . vm-visit-imap-folder-other-frame)
              (gnus . org-gnus-no-new-news)
              (file . find-file-other-frame)
              (wl . wl-other-frame))))
      )
    )
#+end_src
** org-agenda
*** init-org-agenda
用use-package来自动化处理

#+name: init-org-agenda
#+BEGIN_SRC elisp
  (use-package org-agenda
    :ensure org-plus-contrib
    :config
    (progn
      <<config-org-agenda>>
      )
    )

  ;; auto export agenda
  (defun gwp/run-agenda-store ()
    ""
    (message "Exporting agenda... ")
    (org-batch-store-agenda-views)
    (message "Agenda exported."))

  ;; export agenda if I am away for 2 minutes
  (run-with-idle-timer 600 t 'gwp/run-agenda-store)

#+END_SRC
*** config-org-agenda
#+name: config-org-agenda
#+BEGIN_SRC elisp
  ;; 2013-01-20: less is more
  ;; (setq org-agenda-files (append (file-expand-wildcards "~/Notes/*.note") (file-expand-wildcards "~/Notes/*/*.note")))
  (setq org-agenda-files "~/Notes/.agenda_files")

  (setq org-agenda-include-diary t)
  (setq org-agenda-span (quote month))

  ;; the default is todo-start
  (setq org-icalendar-use-scheduled (quote (event-if-not-todo event-if-todo todo-start)))
  (setq org-icalendar-alarm-time 5)

  (setq org-agenda-custom-commands
        '(("a" agenda "" nil ("~/Notes/org-cal.ics"))
          ("g" . "GTD contexts") ; description for "g" prefix
          )
        )

  (add-to-list 'org-agenda-custom-commands
               '("gr" "Reading"
                 ((tags-todo "Reading|Read"
                             (
                              (org-agenda-overriding-header "待读列表\n------------------")
                              (org-agenda-sorting-strategy '(category-keep priority-down))
                              (org-agenda-remove-tags t)
                              (org-agenda-compact-blocks t)
                              )
                             )
                  (tags "REFILE"
                        (
                         (org-agenda-overriding-header "Tasks to Refile\n------------------")
                         (org-tags-match-list-sublevels nil)
                         )
                        )
                  )
                 ((org-agenda-compact-blocks t))
                 )
               )

  (add-to-list 'org-agenda-custom-commands
               '("gt" "Tasks"
                 ((tags "ASAP+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "ASAP\n------------------")
                         (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                         (org-agenda-max-entries 3)
                         )
                        )

                  (tags "Project+Action+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "Project\n------------------")
                         (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                         )
                        )
                  (tags "Action+Study+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "Topics\n------------------")
                         (org-agenda-files '("~/Notes/research.note"))
                         (org-agenda-sorting-strategy '(priority-down timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )

                  (tags "Action+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "生活琐事\n------------------")
                         (org-agenda-files '("~/Notes/life.note"))
                         (org-agenda-sorting-strategy '(priority-down timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )

                  (tags "Computer+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "电脑调优\n------------------")
                         (org-agenda-sorting-strategy '(priority-down timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )
                  )
                 ;; options set here apply to the entire block
                 (
                  (org-tags-match-list-sublevels nil)
                  (org-agenda-prefix-format "%-20c ")
                  (org-agenda-todo-keyword-format "")
                  (org-agenda-remove-tags t)
                  (org-agenda-compact-blocks t)
                  )
                 )
               )

  ;; Show all future entries for repeating tasks
  (setq org-agenda-repeating-timestamp-show-all t)
  ;; do not show agenda dates if they are empty
  (setq org-agenda-show-all-dates nil)

  ;; Sorting order for tasks on the agenda
  (setq org-agenda-sorting-strategy
        (quote ((agenda time-up priority-down category-up)
                (todo priority-down)
                (tags priority-down))))

  ;; Start the weekly agenda today
  (setq org-agenda-start-on-weekday nil)
  ;; do not include todo items
  (setq org-agenda-include-all-todo nil)

#+END_SRC
** GPG 加密
#+name: init-org-crypt
#+begin_src elisp
  (require 'epa-file)
  (epa-file-enable)
  (require 'org-crypt)

  ;; Encrypt all entries before saving
  (org-crypt-use-before-save-magic)
  (setq org-crypt-tag-matcher "crypt")
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  ; GPG key to use for encryption
  (setq org-crypt-key "38D95BC6411A87E7") ; ybyygu@gmail.com
  (setq org-crypt-disable-auto-save nil)
#+end_src

下面的用不到了. 因为是内置包.
#+begin_src emacs-lisp
  (use-package epa-file
               :config
               (epa-file-enable)
               )

  (use-package org-crypt
               :after org
               :demand t
               :config
               (progn
                 <<config-org-crypt>>
                 )
               )
#+end_src

* spacemacs
gwp layer
** layers.el
这里添加我想要的layers. 这要.spacemacs文件的修改需要就很少了.
[2016-10-16 Sun] 行不通?
#+begin_src elisp
  ;;; layers.el --- Spacemacs Layer layers File
  ;;
  ;; Copyright (c) 2012-2016 Sylvain Benner & Contributors
  ;;
  ;; Author: Sylvain Benner <sylvain.benner@gmail.com>
  ;; URL: https://github.com/syl20bnr/spacemacs
  ;;
  ;; This file is not part of GNU Emacs.
  ;;
  ;;; License: GPLv3

  dotspacemacs-configuration-layers '(
                                      auto-completion
                                      better-defaults
                                      git
                                      org
                                      python
                                      )
#+end_src
** packages.el
通过packages.el接口, 可以将自己的一些设置与spacemacs融为一体.

#+header: :noweb yes
#+header: :tangle ~/.spacemacs.d/layers/gwp/packages.el
#+BEGIN_SRC elisp
  ;;; packages.el --- gwp layer packages file for Spacemacs.

  ;;; Commentary:

  ;; Briefly, each package to be installed or configured by this layer should be
  ;; added to `gwp-packages'. Then, for each package PACKAGE:
  ;;
  ;; - If PACKAGE is not referenced by any other Spacemacs layer, define a
  ;;   function `gwp/init-PACKAGE' to load and initialize the package.

  ;; - Otherwise, PACKAGE is already referenced by another Spacemacs layer, so
  ;;   define the functions `gwp/pre-init-PACKAGE' and/or
  ;;   `gwp/post-init-PACKAGE' to customize the package as it is loaded.

  ;;; Code:

  (defconst gwp-packages
    '(
      (org :location built-in)
      chinese-fonts-setup
      )

    "The list of Lisp packages required by the gwp layer.")

  (defun gwp/init-chinese-fonts-setup ()
    <<init-ui>>
    )

  (defun gwp/post-init-org ()
    (with-eval-after-load 'org
      (progn
        <<init-org>>
        <<init-org-agenda>>
        <<init-org-crypt>>
        )
      )
    )

  ;;; packages.el ends here

#+END_SRC
** config.el
这里添加gwp layer本身需要的配置. 暂时没有必要.
* Local variables
# Local Variables:
# time-stamp-format: "%:y-%02m-%02d %02H:%02M"
# time-stamp-pattern: "100/Updated: %%$"
# End:
