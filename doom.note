#+TITLE: Private config based on doom-emacs
#+SETUPFILE: ~/Notes/common.org

历史设置
- [[file:~/Install/configs/spacemacs/config.note][spacemacs]]
- [[file:~/Install/configs/spacemacs/ybyygu.org][emacs24-starter-kit]]

* 配置参考
- [[https://github.com/hlissner/doom-emacs][doom-emacs: An Emacs configuration for the stubborn martian vimmer]]
  - [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org][doom-emacs/faq.org]]
  - [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org][doom-emacs/getting_started.org]]
  - [[https://github.com/hlissner/doom-emacs/blob/develop/docs/modules.org][doom-emacs/modules.org at develop]]
- https://github.com/gilbertw1/bmacs/blob/master/bmacs.org
- [[https://noelwelsh.com/posts/2019-01-10-doom-emacs.html][Noel Welsh: Doom Emacs Workflows]]
- https://github.com/utrack/dotfiles/tree/master/doomemacs/.doom.d
- [[https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.org][help/Org-Mode_Fundamentals.org at master · grettke/help]]
- [[https://develop.spacemacs.org/layers/+emacs/org/README.html][Org layer]]
- 编码参考: [[https://github.com/bbatsov/emacs-lisp-style-guide][bbatsov/emacs-lisp-style-guide: A community-driven Emacs Lisp style guide]]

* Memo [21/28]
** DONE [2020-04-27 Mon] 好像org响应有些慢了
- State "DONE"       from "TODO"       [2020-05-06 Wed 14:03]
- [[https://github.com/hlissner/doom-emacs/issues/1301][Hang when scrolling with mouse · Issue #1301 · hlissner/doom-emacs]]
- [[https://github.com/hlissner/doom-emacs/issues/2217][[BUG] Slow scrolling/cursor movement on macOS with large window · Issue #2217 · hlissner/doom-emacs]]

[2020-04-28 Tue] 初步怀疑是doom修改org中的Link或其它fontify导致的.
[2020-04-29 Wed] 确定material theme是最大的元凶

** [2020-04-24 Fri] 解决hack modules中autoloads代码无法加载的问题
需要修改autoloads中首行的路径, 同时不能使用软链接
: -;;; lang/org/autoload/org-link.el -*- lexical-binding: t; -*-
: +;;; ~/.doom.d/modules/gwp/org/autoload/org-link.el -*- lexical-binding: t; -*-

** TODO [2020-03-22 Sun] workspace保存时经常出错的问题
无法确定问题的根源, 有时成功, 有时失败. 成功案例:
- Cu-u SPC-l-s, 失败后再用SPC-l-s

** TODO [2020-03-20 Fri] org中narrow功能                                  :Idea:
org中进行Literate porgramming时, 如果source blocks太多, 会严重影响性能, 这时很有
必要配合narrow来进行view或tangle.

org-tree-to-indirect-buffer 比 org-narrow-to-subtree更好用, 前者不会影响全局
buffer, 可以同时浏览多个narrowed subtree, 互不影响.
- 多次使用 org-tree-to-indirect-buffer时切换narrow和widden状态.
- 使用C-u调用时, 可以同时开多个narrow buffer.

** TODO [2020-03-13 Fri] smartparens学习
- [[https://ebzzry.io/en/emacs-pairs/][Emacs and Pairs]]
- [[https://gist.github.com/pvik/8eb5755cc34da0226e3fc23a320a3c95][A Cheatsheet for Emacs Smarparens example configuration]]

| sp-kill-sexp | 删除光标附近符号对内容 |

** TODO [2020-03-13 Fri] vterm-toggle [[https://github.com/jixiuf/vterm-toggle][jixiuf/vterm-toggle: toggles between the vterm buffer and whatever buffer you are editing.]]
这个可以自定义的地方更多.

** TODO [2020-03-01 Sun] doom evil学习
- [ ] 这个和regex-align有点像 https://github.com/edkolev/evil-lion
- [ ] [[https://noelwelsh.com/posts/2019-01-10-doom-emacs.html][Noel Welsh: Doom Emacs Workflows]]
- [ ] [[https://github.com/hlissner/doom-emacs/blob/develop/modules/editor/evil/README.org][doom-emacs/README.org at develop · hlissner/doom-emacs]]
- [ ] 位置跳转: better-jumper-jump-backward. 先按ctrl-o, 跳回之前的位置, 按TAB返回.
- [ ] [[https://github.com/hlissner/evil-multiedit][hlissner/evil-multiedit: Multiple cursors for evil-mode, based on iedit]]
- [ ] [[https://github.com/gabesoft/evil-mc][gabesoft/evil-mc: Multiple cursors implementation for evil-mode]]
- [ ] indent-rigidly: C-x TAB, 可以很方便地向左或向右移动选中文本.
- [X] expand region: 可以用vi部分代替 [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#why-do-non-evil-users-get-expand-region-but-not-evil-users][URL]]
- [X] 各种注释相关操作: [[https://github.com/redguardtoo/evil-nerd-commenter][redguardtoo/evil-nerd-commenter: Comment/uncomment lines efficiently. Like Nerd Commenter in Vim]]
- [X] gd: 跳转到函数定义位置. 并不总是灵光.
- Ctrl-h b: 显示所有按键 which-key-show-keymap Ctrl-h b m

** DONE [2020-03-06 Fri] 使用 custom-set-faces!来修改theme
- State "DONE"       from "TODO"       [2020-04-25 Sat 09:07]
#+begin_src elisp :tangle no
  (load-theme 'material t)
  ;; (load-theme 'doom-one-light t)
  (custom-set-faces!
    '(org-todo :foreground "yellow" :weight bold :background "#263238")
    '(org-done :foreground "yellow" :weight bold :background "#263238")
    '(org-table :foreground "#e3f2fd")
    '(org-level1 :foreground "#e3f2fd")
    '(org-headline-done :foreground "gray")
    )
#+end_src

** DONE [2020-03-01 Sun] 各种emacs distribution
- State "DONE"       from "TODO"       [2020-04-25 Sat 09:07]
- [[https://github.com/emacs-tw/awesome-emacs][emacs-tw/awesome-emacs: A community driven list of useful Emacs packages, libraries and others.]]

** DONE [2020-04-20 Mon] 新建frame时最大化窗口
- State "DONE"       from "TODO"       [2020-04-25 Sat 08:53]
[[https://emacs.stackexchange.com/questions/2999/how-to-maximize-my-emacs-frame-on-start-up][How to maximize my Emacs frame on start-up? - Emacs Stack Exchange]]

: (add-to-list 'default-frame-alist '(fullscreen . maximized))

** DONE [2020-04-03 Fri] 试用 org-sidebar
- State "DONE"       from "TODO"       [2020-04-07 Tue 20:01]
- [[https://www.reddit.com/r/orgmode/comments/dbsngi/finally_solving_the_lack_of_a_treeview_navigation/][Finally solving the lack of a tree-view navigation window in Org : orgmode]]

用法:
- 打开 org-sidebar-tree-mode, SPC-m-s-t
- 切换narrow, SPC-m-Enter

** DONE [2020-03-24 Tue] 可以用[[https://github.com/raxod502/el-patch][el-patch]]来hack代码

- State "DONE"       from "TODO"       [2020-04-20 Mon 09:28]
https://org-roam.readthedocs.io/en/latest/ecosystem/
#+BEGIN_SRC elisp :tangle no
  (use-package deft
    ;; same as above...
    :config/el-patch
    (defun deft-parse-title (file contents)
      "Parse the given FILE and CONTENTS and determine the title.
  If `deft-use-filename-as-title' is nil, the title is taken to
  be the first non-empty line of the FILE.  Else the base name of the FILE is
  used as title."
      (el-patch-swap (if deft-use-filename-as-title
                         (deft-base-filename file)
                       (let ((begin (string-match "^.+$" contents)))
                         (if begin
                             (funcall deft-parse-title-function
                                      (substring contents begin (match-end 0))))))
                     (org-roam--get-title-or-slug file))))
#+END_SRC

** DONE [2020-02-29 Sat] 改进literate rust编程体验
- State "DONE"       from "TODO"       [2020-03-21 Sat 20:00]
- [X] rust中"{|}" 中回车行为. 原来是spacemacs中有特别配置. [[https://emacs.stackexchange.com/questions/2837/automatically-formatting-brackets][stackexchange]]
- [X] Tab键自动使用yas展开代码. 禁用init.el中snippets.
- [X] 还原在normal/insert state下, Ctrl-k的行为: org-kill-line
- [X] rustic新加的功能虽多, 但用处都不大. 还是用rust-mode好了.
- [X] org-edit-src-exit: 不能定义为Ctrl-C Ctrl-C, 因为org-src里的主模式很多会用到这个键.
- [X] 全局禁有flyspell-mode
- [X] ctrl-d又不管用了, alt-l
- [X] evil-org: 在source code中的enter行为. 改为进入代码.
- [X] magit响应慢
- [X] use structopt::*中, 输出*会出现两个, 按/会出现两个.
- [X] visual state下Tab键应该indent代码

** DONE [2020-02-28 Fri] 太多需要修改的地方了, 只能一点点改进, 慢慢搭
- State "DONE"       from "TODO"       [2020-03-21 Sat 20:00]
- [X] 去掉dired中图标显示及其它多余功能, 简单稳定就好
- [X] org-capture功能
- [X] odt exports功能
- [X] zotero links
- [X] 添加re-open当前文件功能? [[https://emacs.stackexchange.com/questions/3330/how-to-reopen-just-killed-buffer-like-c-s-t-in-firefox-browser][URL]]
- [X] dired-copy-filename-as-kill 复制文件路径, 可以 spc-m y
- [X] 将spc-o-T改成和spacemacs一样. vterm也就是图方便, 功能上还是不如gnome-terminal之类顺手.
- [X] [[https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/window-select/README.org][window-select]] 可以用C-w C-w, 比spacemacs下更方便.
- [X] 看来还是得用evil-org. 比如dd命令在hide状态下应该为 delete subtree
- [X] o: evil-org-open-below +org/insert-item-below, 可以用ctrl-enter, ctrl-shift-enter
- [X] (spacemacs/open-file-or-directory-in-external-app ARG)
- [X] insert-mode下 Ctrl-h 应为help
- [X] insert-mode: ctrl-d evil-shift-left
- [X] SPC-c l, comment line
- [X] 检查单词: z=, flyspell-correct-at-point (启用spell module即可)
- [X] flyspell错字提示 (可以手动关掉, flyspell-mode, SPC-t s)
- [X] insert-mode下 Ctrl-y 键应为粘贴
- [X] org-metaright, org-demote-subtree
- [X] helm-resume => SPC r l
- [X] deadgrep notes

** DONE [2020-03-14 Sat] 中文字体设置 [[https://emacs-china.org/t/doom-modeline-2-1-0/9251/13][URL]]
- State "DONE"       from "TODO"       [2020-03-15 Sun 09:45]
可以去掉cnfonts, 直接中英文分开设置, 解决modeline显示异常的问题.

** DONE [2020-03-10 Tue] 启用format模块
- State "DONE"       from "TODO"       [2020-03-10 Tue 21:16]
- [[https://github.com/lassik/emacs-format-all-the-code][lassik/emacs-format-all-the-code]]

需要的工具:
- Shell script (shfmt)
- Python (black)
- Rust (rustfmt)

对于快捷键 SPC-c-f

** DONE [2020-03-05 Thu] 截图新方式: org-capture + org-download? :ATTACH:
:PROPERTIES:
:ID:       e0591a18-e431-46bc-a5b5-568eeee5c567
:END:
- State "DONE"       from "TODO"       [2020-03-06 Fri 14:29]
使用xclip将clipboard中的image另存为文件, 然后再调org-download截图.

#+DOWNLOADED: screenshot @ 2020-03-06 16:07:53
#+caption: 截图留念
#+name: fig:feaf75a4
#+attr_org: :width 500
#+attr_odt: :width 10
[[attachment:2020-03-06_16-07-53_screenshot.png]]

- 参考: [[https://emacs.stackexchange.com/questions/41016/how-can-i-yank-images-from-emacs][osx - How can I yank images from Emacs? - Emacs Stack Exchange]]
- [2020-03-06 Fri] org-download-delete有问题, 不能用了.
- 使用下面的脚本, 从X11 clipboard复制截图, 这样避免了截图时emacs窗口如何最小化的
  问题. [2020-03-06 Fri] 不太好用, 用rust重写了.
  #+begin_src shell :tangle no
    set -e
    if [ "x$1" = "x" ]; then
        echo "Usage: [options] $0 file..." >&2
        exit 1
    fi

    xclip -selection clipboard -t image/png -o > "$1"

    # remove zero sized file
    [ ! -s "$1" ] && rm "$1"
  #+end_src

** DONE [2020-03-02 Mon] 完成ripgrep搜索notes功能
CLOSED: [2020-03-02 Mon 14:49]
- State "DONE"       from              [2020-03-02 Mon 14:49]
需要修改ripgrep配置, 使之能follow symlinks. [[https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#configuration-file][ripgrep/GUIDE.md at master · BurntSushi/ripgrep]]

相关文件:
: ~/.ripgreprc
: ~/.zshrc

** DONE [2020-03-01 Sun] 关于ispell的问题
CLOSED: [2020-03-01 Sun 19:35]
- State "DONE"       from "TODO"       [2020-03-01 Sun 19:35]
以前常用 ispell-word 来查词, 现在发现得开启ispell-mode后才正常, 不然会报错.

** DONE [2020-02-28 Fri] 解决org-mode中怪异的Tab键行为问题
CLOSED: [2020-02-28 Fri 15:42]
- State "DONE"       from "TODO"       [2020-02-28 Fri 15:42]
- [[https://github.com/hlissner/doom-emacs/issues/1897][[BUG] org-mode TAB key mapped to different command when emacs running as daemon · Issue #1897 · hlissner/doom-emacs]]

去掉:config中的 +bindings 开关正常了.

** DONE [2020-02-28 Fri] 可用的theme
CLOSED: [2020-02-29 Sat 18:12]
- State "DONE"       from "TODO"       [2020-02-29 Sat 18:12]
[[*theme][theme]]
: doom-acario-light
: doom-material
: doom-moonlight
: doom-nord-light x
: doom-nord
: doom-oceanic-next
: doom-one-light x
: doom-opera-light x
: doom-palenight
: doom-peacock x
: doom-snazzy
: doom-tomorrow-day x
: doom-vibrant

** DONE [2020-02-27 Thu] 解决 org-mode 插入时间戳快捷键被占用的问题
CLOSED: [2020-02-28 Fri 15:42]
- State "DONE"       from "TODO"       [2020-02-28 Fri 15:42]
: C-c ! (org-time-stamp-inactive)

禁用:checkers组中的modules即可.

** DONE [2020-02-27 Thu] doom尝鲜
- State "DONE"       from "TODO"       [2020-04-07 Tue 20:02]
doom的优点:
1. 较spacemacs轻量, 启动快, 架构简单, 后续易维护
2. 和spacemacs使用类似的key-bindings
3. 社区质量高, 作者维护热情高

修改配置时注意:
1. 不要使用emacs中内置的custom机制
2. 不用使用use-package中的包安装机制(:ensure)
3. 不要使用org-babel中的rg-babel-do-load-languages机制

- config中的flags: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#flags][doom-emacs/getting_started.org at develop · hlissner/doom-emacs]]
- doom api: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#map][doom-emacs/api.org at develop · hlissner/doom-emacs]]

https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/rest/README.org

https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/zen/README.org

https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/workspaces/README.org

https://github.com/hlissner/doom-emacs/issues/2483

doom clean && doom sync && doom build

https://github.com/emacs-tw/awesome-emacs

git clone https://code.orgmode.org/bzg/org-mode.git

doom要clone很多github上的repo, 很容易被RESET, 导致安装失败.

git使用v2ray proxy
https://gist.github.com/evantoli/f8c23a37eb3558ab8765

https://segmentfault.com/q/1010000000118837

** [2018-08-22 Wed] 禁用自动为babel source block生成name的功能.
用处不大.

** [2018-06-01 Fri] 解决expand-region在org-mode buffer中的问题
使用扩选功能时, expand-region会自动展开显示之前隐藏outline中的内容, 导致显示内容跳转.

解决方案:
- 修改expand-region.el, 删除掉 "(eval-after-load 'org)" 相关内容

** TODO [2018-01-24 Wed] 修复org-capture, org-protocol中的几个bug
- [ ] 在org-capture中, 如果abort会删掉refile.org最开头条目的星号.
- [X] firefox中, org-protocol在某些网页中无法激活. 是firefox中的"content security policy"导的鬼. 在config里禁用即可. "security.csp.enable"

** DONE [2018-01-06 Sat] 解决odt导出latex公式分辨率太低的问题
CLOSED: [2018-01-10 Wed 16:18]
- State "DONE"       from "TODO"       [2018-01-10 Wed 16:18] \\
  odt使用dvipng导出公式时生成的图片分辨率太低, 这里放大3倍, 然后通过设置odt dpi为
  300(默认为96), 将image缩小为原始大小.

** [2017-12-12 Tue] 修改org-download设置, 调整odt导出参数
自定义org-download-annotate-function
- 自动添加图片的 ~name~ ~caption~, 方便odt导出时图片自动编号及交叉引用.
- 自动添加 ~#+attr_org~ 属性, 设置org预览图片的大小
- 自动添加 ~#+attr_odt~ 属性, 设置odt导出时的图片大小

References
- [[http://kitchingroup.cheme.cmu.edu/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them/][Drag images and files onto org-mode and insert a link to them]]

** [2017-11-19 Sun] 添加新功能, 在buffer或dired当前目录中打开gnome-terminal
按键: ~SPC o T~

** TODO [2017-11-13 Mon] 完善org-to-read 实现类似zotfile的功能
[2017-11-17 Fri] 类似没太大必要. 有更流畅的方式?

- 自动将当前headline下的附件放至某个READ目录
- 手机上阅读并注释, 并同步回修改.
- 切回DONE状态时从READ目录里取回修改后的版本, 并导出pdf注释.

References
- [[https://github.com/machc/pdf-tools-org][machc/pdf-tools-org: pdf-tools and org-mode integration]]
- [[http://tech.memoryimprintstudio.com/pdf-annotation-related-tools/][PDF Annotation Related Tools – Emacs, Arduino, Raspberry Pi, Linux and Programming etc]]
- [[http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/][View and annotate PDFs in Emacs with PDF-tools | Pragmatic Emacs]]
- [[https://matt.hackinghistory.ca/2015/11/11/note-taking-with-pdf-tools/][Note Taking with PDF Tools | Thoughts on Code & History]]
- [[https://github.com/politza/pdf-tools/issues/134][extract annotations? · Issue #134 · politza/pdf-tools]]
- [[https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/][Help me with my org-mode workflow for note-taking? : emacs]]

** DONE [2017-11-10 Fri] 进一步改进org-attach功能 方便移动不同的outline及其attachments
CLOSED: [2017-11-10 Fri 20:37]
- State "DONE"       from "TODO"       [2017-11-10 Fri 20:37]

操作流程
- 存储当前entry的附件内容: gwp/org-attach-store
- 将当前enetry文本移动到新的文件中
- 将之前存储的附件内容移回到新的attachment目录中来: gwp/org-attach-move

此外:
修改了变量 org-attach-store-link-p, 这样可以方便的生成指向data目录的文件链接.

** DONE [2017-11-10 Fri] 修改tangle函数, 能更方便的tangle代码
- State "DONE"       from "TODO"       [2020-04-07 Tue 20:03]
将gwp/org-babel-tangle-dwim绑定到 ~SPC o b~
- 使用 ~Ctrl-c '~ 进入代码窗口
- 修改代码后, 按 ~SPC o b~
- 该函数自动保存代码, 并tangle对应文件

** DONE [2017-10-27 Fri] 完善org-protocol和org-capture             :Starred:
CLOSED: [2017-11-01 Wed 10:34]

- 进一步完善js代码
- 进一步优化bookmarklet, 方便在firefox中使用 [2018-01-24 Wed 21:02]
- State "DONE"       from "TODO"       [2017-11-01 Wed 10:34]

*** store-link
版本1: 使用selection或URL做为description
#+BEGIN_SRC javascript
  javascript:
  var title = window.getSelection();
  if (title == '') {
      title = 'URL';
  }

  location.href = 'org-protocol:///store-link?url=' + encodeURIComponent(location.href) + '&title=' + encodeURIComponent(title);
#+END_SRC

版本2: 使用selection或document title做为description. 如果没有, 默认为URL.
#+BEGIN_SRC javascript
  javascript:
  var title = window.getSelection();
  if (title == '') {
      title = document.title;
      if (title == '') {
          title = 'URL';
      }
  }

  location.href = 'org-protocol:///store-link?url=' + encodeURIComponent(location.href) + '&title=' + encodeURIComponent(title);
#+END_SRC

*** capture
使用'n'模板: 插入当前页面的链接, 使用页面标题或URL做为链接描述. 引用选中文字.

#+name: 12d167c2-43c7-4f54-9a27-2b55432d113d
#+BEGIN_SRC javascript
  javascript:
  var title = document.title;
  if (title == '') {
      title = 'URL';
  }

  location.href = 'org-protocol:///capture?template=n' + '&url=' + encodeURIComponent(location.href) + '&title=' + encodeURIComponent(title) + "&body=" + encodeURIComponent(window.getSelection());
#+END_SRC

*** References
原理
- org-capture.el
- https://github.com/alphapapa/org-protocol-capture-html
- org capture extensions: https://github.com/sprig/org-capture-extension
- [[http://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol.el – Intercept calls from emacsclient to trigger custom actions]] (outdated)
工具
- [[https://mrcoles.com/bookmarklet/][Bookmarklet Creator with Script Includer - Peter Coles]]
- [[http://jsbeautifier.org/][Online JavaScript beautifier]]

** [2017-10-06 Fri] 解决org-mode加载大文件太慢的问题
- [2017-10-07 Sat] 发现是hl-todo这个包导致的问题. 禁用该包即可.
- [2017-10-06 Fri] 使用spacemacs-base distrubtion即可.
** [2016-12-10 Sat] 禁用选中的文字进入clipboard的功能 [[https://github.com/syl20bnr/spacemacs/blob/master/doc/FAQ.org#prevent-the-visual-selection-overriding-my-system-clipboard][URL]]
: ;; Prevent the visual selection overriding my system clipboard
: (fset 'evil-visual-update-x-selection 'ignore)

** [2016-12-10 Sat] 修改spacemacs中默认的undo行为 默认的undo太变态了
: (setq evil-want-fine-undo t)

** [2016-10-14 Fri] emacs24-starter-kit 更新维护不是很活跃. 现在已是 emacs25 时代了. 考虑换到 spacemacs


* Tips
~SPC h d~
** Universal arguments
SPC-u, C-u
** org-mode
| org-kill-note-or-show-branches | C-c C-k | 查看headlines, 当前上下文TAB键无效时有用   |

** 自动补全
- [[https://github.com/hlissner/doom-emacs/blob/develop/modules/completion/company/README.org][doom-emacs/README.org at develop · hlissner/doom-emacs]]

| C-x C-f | 补全文件名, 类vim |
| C-x s   | 补全 yasnippet    |

** 查看buffer major mode
eval: major-mode

** 各种跳转
| g;              | last-change            |
| SPC-s-i         | imenu symbol           |
| Alt-mouse-wheel | jump backward/foraward |

** 编辑功能
选中文字后按S, 再按"(" 可在选中字符前后加括号.

** magit
- 在magit status窗口, 可以直接使用dired访问文件: magit-dired-jump (C-M-i)
- 使用yadm管理dotfiles, SPC-g-.

** dired-jump
| SPC-f-j |

** org-edit-special
| C-c '   | hard to press |
| SPC-m ; |               |

** window/frame
- 最大化或还原当前窗口: Ctrl-w mm 或SPC-w mm: Maximize / restore the current buffer
- SPC-w o, 最大化popup
- 新开frame, SPC-o-f, make-frame
- zoom: 可以自动放大当前的 window 区域: SPC w z

| ~SPC w v~ | vertical split |
| ~SPC w d~ | remove window  |
| ~SPC w r~ | swap windows   |
| ~SPC w f~ | follow mode    |

** 调试emacs
真好用.
: debug-on-error

在doom里可以用 SPC-h-d-d

也可启用profiler, SPC-h-d-t, 查看命令调用堆栈

** 书签管理
: SPC-f-b

#+BEGIN_SRC emacs-lisp :tangle no
  (counsel-bookmark)
#+END_SRC

** multiple-cursors
按Alt-D高亮word, 逐步选中多个可编辑单元. 按ESC退出.

** 删除空格
- just-one-space 默认绑定为 ~Ｍ-SPC~

** 切换只读模式
: C-x C-q
: SPC-t r

** magit
| magit-status          |                             |
| magit-stage-file      |                             |
| magit-log-buffer-file | Show log for current buffer |

: reset: O
: discard: x

** Movement
| Key Binding | Description                            |
|-------------+----------------------------------------|
| ~g h~       | Move up one level in headings          |
| ~g j~       | Move to next heading on same level     |
| ~g k~       | Move to previous heading on same level |
| ~g l~       | Move down one level in headings        |

** 粘贴替换选中文字
vi模式下使用P命令.

** 使用外部程序打开文件的方式
emacs 默认使用 docview mode 来打开链接的文件, 比如 PDF 等, 不太方便. 操作步骤:
1. dired-jump (SPC fj): 使用 dired 打开当前文件所在目录
2. 在 dired 界面上选择某个文件, 使用 external 程序打开 (SPC fo).
3. 也可以在 dired 界面上用"!"或"&"命令, 指定任意程序打开.

** 打开buffer文件所在目录
~SPC-u SPC-f-o~

* TODO Literate Programming in Rust
- 使用 "Ctrl-c Ctrl-d" 可以自动添加或删除dbg!
- 使用 "Ctrl-c Ctrl-f" rustfmt格式化buffer
- 以上按键在org代码块中也可直接执行, org-babel-do-key-sequence-in-edit-buffer

* TODO Research Writing Workflow
** 基本流程
- 使用org-mode来完成文字, 图片, 表格, 公式等内容.
- 导出为odt格式.
- 使用[[http://zotero-odf-scan.github.io/zotero-odf-scan/][RTF/ODF-Scan for Zotero]] 来格式化zotero引用.
  - [2018-01-05 Fri] 已自定义export函数, 不必使用odf-scan, odt导出一步到位.
- 在Libreoffice中进行必要的修改.
- 输出PDF和或doc.

** org odt export
- odt导出功能非常强大, 对于普通用户, odt无疑比latex的易用性和可定制性更强.
- 可以在org buffer里指定odt模板文件. 使用odt而不是ott格式会更方便一些, 因为打开
  ott时没有具体的内容可参照修改结果.
- 码公式的时候, 使用"begin{equation*}"block, odt会自动编号. 不能设置scale, width
  等图片属性.

References
- [[https://github.com/emacsmirror/org/blob/master/lisp/ox-odt.el][org/ox-odt.el at master · emacsmirror/org]]
- [[https://orgmode.org/manual/OpenDocument-Text-export.html][The Org Manual: OpenDocument Text export]]

** RTF/ODF-scan插件
这个插件可以将纯文本的引文标记, 格式化为zotero word processor可处理的zotero引文.
此外, 这个扩展还可以反向的将zotero word processor处理后的引文转换成纯文件标记.

从官网下载扩展后, 在zotero standalone的addone窗口安装.

1. 在zotero中设置好quick copy的输出格式为 "scannable cite".
2. 在zotero中选择目标条目, 将其拖入org-mode当即可.
3. 通过修改config选项(ODFScan.useZoteroSelect), odfscan marker字段中的最后一项也
   可以为zotero链接. 但在格式化时不能正常生成odt文件, 这可能是一个bug.

* TODO Research Literature Management Workflow
将annotation.note放到zotero内置库里的优点和问题:
- 优点: 以zotero为中心进行数据管理. 从文献到笔记很方便.
- 优点: note和pdf路径相对稳定, 不用担心更换系统后文件路径变化导致的问题.
- 优点: 方便实现类似roam等工具类似的功能.
- 问题: 不能方便地在zotero界面里进行搜索 (需要fulltext index) (但可以用自编工具
  notesearch来处理, 不过需要定期更新cache)

workflow
- 将pdf文件关联到emacs, 使用pdf-tools打开(pdf-view-mode)
- 进入org-noter界面(SPC-n-n), 按提示将 annotation.note放到PDF所在目录
- 使用org-noter插入笔记

** 使用org-noter批注
[2020-01-01 Wed] org-noter比interleave功能更强.

流程:
- 在zotero界面, 选中待批注的PDF, "copy attachment path"
- 在普通的org文件中将zotero中的PDF列为附件.
- 打开org-noter批注该附件.

优点:
- Note和PDF直接关联, 不需要写任何代码. 方便易用.
- 原始zotero数据库中的为父本, 不同Note中的批注的有不同的副本.
- 不需要更新.cache/notes列表.

** 使用interleave批注流程
- 在zotero界面, 选中待批注的PDF, "copy attachment path"
- 打开org-capture, 使用interleave模板, 生成~/annotation.note
- 在zotero界面, 使用zotfile的 "Attach New File"功能, 自动将annotation.note加入附
  件. (注意需要修改设置, 将note列入zotfile可管理的文件类型)
- 在zotero界面, 双击打开附入的note文件, 进入interleave编辑模式.

** References
- [[https://codearsonist.com/reading-for-programmers][Piotr Limanowski: Reading for Programmers]]
- [[https://www.researchgate.net/post/What_reference_manager_is_used_for_Emacs_users][What reference manager is used for Emacs users?]]
- [[http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/][A research workflow with Zotero and Org mode | mkbehr.com]]
- [[https://emacs.stackexchange.com/questions/24725/zotero-workflow-into-emacs][org mode - zotero workflow into emacs? - Emacs Stack Exchange]]

* TODO Literate Programming Workflow
- 在代码窗口编辑时, 使用C-x C-s来保存buffer. 不要使用:w, 这样会多出一份代码的临时文件
- 代码修改后, 使用gwp/org-babel-tangle-block函数来仅tangle当前block对应的代码文
  件. 可以在代码编辑窗口直接使用, 该函数会自动保存代码.
- 使用swoop来实现常规跳转, 使用helm-org-in-buffer-headings实验代码块跳转.
- 重要的tangle参数已在配置文件中做全局设置, 比如: ~padline~ ~mkdirp~ ~comments~

* TODO scripts
** take-screenshot-dwim
[2020-03-08 Sun] 用不上了.
屏幕截图时隐藏当前窗口, 完成后再切回原窗口. 需要安装xdotool工具.
#+header: :tangle no
#+begin_src shell
  [[ $# < 1 ]] && echo "no image path" && exit 0

  # switch to active window
  xdotool keydown alt key Tab; xdotool keyup alt
  # take a screenshot
  deepin-screenshot -n -s "$1" 2>/dev/null
  # switch back
  xdotool keydown alt key Tab; xdotool keyup alt
#+end_src
** start-terminal
gnome-terminal使用client/server架构, 没法在emacs中直接打开, 需要清除几个环境变量.
#+header: :tangle pkg/.local/bin/terminal-dwim.sh :shebang #! /usr/bin/env bash
#+begin_src shell
unset GNOME_TERMINAL_SCREEN
unset GNOME_TERMINAL_SERVICE
gnome-terminal $*
#+end_src

** org-capture
#+header: :tangle pkg/.local/bin/org-capture.sh :shebang #! /usr/bin/env bash
#+header: :mkdirp yes :comments yes :padline yes
#+begin_src shell
  emacsclient -c -F "((fullscreen . maximized))" -e "(org-capture)"
#+end_src

** org-agenda
#+header: :mkdirp yes :comments yes :padline yes
#+header: :shebang #! /usr/bin/env bash
#+begin_src sh :tangle pkg/.local/bin/org-agemnda.sh
  emacsclient -c -F "((fullscreen . maximized))" -e "(org-agenda nil \"a\")" -e "(delete-other-windows)"
#+end_src

** pdf-view
以全屏窗口打开PDF文件
#+header: :shebang #! /usr/bin/env bash
#+begin_src sh :tangle pkg/.local/bin/emacs-pdf.sh
emacs --maximized --file "$*" --eval "(pdf-view-fit-width-to-window)"
#+end_src

** org-read-todo
#+BEGIN_SRC sh
  dir_read_root=~/ToDo/READ/Research
  dir_topic=$(basename "`pwd`")

  dir_read="$dir_read_root"/"$dir_topic"

  mkdir -p "$dir_read"

  cp "$(pwd)/${1#file:}" "$dir_read"/
#+END_SRC

** org-read-done
#+BEGIN_SRC sh
  dir_read_root=~/ToDo/READ/Research
  dir_topic=$(basename "`pwd`")

  dir_read="$dir_read_root"/"$dir_topic"

  path="$dir_read"/$(basename "${1#file:}")

  [[ -f "$path" ]] && rm -f "$path"
#+END_SRC

** emacsclient-open
:PROPERTIES:
:header-args: :tangle pkg/.local/bin/emacsclient-open.py :comments link :padline yes :mkdirp yes :shebang #! /usr/bin/env python
:END:
*** header
#+begin_src python
  # -*- coding: utf-8 -*-
  #==============================================================================#
  #   DESCRIPTION:  open text file with emacsclient and register the it into the
  #                 recently-used-files list (~/.recently-used.xbel)
  #
  #       OPTIONS:  ---
  #  REQUIREMENTS:  ---
  #         NOTES:
  #        AUTHOR:  Wenping Guo (ybyygu)
  #         EMAIL:  winpng@gmail.com
  #       LICENCE:  GPL version 2 or upper
  #       CREATED:  <2010-09-01 Wed 16:04>
  #       UPDATED:  <>
  #==============================================================================#
  #
  # basically, to make emacsclient perfect, there are three things need be done:
  # 1. use parameter "-a ''", that is, use a void alternate-editor to automatically start
  #    emacs daemon
  # 2. open the file without "-n" option to make sure the file buffer will be killed when frame
  #    is closed
  # 3. if the file has been opened, use "-n" option.
#+end_src

*** main
#+begin_src python
  import os
  import sys
  import subprocess

  def check_emacs_client(path):
      """check if the file has been opened by emacsclient"""
      cmdlines = ["/usr/bin/pgrep", "-fa", "emacsclient -c"]
      output = subprocess.Popen(cmdlines,
                                universal_newlines=True,  # output is a str not bytes
                                stdout=subprocess.PIPE).stdout.read()
      print(output)
      if path in output:
          return True
      return False

  if len(sys.argv) == 1:
      print("%s: open file using emacsclient." % (__file__))
      sys.exit(0)

  path = os.path.abspath(sys.argv[1])
  if check_emacs_client(path):
      print("{:} is opened.".format(path))
      args = ["emacsclient", "-n", path]
      subprocess.call(args)
  else:
      args = ["emacsclient", "-c", "-a", "", path]
      subprocess.Popen(args)
#+end_src

** org-archive.py
:PROPERTIES:
:header-args: :tangle pkg/.local/bin/org-archive.py :comments link :padline yes :mkdirp yes :shebang #! /usr/bin/env python2
:END:
*** header
#+begin_src python
# -*- coding: utf-8 -*-
#====================================================================#
#   DESCRIPTION:  create tar.xz archive of org-mode file including
#                 all files under current directory
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#         NOTES:  ---
#        AUTHOR:  Wenping Guo (ybyygu)
#         EMAIL:  winpng@gmail.com
#       LICENCE:  GPL version 2 or upper
#       CREATED:  <2011-11-18 Fri 13:29>
#       UPDATED:  <>
#====================================================================#
#+end_src

*** globals
#+begin_src python
__VERSION__ = '0.1'
__UPDATED__ = '2013-01-16 14:13:56 ybyygu'

import sys
import os
import re
import urllib

rex_file = re.compile(r'.*\[\[file:([^\]]+)\]')
rex_css = re.compile(r'.*href="([^"]+)".*')

#+end_src
*** main
#+begin_src python
def find_linked_files(filename):
    """
    find linked files (image or css style etc) from filename in
    org-mode syntax
    """
    files = []

    with open(filename) as fp:
        for line in fp:
            if rex_file.match(line):
                afile = rex_file.match(line).groups()[0]
                if afile:
                    files.append(afile)
            elif rex_css.match(line):
                afile = rex_css.match(line).groups()[0]
                if afile and not afile.startswith("http"):
                    files.append(afile)

    return files

def make_tar_archive(files, archive_name):
    import tarfile

    tar = tarfile.open(archive_name, mode="w", dereference=True)
    lists = set([])
    for afile in files:
        afile = urllib.unquote(afile)
        if os.path.exists(afile):
            print("included {}".format(afile))
            lists.add(afile)
        else:
            print("{} is not in current directory!".format(afile))
    for afile in lists:
        tar.add(afile)
    tar.close()


def main(argv=None):
    import optparse

    if argv == None: argv = sys.argv

    # parsing cmdline
    cmdl_usage = 'usage: %prog [options]...[queue_id]'
    cmdl_version = "%prog " + __VERSION__
    cmdl_parser = optparse.OptionParser(usage=cmdl_usage, \
                                        version=cmdl_version, \
                                        conflict_handler='resolve')
    cmdl_parser.add_option('-h', '--help',
                           action='help',
                           help='print this help text and exit')
    cmdl_parser.add_option('-v', '--version',
                           action='version',
                           help='print program version and exit')
    # cmdl_parser.add_option('-f', '--file', dest='file',
    #                         help='start from this gjf file')
    # cmdl_parser.add_option('-p', '--pause', dest='pause',
    #                         action="store_true", default=False,
    #                         help='pause running job.')
    (cmdl_opts, cmdl_args) = cmdl_parser.parse_args()

    filename = cmdl_args[0]

    files = find_linked_files(filename)
    files.append(filename)
    make_tar_archive(files, archive_name="{}.tar".format(filename))

if __name__ == '__main__':
    main()
#+end_src

* TODO desktop integration
** emacsclient-open
可用于打开.note和.pdf文件
#+begin_src text :tangle pkg/.local/share/applications/gwp-emacsclient.desktop :mkdirp yes :comments no
[Desktop Entry]
Version=1.0
Name=Emacs Client - GWP
GenericName=Text Editor
Comment=View and edit files
MimeType=application/x-note;application/pdf;text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacsclient %F
TryExec=emacs
Icon=emacs
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
#+end_src

** org-capture
#+begin_src text :tangle pkg/.local/share/applications/gwp-org-capture.desktop :mkdirp yes
[Desktop Entry]
Version=1.0
Name=Org Capture
Comment=Capture using emacs org-mode
Exec=org-capture.sh
TryExec=emacs
Icon=emacs
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
#+end_src

** org-protocol
#+header: :tangle pkg/.local/share/applications/gwp-org-protocol.desktop :comments nil
#+BEGIN_SRC text
[Desktop Entry]
Name=org-protocol
Exec=emacsclient %U
Icon=emacs
Type=Application
Terminal=false
MimeType=x-scheme-handler/org-protocol;
#+END_SRC

** firefox
- 注册 [[*org-protocol][org-protocol]]
- 并用 update-desktop-database, 更新MIME数据库
- 在Firefox中禁用security.csp.enable选项
- 使用bookmarklets来capture网页内容

** install
1. 验证桌面文件. 桌面文件开头的gwp-为vendor.
2. 安装桌面文件.
3. 将python脚本软链接到$HOME/.local/bin目录下. 注意这里的路径要与
   desktop文件所指定的一定.

更新desktop数据库
#+BEGIN_SRC shell
update-desktop-database ~/.local/share/applications/
#+END_SRC

#+begin_src shell :dir ~/.local/share/applications
desktop-file-validate gwp-emacsclient.desktop
desktop-file-validate gwp-org-capture.desktop
xdg-desktop-menu install gwp-emacsclient.desktop
xdg-desktop-menu install gwp-org-capture.desktop
#+end_src


* 配置安装
** stow配置管理思路
- tangle时仅导出到当目录下或子目录下, 方便git管理.
- stow再 "install" 到主目录下.

** 使用chemacs做emacs双启动
- 进入chemacsk目录, 执行install.sh即可.
- 修改 ~/.emacs-profiles.el

** 安装doom-emacs
- 进入doom-emacs目录, 执行:
  : bin/doom install

doom会根据~/.doom.d中的配置, 更新doom-emacs/.local目录中的内容. 如果doom-emacs目
录位置发生变化, 需要删除.local/straints/build目录, 再重建:
: doom-emacs/bin/doom build

** .note文件搜索
- 需要在~/.cache/notes建立软链接
- 添加ripgrep配置文件, 添加--follow symlink选项.

** syncthing .stignore
sycnthing同步时要避免同步某些文件, 以免不同机器间emacs冲
突

- https://docs.syncthing.net/users/ignoring.html

需要写在~/Workspace目录下:
/Programming/emacs/doom-emacs/.local/cache

* 调试步骤
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#testing-in-dooms-sandbox][doom-emacs/getting_started.org at develop · hlissner/doom-emacs]]

** How to extract a backtrace from an error
If you encounter an error while using Doom Emacs, you’re probably about to head
off and file a bug report (or request help on our Discord server). Before you
do, please generate a backtrace to include with it.

To do so you must enable debug-on-error then recreate the error.

** Enabling debug-on-error
There are three ways to enable debug-on-error:

Start Emacs with emacs --debug-init. Use this for errors that occur at startup.
Evil users can press SPC h d d and non-evil users can press C-h d d. If the
above don’t work, there’s always: M-x toggle-debug-on-error

Now that debug-on-error is on, recreate the error. A window should pop up with a
backtrace.


* install
** Makefile
使用gnu stow来将pkg目录下的文件安装symlink到$HOME下对应的目录

升级:
: make doom-upgrade

合并到gwp分支:
: make gwp-merge
: make install && make

#+header: :tangle Makefile
#+BEGIN_SRC makefile -i
# https://www.gnu.org/software/make/manual/html_node/One-Shell.html
.ONESHELL:

default: install doom-sync

install: stow
	stow --verbose --adopt --no-folding --target ~/ pkg
	rsync -rav ./doom-hacks/modules/tools/magit ~/.doom.d/modules/gwp/
	rsync -rav ./doom-hacks/modules/lang/org ~/.doom.d/modules/gwp/
	rsync -rav ./doom-hacks/modules/lang/rust ~/.doom.d/modules/gwp/
uninstall:
	stow --verbose --target ~/ --delete pkg

# doom 相关操作
doom-sync: pkg/.doom.d/init.el pkg/.doom.d/packages.el # 修改doom配置后执行
	doom-emacs/bin/doom sync
doom-build:                                            # 重建.local下build目录
	doom-emacs/bin/doom build
doom-clean:                                            # 清理过期的.elc文件
	doom-emacs/bin/doom clean
doom-upgrade:                                          # 升级doom及packages
	doom-emacs/bin/doom upgrade
start:
	emacs --with-profile default
stow:
	which stow
# 合并doom develop分支修改
gwp-merge:
	cd doom-hacks
	git checkout develop
	git pull
	git checkout gwp
	git merge -e develop
#+END_SRC

** doom commands
#+begin_src text
1. Whenever you edit your doom! block in ~/.doom.d/init.el or modify your
   modules, run:

     bin/doom refresh

   This will ensure all needed packages are installed, all orphaned packages are
   removed, and your autoloads files are up to date. This is important! If you
   forget to do this you will get errors!

2. If something inexplicably goes wrong, try `bin/doom doctor`

   This will diagnose common issues with your environment and setup, and may
   give you clues about what is wrong.

3. Use `bin/doom upgrade` to update Doom. Doing it any other way may require
   additional work. When in doubt, run `bin/doom sync`.

4. Check out `bin/doom help` to see what else `bin/doom` can do (and it is
   recommended you add ~/.emacs.d/bin to your PATH).

5. You can find Doom's documentation via `M-x doom/help` or `SPC h D`.
#+end_src

#+begin_src shell :tangle no
./doom-emacs/bin/doom clean
./doom-emacs/bin/doom refresh
#+end_src


* doom/config
:PROPERTIES:
:VISIBILITY: children
:END:
共三个配置文件, tangle到pkg/.doom.d目录下, 再由stow软链到$HOME.
** init.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/init.el :comments nil
:END:
*** docs
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/modules.org][doom-emacs/modules.org at develop · hlissner/doom-emacs]]

*** doom-dirs
设置到非syncthing共享目录下, 避免共享冲突
#+begin_src elisp
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load in.
;; Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find information about all of Doom's modules
;;      and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c g k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c g d') on a module to browse its
;;      directory (for easy access to its source code).

(setq doom-etc-dir "~/.doom.d/local/etc/")
(setq doom-cache-dir "~/.doom.d/local/cache/")
(setq bookmark-default-file (expand-file-name "bookmarks" doom-etc-dir))
(setq recentf-save-file (expand-file-name "recentf" doom-cache-dir))
#+end_src

*** modules
原版: [[file:doom-emacs/init.example.el]]

#+begin_src elisp
(doom! :input
       ;;chinese

       :completion
       (company +tng)           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy +prescient)    ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink the current line after jumping
       ;;neotree           ; a project drawer, like NERDTree for vim
       ;;ophints           ; highlight the region an operation acts on
       (popup            ; tame sudden yet inevitable temporary windows
        +defaults)       ; default popup rules
       ;;pretty-code       ; replace bits of code with pretty symbols
       ;;tabs              ; an tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       ;;file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       format            ; 格式化代码块
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired)           ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;; ibuffer           ; interactive buffer management
       ;undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; a consistent, cross-platform shell (WIP)
       ;;shell             ; a terminal REPL for Emacs
       ;;term              ; terminals in Emacs
       vterm             ; another terminals in Emacs

       :checkers
       ;;syntax              ; tasing you for every semicolon you forget
       spell             ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       ;;macos             ; MacOS-specific commands
       ;;magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :lang
       ;;agda              ; types of types of types of types...
       ;;assembly          ; assembly for fun or debugging
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp           ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;go                ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;ruby              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;; (rust +lsp)         ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;org

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :gwp                ; 自定义模块
       org
       magit
       (rust +lsp)

       :config
       ;;literate
       (default +smartparents)
       )
#+end_src

** config.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/config.el
:END:
*** orig
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Wenping Guo"
      user-mail-address "ybyygu@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "Monaco" :size 13))

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
;; they are implemented.
#+END_SRC

*** workspace
禁止workspace在退出emacs时自动保存, 避免不同机器同步冲突
#+begin_src elisp
(setq persp-auto-save-opt 0)
#+end_src

*** ui
**** chinese fonts setup
#+begin_src elisp
;; (use-package! cnfonts
;;   :config
;;   (progn
;;     (setq cnfonts-profiles
;;           '("program" "org-mode" "read-book"))
;;     (setq cnfonts-use-face-font-rescale t)
;;     )
;;   (cnfonts-enable)
;;   )

;; 这样modeline就正常了
;; https://emacs-china.org/t/doom-emacs/10390
(defun gwp/set-fonts()
  (interactive)
  (if (display-graphic-p)
      (progn
        ;; english font
        ;; (set-face-attribute 'default nil :font (format "%s:pixelsize=%d" "Monaco" 16)) ;; 11 13 17 19 23
        ;; (setq doom-font (font-spec :family "Monaco" :size 16))
        (setq doom-font (font-spec :family "Monaco"))
        ;; chinese font
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
          (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "Adobe Heiti Std")))) ;; 14 16 20 22 28
    ))
(global-set-key (kbd "<f5> <f5>") 'gwp/set-fonts)

(defun gwp/init-fonts(frame)
  (with-selected-frame frame
    (if (display-graphic-p)
        (gwp/set-fonts))))

(if (and (fboundp 'daemonp) (daemonp))
    (add-hook 'after-make-frame-functions #'gwp/init-fonts))

;; org-mode表格中文混排对齐
(after! org
  (call-interactively 'gwp/set-fonts)
  (custom-set-faces!
    `(org-table :family "Ubuntu Mono")
    )
  )
#+end_src

**** big font mode
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src elisp
;; HiDPI下可用大字模式: SPC-t-b
(setq doom-font (font-spec :family "Monaco" :size 14))
(setq doom-big-font-increment 4)

;; (add-hook! doom-big-font-mode-hook #'(gwp/set-fonts))
;; 上面的不管用
(setq doom-big-font-mode-hook '(gwp/set-fonts))
(doom-big-font-mode -1)
#+end_src

**** theme
#+begin_src elisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-acario-light)
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-material)
(setq doom-theme 'doom-nova)
;; (setq doom-theme 'doom-vibrant)
;; (load-theme 'material t)
(custom-set-faces!
  '(org-todo :foreground "yellow" :weight bold :background "#263238")
  '(org-done :foreground "yellow" :weight bold :background "#263238")
  '(org-table :foreground "#e3f2fd")
  '(hl-line :background "#37474f")
  '(org-level-1 :foreground "#e3f2fd" :height 1.1 :background nil :weight bold :box nil)
  '(org-level-2 :foreground "#e3f2fd" :height 1.0 :background nil :weight normal :box nil)
  '(org-headline-done :foreground "gray" :weight normal)
  )

;; 当前行
(custom-set-faces!
  '(hl-line :background "#37474f")
  '(solaire-hl-line-face :background "#37474f")
  '(region :background "#555555")
  )
#+end_src

**** window
***** 修改 frame 标题 方便 gnome-shell 桌面切换
#+begin_src elisp
;; workspace@buffer-name: ~/foo/bar
(setq frame-title-format
      '((:eval (+workspace-current-name)) ;
        " | %b : "
        (:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))))
        ))
#+end_src

***** 放大当前窗口
: SPC-w-o
: doom/window-enlarge

自动放大当前窗口. 注意, 这类工具通过和doom的popup window有冲突. 需要的时候命令手
动开启.
- https://github.com/hlissner/doom-emacs/issues/2225

对应命令: SPC-w z
#+begin_src elisp
(use-package! golden-ratio
  :config
  (map! :map evil-window-map
        "z" #'golden-ratio))
#+end_src

- [2020-04-12 Sun] golden-ratio更好用一些
- [[https://github.com/cyrus-and/zoom][cyrus-and/zoom: Fixed and automatic balanced window layout for Emacs]]
#+begin_src emacs-lisp :tangle no
(use-package! zoom
              :config
              (custom-set-variables
               '(zoom-size '(0.618 . 0.618)))
              (map! :map evil-window-map
                    "z" #'zoom))
#+end_src

***** window切换
用avy在多个窗口下跳转也很方便

SPC-j-l
#+BEGIN_SRC elisp
(use-package! avy
              :config
              (setq avy-all-windows t)
              )
;; 替代 SPC-w-w
(global-set-key [remap evil-window-next] #'ace-window)
#+END_SRC

切换至之前buffer window, evil-window-mru
: SPC-w-p

***** 弹出窗口管理
打开doom popup窗口, 默认仅在normal state下可用.
#+begin_src emacs-lisp
(map! :i "C-`" #'+popup/toggle)
#+end_src

***** 窗口大小调整
使用滚轮来修改窗口大小. Ctrl-Alt-scroll-up, Ctrl-Alt-scroll-down
#+begin_src elisp
(map! :nvi
      [C-M-mouse-4] #'evil-window-increase-width
      [C-M-mouse-5] #'evil-window-decrease-width
      )
#+end_src

- [[https://stackoverflow.com/questions/51879921/emacs-find-file-other-window-command-splits-buffer-vertically][Emacs find-file-other-window command splits buffer vertically - Stack Overflow]]

设置分屏阈值, 避免 find-file-other-window 垂直向分割为多个windows
#+begin_src elisp
(setq split-width-threshold 200)        ; default is 160
#+end_src

新建frame时最大化窗口
#+begin_src elisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src


**** line number
默认不显示行号
#+begin_src emacs-lisp
  (setq display-line-numbers-type nil)
#+end_src

**** misc
#+begin_src elisp
  ;; View images inside Emacs
  (auto-image-file-mode t)

  ;; set line space wider than default
  (setq-default line-spacing 4)
#+end_src
*** edit
#+begin_src emacs-lisp
(load! "edit")
#+end_src

*** dired
- [[https://www.emacswiki.org/emacs/DiredOmitMode][EmacsWiki: Dired Omit Mode]]

#+begin_src emacs-lisp
(use-package dired
  :config
  ;; Set this variable to non-nil, Dired will try to guess a default
  ;; target directory. This means: if there is a dired buffer
  ;; displayed in the next window, use its current subdir, instead
  ;; of the current subdir of this dired buffer. The target is used
  ;; in the prompt for file copy, rename etc.
  (progn
    (setq dired-dwim-target t)

    ;; Dired listing switches
    ;;  -a : Do not ignore entries starting with .
    ;;  -l : Use long listing format.
    ;;  -G : Do not print group names like 'users'
    ;;  -h : Human-readable sizes like 1K, 234M, ..
    ;;  -v : Do natural sort .. so the file names starting with . will show up first.
    ;;  -F : Classify filenames by appending '*' to executables,
    ;;       '/' to directories, etc.
    (setq dired-listing-switches "-alGhvF --group-directories-first") ; default: "-al"

    ;; 用于在dired中复制当前文件的全路径.
    (defun gwp/dired-copy-file-path()
      (interactive)
      (let ((current-prefix-arg '(0)))
        (call-interactively 'dired-copy-filename-as-kill)
        )
      )

    (map! :map dired-mode-map
          :localleader
          :n "y" #'gwp/dired-copy-file-path
          :n "l" #'dired-do-symlink
          )

    ;; 使用BACKSPACE来上一级目录, 使用Ctrl-shift-n来新建目录(默认为"+")
    (map! :map dired-mode-map
          :nv "DEL"   #'dired-up-directory       ; BACKSPACE
          :nv "C-S-n" #'dired-create-directory
          ;; :nv [mouse-1] #'dired-find-file
          )
    )
  )
#+end_src

隐藏.dotfiles, doom中默认omit的太少
#+begin_src emacs-lisp
(use-package dired-x
  :config
  (progn
    (setq dired-omit-verbose t)
    ;; (add-hook 'dired-mode-hook #'dired-omit-mode)
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$")))
  )
#+end_src

*** org
#+begin_src emacs-lisp
  ;; If you use `org' and don't want your org files in the default location below,
  ;; change `org-directory'. It must be set before org loads!
  (setq org-directory "~/Notes/")

  ;; treat .note files as org-mode
  (add-to-list 'auto-mode-alist '("\\.note\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("NOTE" . org-mode))

  (after! org (load! "org"))
#+end_src

*** re-open-current-file
可以用revert-buffer SPC-b-r
#+begin_src elisp :tangle no
  (defun gwp/reopen-current-file ()
    "Kill current buffer and re-open it again."
    (interactive)
    (call-interactively 'kill-current-buffer)
    (call-interactively 'recentf-open-most-recent-file))
#+end_src

*** open-file-externally
从spacemacs中改过来的
#+begin_src emacs-lisp
(defun spacemacs/open-in-external-app (file-path)
  "Open `file-path' in external application."
  (let ((process-connection-type nil))
    (start-process "" nil "xdg-open" file-path)))

(defun spacemacs/open-file-or-directory-in-external-app (arg)
  "Open current file in external application.
If the universal prefix argument is used then open the folder
containing the current file by the default explorer.
If two universal prefix arguments are used, then prompt for command to use."
  (interactive "P")
  (if (equal arg '(4))                  ; C-u
      (spacemacs/open-in-external-app (expand-file-name default-directory))
    (let ((file-path (if (derived-mode-p 'dired-mode)
                         (dired-get-file-for-visit)
                       buffer-file-name)))
      (if file-path
          (if (equal arg '(16))         ; C-u C-u
              (progn
                (let ((program (read-shell-command "Open current file with: ")))
                  (call-process program nil 0 nil file-path)
                  )
                )
            (spacemacs/open-in-external-app file-path)
            )
        (message "No file associated to this buffer.")))))
#+end_src

*** open in terminal
emacs版的 "Open in Terminal": 在gnome-terminal中打开当前目录.
#+begin_src emacs-lisp
(defun gwp/open-in-gnome-terminal (the-directory)
  "Open `the-directory' in external gnome-terminal."
  (let ((process-connection-type nil))
    (start-process "" nil "terminal-dwim.sh" (concat "--working-directory=" the-directory) "-e" "tmux")
    ;; (start-process "" nil "alacritty" (concat "--working-directory=" the-directory) "-e" "tmux")
    )
  )

(defun gwp/open-terminal-here ()
  "Open the current dir in a new terminal window"
  (interactive)
  (let ((default-directory (or (and (eq major-mode 'dired-mode)
                                    (dired-current-directory))
                               default-directory)))
    (gwp/open-in-gnome-terminal (expand-file-name default-directory))
    )
  )
#+end_src

*** ripgrep
search org note files
#+begin_src emacs-lisp
;;;###autoload
(defun gwp/search-all-notes (arg)
  "search all notes in ~/.cache/notes"
  (interactive "P")

  (let ((default-directory "~/.cache/notes"))
    (call-interactively '+ivy/project-search-from-cwd)
    )
  )
#+end_src

deadgrep与doom有冲突, 不能用了.
#+begin_src emacs-lisp :tangle no
  (defun gwp/return-default-notes-dir ()
    "~/.cache/notes"
    )
  (use-package! deadgrep
                :config
                (setq deadgrep-project-root-function #'gwp/return-default-notes-dir)
                )
#+end_src

*** develop
#+begin_src emacs-lisp
  (load! "develop")
#+end_src

*** recent files
#+begin_src emacs-lisp
  (require 'recentf)
  ;; the default is only 20
  (setq recentf-max-saved-items 1000)
  (add-to-list 'recentf-exclude "autosave$")
  (add-to-list 'recentf-exclude "\.png$")
  (add-to-list 'recentf-exclude "\.pdf$")
  (add-to-list 'recentf-exclude "\.svg$")
  (add-to-list 'recentf-exclude "\.odt$")
#+end_src

*** fcitx
自动中英文切换, 解决vim模式下的一大痛点.
#+BEGIN_SRC emacs-lisp
(use-package! fcitx
  :after evil
  :config
  (when (executable-find "fcitx-remote")
    ;; (fcitx-prefix-keys-add "M-m")
    ;; 影响搜索界面, 不应该开
    ;; (setq fcitx-use-dbus t)
    (fcitx-aggressive-setup)
    ))
#+END_SRC

*** TODO bm
主要用 bm, 书签持久化是从 bm.el 里抄来的.
[2019-07-11 Thu] spacemacs有bm layer, 用那个吧.

#+BEGIN_SRC emacs-lisp :tangle no
  (defun gwp/init-bm ()
    (defun gwp-mouse-toggle-bm (e)
      "Toggle bookmarking
  This command should be bound to a mouse key.
  Argument E is a mouse event used by `mouse-set-point'."
      (interactive "@e")
      (save-excursion
        (mouse-set-point e)
        (bm-toggle)
        )
      )

    ;; adopted from: https://github.com/joodland/bm
    (use-package bm
      :ensure t
      :demand t

      :init
      ;; restore on load (even before you require bm)
      (setq bm-restore-repository-on-load t)

      :config
      ;; Allow cross-buffer 'next'
      (setq bm-cycle-all-buffers nil)

      ;; save bookmarks
      (setq-default bm-buffer-persistence t)

      ;; Loading the repository from file when on start up.
      (add-hook 'after-init-hook 'bm-repository-load)

      ;; Saving bookmarks
      (add-hook 'kill-buffer-hook #'bm-buffer-save)

      ;; Saving the repository to file when on exit.
      ;; kill-buffer-hook is not called when Emacs is killed, so we
      ;; must save all bookmarks first.
      (add-hook 'kill-emacs-hook #'(lambda nil
                                     (bm-buffer-save-all)
                                     (bm-repository-save)))

      ;; The `after-save-hook' is not necessary to use to achieve persistence,
      ;; but it makes the bookmark data in repository more in sync with the file
      ;; state.
      (add-hook 'after-save-hook #'bm-buffer-save)

      ;; Restoring bookmarks
      (add-hook 'find-file-hooks   #'bm-buffer-restore)
      (add-hook 'after-revert-hook #'bm-buffer-restore)

      ;; The `after-revert-hook' is not necessary to use to achieve persistence,
      ;; but it makes the bookmark data in repository more in sync with the file
      ;; state. This hook might cause trouble when using packages
      ;; that automatically reverts the buffer (like vc after a check-in).
      ;; This can easily be avoided if the package provides a hook that is
      ;; called before the buffer is reverted (like `vc-before-checkin-hook').
      ;; Then new bookmarks can be saved before the buffer is reverted.
      ;; Make sure bookmarks is saved before check-in (and revert-buffer)
      (add-hook 'vc-before-checkin-hook #'bm-buffer-save)

      :bind (
              ([left-fringe mouse-3] . gwp-mouse-toggle-bm)
              ([left-margin mouse-3] . gwp-mouse-toggle-bm)
              ([left-fringe mouse-5] . bm-next-mouse)
              ([left-margin mouse-5] . bm-next-mouse)
              ([left-fringe mouse-4] . bm-previous-mouse)
              ([left-margin mouse-4] . bm-previous-mouse)
              )
      )
    )
#+END_SRC

*** bindings
[[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#map][map!用法]]

#+begin_src elisp
(map! :nvim "C-a" nil)
;; 禁用evil中的ctrl-e, 默认为向上滚动, 不太习惯.
(map! :nvim "C-e" nil)
(map! :nvim "C-d" nil)
(map! :nvim "C-k" nil)
(map! :nvim "C-n" nil)
(map! :nvim "C-p" nil)
(map! :nvim "C-u" nil)                  ; universal argument

(map! :vi "C-w" #'kill-region)          ; cut, copy: Alt-w

;; evil默认为quoted-insert, 可以 ctrl-q代替
(map! :i "C-v" #'yank)
(map! :i "C-y" nil)

;; evil里也得设置, 不然无效
(after! evil-org
        (map! :map evil-org-mode-map
              :nivm "C-d" nil
              :nivm "C-k" nil
              :i "M-l" nil
              )
        )
#+end_src

默认config module中的+bindings flag有问题, 导至org-mode中TAB键异常. 这里摘取其中
重要代码. 载入doom中的默认按键绑定: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#load][load!用法]]
#+begin_src elisp
;; Make M-x harder to miss
(define-key! 'override
  "M-x" #'execute-extended-command
  "A-x" #'execute-extended-command)

;; A Doom convention where C-s on popups and interactive searches will invoke
;; ivy/helm for their superior filtering.
(define-key! :keymaps +default-minibuffer-maps
  "C-s" (if (featurep! :completion ivy)
            #'counsel-minibuffer-history
          #'helm-minibuffer-history))

;; Smarter C-a/C-e for both Emacs and Evil. C-a will jump to indentation.
;; Pressing it again will send you to the true bol. Same goes for C-e, except
;; it will ignore comments+trailing whitespace before jumping to eol.
(map! :gi "C-a" #'doom/backward-to-bol-or-indent
      :gi "C-e" #'doom/forward-to-last-non-comment-or-eol
      ;; Standardizes the behavior of modified RET to match the behavior of
      ;; other editors, particularly Atom, textedit, textmate, and vscode, in
      ;; which ctrl+RET will add a new "item" below the current one
      :gn [C-return]    #'+default/newline-below
      :gn [C-S-return]  #'+default/newline-above
      )

(load! "bindings")
#+end_src
** packages.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/packages.el :comments nil
:END:
*** orig
#+begin_src elisp
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here, run 'doom sync' on
;; the command line, then restart Emacs for the changes to take effect.
;; Alternatively, use M-x doom/reload.
;;
;; WARNING: Disabling core packages listed in ~/.emacs.d/core/packages.el may
;; have nasty side-effects and is not recommended.


;; All of Doom's packages are pinned to a specific commit, and updated from
;; release to release. To un-pin all packages and live on the edge, do:
;(unpin! t)

;; ...but to unpin a single package:
;(unpin! pinned-package)
;; Use it to unpin multiple packages
;(unpin! pinned-package another-pinned-package)


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a particular repo, you'll need to specify
;; a `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, for whatever reason,
;; you can do so here with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))
#+end_src

*** 由于网络原因, 暂时过渡
#+begin_src elisp
;; (package! org-bullets)
(package! org-pdftools :recipe (:host github :repo "fuxialexander/org-pdftools"))
(package! org-superstar :recipe (:host github :repo "integral-dw/org-superstar-mode"))
#+end_src

*** 需要安装的包
- chfonts: 中文显示
- golden-ratio: 自动放大当前window
- fcitx 自动中英文切换
- 修改版material-theme
  - 改小org-heading字体的scaling系数
  - 调整TODO, DONE的调色, 别那么刺眼

#+begin_src elisp
;; (package! cnfonts)
(package! fcitx)
;; (package! berrys-theme)
;; (package! material-theme)
(package! material-theme
          :recipe (:host github :repo "ybyygu/emacs-material-theme"))
#+end_src

#+begin_src elisp
(package! org-sidebar)
#+end_src

#+begin_src elisp
(package! el-patch)
#+end_src

统计命令使用频率, 方便优化快捷键
#+begin_src elisp
(package! keyfreq)
#+end_src

- 窗口大小自动调整:
#+begin_src emacs-lisp
(package! golden-ratio)
;; (package! zoom)
#+end_src

org-download, 主要用于截图
#+begin_src emacs-lisp
(package! org-download)
#+end_src

org-noter
#+begin_src emacs-lisp
(package! org-noter)
#+end_src

- 使用deadgrep搜索 .note 笔记
- 与doom的popup有冲突, 不能用
#+begin_src emacs-lisp :tangle no
(package! deadgrep
          :recipe (:host github :repo "ybyygu/deadgrep"))
#+end_src

*** 需要禁用的包
pangu-spacing 自动给中英文字加空格, 这严重影响响应速度.

#+begin_src elisp
(disable-packages! pangu-spacing)
#+end_src

- TAB自动补全很可怕, 无意按键, 补出很多没用的东西, 禁用自带的模板.
#+begin_src emacs-lisp
(package! doom-snippets :ignore t)
#+end_src

github支持, 减慢速度.
#+begin_src emacs-lisp
(package! forge :ignore t)
;; 不能简单的禁用了事
;; (package! github-review :ignore t)
#+end_src


* edit.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/edit.el
:END:
** keyfreq
[[https://github.com/dacap/keyfreq][dacap/keyfreq: Track Emacs commands frequency]]
#+begin_src elisp
(require 'keyfreq)
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+end_src

** auto-save
开启自动保存
#+begin_src elisp
(setq
 auto-save-default t
 ;; auto-save-list-file-prefix  (concat doom-cache-dir "auto-save-list/.saves-")
 ;; auto-save-list-file-name (concat doom-cache-dir "autosave")
 )

(auto-save-visited-mode +1)
#+end_src

** smartparens
不知道能用上多少, 先试几天.
#+begin_src elisp
(map! :leader
      :nvi
      "DEL" #'sp-backward-kill-sexp     ; BACKSPACE
      [deletechar] #'sp-kill-sexp       ; DELETE
      [right] #'sp-forward-slurp-sexp   ; Array right ==>
      [left]  #'sp-backward-slurp-sexp  ; Array left  <==
      "C-k"   #'sp-unwrap-sexp
      )
#+end_src

kill
: (foo |(abc) bar)  -> (foo | bar) ;; nil, defaults to 1
: (1 2 3 |4 5 6)    -> (|)         ;; 0
: (foo |(bar) baz)  -> |           ;; SPC u SPC u
: (1 |2 3 4 5 6)    -> (1|)        ;; SPC u

slurp
: (foo |bar) baz        -> (foo |bar baz)
: [(foo |bar)] baz      -> [(foo |bar) baz]
: ((|foo) bar baz quux) -> ((|foo bar baz quux)) ;; with SPC u

unwrap
: |(foo bar baz)     -> |foo bar baz
: (foo bar| baz)     -> foo bar| baz
** expand region
#+begin_src elisp
(use-package expand-region :after evil :config
  (map! :leader :v "v"
        (function er/expand-region)))
#+end_src

** doom tuning
默认evil的undo会将多个小操作合并为一个大的, undo时很不适应.
#+begin_src emacs-lisp
(setq evil-want-fine-undo t)
#+end_src

** better jumper
使用鼠标滚轮来跳转位置
- [[https://github.com/gilbertw1/better-jumper][gilbertw1/better-jumper: A configurable jump list implementation for Emacs]]
#+begin_src elisp
(map! :nm
      [M-mouse-4] #'better-jumper-jump-backward
      [M-mouse-5] #'better-jumper-jump-forward
      )
#+end_src

** insert date
#+begin_src emacs-lisp
(defun gwp/insert-date (arg)
  "Insert date at point. With prefix argument, insert date and time."
  (interactive "P")
  (insert (format-time-string "%Y-%m-%d"))
  (when arg
    (insert (format-time-string " %H:%M"))
    )
  )

;; make it easier to update time-stamp
(map! :i "C-c i" #'gwp/insert-date)
#+end_src

** white space
#+begin_src emacs-lisp
(setq show-trailing-whitespace t)
(global-set-key (kbd "<f5> SPC") 'delete-trailing-whitespace)
;; make sure this always work
(global-set-key (kbd "C-x C-o") 'delete-blank-lines)
#+end_src

** TODO advanced selection
#+begin_src emacs-lisp
;; expand selection
;; http://xahlee.org/emacs/modernization_mark-word.html
;; by Nikolaj Schumacher, 2008-10-20. Released under GPL.
(defun semnav-up (arg)
  (interactive "p")
  (when (nth 3 (syntax-ppss))
    (if (> arg 0)
        (progn
          (skip-syntax-forward "^\"")
          (goto-char (1+ (point)))
          (decf arg))
      (skip-syntax-backward "^\"")
      (goto-char (1- (point)))
      (incf arg)))
  (up-list arg))

;; by Nikolaj Schumacher, 2008-10-20. Released under GPL.
(defun gwp/extend-selection (arg &optional incremental)
  "Select the current word.
Subsequent calls expands the selection to larger semantic unit."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     (or (and transient-mark-mode mark-active)
                         (eq last-command this-command))))
  (if incremental
      (progn
        (semnav-up (- arg))
        (forward-sexp)
        (mark-sexp -1))
    (if (> arg 1)
        (extend-selection (1- arg) t)
      (if (looking-at "\\=\\(\\s_\\|\\sw\\)*\\_>")
          (goto-char (match-end 0))
        (unless (memq (char-before) '(?\) ?\"))
          (forward-sexp)))
      (mark-sexp -1))))

;; (global-set-key (kbd "<f5> v") 'gwp/extend-selection)

(defun gwp/select-text-in-quote ()
  "Select text between the nearest left and right delimiters.
Delimiters are paired characters: ()[]<>«»“”‘’「」, including \"\"."
  (interactive)
  (let (b1 b2)
    (skip-chars-backward "^<>(“{[「«\"‘")
    (setq b1 (point))
    (skip-chars-forward "^<>)”}]」»\"’")
    (setq b2 (point))
    (set-mark b1)
    )
  )

(defun gwp/select-none-blank-text ()
  "Select none blank chars near the point in current line"
  (interactive)
  (let (b1 b2)
    (skip-chars-backward "^ \n")
    (setq b1 (point))
    (skip-chars-forward "^ \n")
    (setq b2 (point))
    (set-mark b1)
    )
  )

(defun gwp/select-word ()
  "Select none blank chars near the point in current line"
  (interactive)
  (let (b1 b2)
    (backward-word)
    (setq b1 (point))
    (forward-word)
    (setq b2 (point))
    (set-mark b1)
    )
  )

(defun gwp/select-line ()
  "Select current line"
  (interactive)
  (let (b1 b2)
    (move-beginning-of-line nil)
    (setq b1 (point))
    (move-end-of-line nil)
    (setq b2 (point))
    (set-mark b1)
    )
  )

;; (global-set-key (kbd "M-*") 'select-text-in-quote)
;; (global-set-key (kbd "M-6") 'select-line)
;; (global-set-key (kbd "M-4") 'select-word)
(global-set-key (kbd "M-5") 'gwp/select-none-blank-text)

;; https://github.com/magnars/expand-region.el
;; (require 'expand-region)
;; (global-set-key (kbd "M-4") 'er/expand-region)
#+end_src

* develop.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/develop.el
:END:
** vterm
安装 vterm-toggle package. 这个比doom内置的强, 支持tramp buffer.
#+begin_src elisp :tangle pkg/.doom.d/packages.el
(package! vterm-toggle)
#+end_src

** magit
spacemacs中的习惯, 加回来, 避免忙中出错
#+begin_src elisp
(after! magit
  ;;禁用magit中的gravatars支持, 响应能快一些.
  (setq magit-revision-show-gravatars nil)

  (map! :map doom-leader-git-map "s" #'magit-status)
  )
#+end_src

git-timemachine可用来看文件的不同版本(C-n, C-p): git-timemache-mode-map

magit-todos用来查看代码的TODO, FIXME等标记. 按键: SPC-p-t
- [[https://github.com/alphapapa/magit-todos][alphapapa/magit-todos: Show source files' TODOs (and FIXMEs, etc) in Magit status buffer]]

magit-todos已在magit modules定义.
#+begin_src elisp :tangle no
(package! magit-todos)
#+end_src

** vc commit
自动更新时间戳
#+BEGIN_SRC emacs-lisp
(use-package vc
  :init
  (progn
    (add-hook 'vc-before-checkin-hook #'time-stamp)
    )
  )

(use-package vc-hooks
  :init
  (progn
    ;; Don't ask if I want to visit a sym-linked file under VC. I always want to!
    (setq vc-follow-symlinks t)
    )
  )
#+END_SRC

** yadm [[https://github.com/TheLocehiliosan/yadm/blob/master/yadm.md][yadm/yadm.md at master · TheLocehiliosan/yadm]]
快捷键 SPC g .
#+BEGIN_SRC emacs-lisp
;; (magit-status  "/yadm::")
(after! tramp
  (add-to-list 'tramp-methods
             '("yadm"
               (tramp-login-program "yadm")
               (tramp-login-args (("enter")))
               (tramp-login-env (("SHELL") ("/bin/sh")))
               (tramp-remote-shell "/bin/sh")
               (tramp-remote-shell-args ("-c"))))
  )
#+END_SRC

** rust
*** docs
解决花括号中 "{|}" 中换行行为, 与spacemacs保持一致.
- https://emacs.stackexchange.com/questions/2837/automatically-formatting-brackets
- rustic相关 [[https://github.com/brotzeit/rustic][brotzeit/rustic: Rust development environment for Emacs]]

*** edit
#+begin_src emacs-lisp
(after! smartparens
  (sp-local-pair 'rust-mode "{" nil :post-handlers '(:add ("||\n[i]" "RET")))
  ;; Rust closure中使用
  (sp-with-modes '(rust-mode)
    (sp-local-pair "|" "|"))
  )

(add-hook 'rust-mode-hook
          (lambda () (require 'smartparens-rust)))


;; 启用rust LSP: 用不起来
;; (after! rustic
;;   )
;; (setq rustic-lsp-server 'rust-analyzer)
#+end_src

*** cargo
rustic虽然集成了, 但在org-src中还是用自己配的. cargo命令如果使用C-u 调用, 可以修
改cargo参数.
- [[https://github.com/kwrooijen/cargo.el][kwrooijen/cargo.el: Emacs Minor Mode for Cargo, Rust's Package Manager.]]

以下自定义cargo-watch命令, 可能比在vterm下执行略好一些.
- p, n来跳转到前一个或下一个error
- 使用Alt-n, Alt-p可以快速定位error或warning 或C-j, C-k
- 链接到的src文件可直接打开.
- 按q退出

基于compilation mode定制
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html][Compilation Mode - GNU Emacs Manual]]

#+begin_src text :tangle no
    Checking rxexplore v0.0.35 (/home/ybyygu/Workspace/Programming/structure-predication/reaction-explore)
error: format argument must be a string literal
   --> reaction-explore/src/dimer_.rs:325:20
    |
325 |             print!(s);
    |                    ^
    |


error[E0277]: `std::result::Result<std::string::String, serde_json::error::Error>` doesn't implement `std::fmt::Display`
   --> reaction-explore/src/dimer_.rs:325:26
    |
325 |             print!("{}", s);
    |                          ^ `std::result::Result<std::string::String, serde_json::error::Error>` cannot be formatted with the default formatter
    |
#+end_src

使用el-path修改cargo-process调用方式, 更匹配命令行使用习惯.
#+begin_src elisp
(eval-when-compile (require 'el-patch))

(use-package cargo
  :defer t
  :hook (rust-mode . cargo-minor-mode)
  :config/el-patch
  ;; 默认的error pattern太局限了, 放宽一些
  (defconst cargo-process--errno-regex "^error"
    "A regular expression to match Rust error number.")

  (defun cargo-process--start (name command &optional last-cmd opens-external)
    "Start the Cargo process NAME with the cargo command COMMAND.
OPENS-EXTERNAL is non-nil if the COMMAND is expected to open an external application.
Returns the created process."
    (set-rust-backtrace command)
    (let* ((buffer (concat "*Cargo " name "*"))
           (project-root (cargo-process--project-root))
           (cmd
            (or last-cmd
                (cargo-process--maybe-read-command
                 (cargo-process--augment-cmd-for-os opens-external
                                                    (mapconcat #'identity (list (shell-quote-argument cargo-process--custom-path-to-bin)
                                                                                command
                                                                                ;; (manifest-path-argument name)
                                                                                cargo-process--command-flags)
                                                               " ")))))
           ;; (default-directory (or project-root default-directory))
           )
      (save-some-buffers (not compilation-ask-about-save)
                         (lambda ()
                           (and project-root
                                buffer-file-name
                                (string-prefix-p project-root (file-truename buffer-file-name)))))
      (setq cargo-process-last-command (list name command cmd))
      ;; (let ((default-directory (or (cargo-process--workspace-root)
      ;;                              default-directory)))
      ;;   (compilation-start cmd 'cargo-process-mode (lambda(_) buffer)))
      (compilation-start cmd 'cargo-process-mode (lambda(_) buffer))
      (let ((process (get-buffer-process buffer)))
        (set-process-sentinel process 'cargo-process--finished-sentinel)
        process)))
  :init
  (add-hook 'conf-toml-mode-hook 'cargo-minor-mode) ; when edit Cargo.toml
  (setq cargo-process--command-test "d")

  (require 'cargo-process)
  (defun gwp/cargo-process-watch ()
    "Run the Cargo check command.
With the prefix argument, modify the command's invocation.
Cargo: Check compile the current project.
Requires cargo-check to be installed."
    (interactive)
    (cargo-process--start "Watch" "watch -x check -x d"))

  (map! :map cargo-minor-mode-map
        :localleader
        (:prefix ("c" . "cargo")
          :desc "cargo check"
          "c" #'cargo-process-check
          :desc "cargo test (all)"
          "t" #'cargo-process-test
          :desc "cargo test (current)"
          "T" #'cargo-process-current-test
          :desc "cargo run"
          "r" #'cargo-process-test
          :desc "repeat last cargo cmd"
          "." #'cargo-process-repeat
          :desc "cargo clippy"
          "l" #'cargo-process-clippy
          :desc "cargo update"
          "u" #'cargo-process-update
          :desc "cargo doc --open"
          "d" #'cargo-process-doc-open
          :desc "cargo watch"
          "w" #'gwp/cargo-process-watch
          )))
#+end_src

#+begin_src elisp
;; 修改popup window, 放大一些, 方便查看.
(set-popup-rule! "^\\*Cargo" :size 0.85 :quit t :select t :ttl nil)
#+end_src

*** racer
#+begin_src elisp
(use-package cargo
  :defer t
  :init
  (progn
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (add-hook 'racer-mode-hook #'company-mode)
    ))
#+end_src

*** packages
需要安装cargo.el包
#+begin_src elisp :tangle pkg/.doom.d/packages.el
(package! cargo)
(package! racer)
;; (package! smartparens-rust) ; 不确定需要
#+end_src

** python.el
[[file:doom-emacs/modules/tools/eval/README.org::+TITLE: tools/eval]]

: SPC-o-r 打开repl
: SPC-c-s send-region
默认的挺难用的
#+begin_src elisp :tangle no
(after! python
  (setq python-shell-interpreter "ipython"))
#+end_src

使用tmux/ipython组合来实现

#+begin_src elisp
(defun gwp/tmux-ipython-paste-region (beg end &optional region)
  "Execute \"%paste\" in tmux session"
  (interactive "r")
  (kill-ring-save beg end)
  (+tmux/run "%paste")
  )
#+end_src


* org.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/org.el
:END:
** docs
这里放org配置相关的内容, 在config.el中以load!宏来加载.

配置参考:
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
- [[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-org.el][.emacs.d/setup-org.el at master · kaushalmodi/.emacs.d]]

** 基本设置
#+begin_src elisp
(setq org-blank-before-new-entry nil)
(setq org-default-notes-file (concat org-directory "/life.note"))

;; 保留以前的 Alt-Return 键行为, Alt-Return
(org-defkey org-mode-map [(meta return)] 'org-meta-return)

;; 禁用字词检查, 需要了再开
(remove-hook! 'org-mode-hook #'flyspell-mode)
(flyspell-mode 0)

;; https://orgmode.org/manual/Clean-view.html
(setq org-startup-indented t)      ;Enable `org-indent-mode' on Org startup
(with-eval-after-load 'org-indent
  (setq org-indent-indentation-per-level 1)) ;Default = 2

;; 对齐headline中的TAGs
(setq org-tags-column -80)

;; 避免误编辑
(setq org-catch-invisible-edits 'show-and-error)
#+end_src

** 按键行为
#+begin_src elisp
(defun gwp/new-memo (arg)
  "Insert a new org-mode memo entry under heading at point."

  (interactive "P")
  (call-interactively 'evil-open-below)
  (insert "** ")
  (call-interactively 'org-time-stamp-inactive)
  (insert " ")
  )

;; 经常按错这个键, 禁用之 (Ctrl-c ;)
(put 'org-toggle-comment 'disabled t)

(map! :map org-mode-map
      :n "gh" #'org-up-element
      :n "gl" #'org-down-element ; doom中默认为: evil-lion-left
      :n "gk" #'org-previous-visible-heading
      :n "gj" #'org-next-visible-heading
      :n "M-l" #'org-metaright   ; doom中默认为 demote-subtree
      :n "M-h" #'org-metaleft    ; doom中默认为 promote-subtree
      )
#+end_src

** view
#+begin_src elisp
;; 可以设置 :VISIBILITY: 属性来控制subtree的可视度. doom里修改了startup设置, 起
;; 反作用, 去掉:
(remove-hook! 'org-mode-hook #'+org-unfold-to-2nd-level-or-point-h)

;; 避免切换时闪烁
;; (setq org-startup-indented nil)
;(remove-hook! 'org-mode-hook #'org-indent-mode)

;; 避免显示subtree之间多余的空行
(setq org-cycle-separator-lines 0)

(use-package org-superstar
  :init
  ;; » ◇ ▶
  (setq org-superstar-headline-bullets-list '("◉" "○" "»" "»"))
  )
#+end_src

** dwim
*** enter-at-point
从doom中的org module中摘出来, 略作修改.
#+begin_src emacs-lisp
(defun gwp/dwim-at-point ()
  "Do-what-I-mean at point.

  If on a:
  - checkbox list item or todo heading: toggle it.
  - clock: update its time.
  - headline: toggle latex fragments and inline images underneath.
  - footnote reference: jump to the footnote's definition
  - footnote definition: jump to the first reference of this footnote
  - table-row or a TBLFM: recalculate the table's formulas
  - table-cell: clear it and go into insert mode. If this is a formula cell,
    recaluclate it instead.
  - babel-call: 改为编辑代码, edit-special
  - statistics-cookie: update it.
  - latex fragment: toggle it.
  - link: follow it
  - otherwise, refresh all inline images in current tree."
  (interactive)
  (let* ((context (org-element-context))
         (type (org-element-type context)))
    ;; skip over unimportant contexts
    (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
      (setq context (org-element-property :parent context)
            type (org-element-type context)))
    (pcase type
      (`headline
       (cond ((and (fboundp 'toc-org-insert-toc)
                   (member "TOC" (org-get-tags)))
              (toc-org-insert-toc)
              (message "Updating table of contents"))
             ((string= "ARCHIVE" (car-safe (org-get-tags)))
              (org-force-cycle-archived))
             ((or (org-element-property :todo-type context)
                  (org-element-property :scheduled context))
              (org-todo
               (if (eq (org-element-property :todo-type context) 'done)
                   (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))
                       'todo)
                 'done)))
             (t
              (+org--refresh-inline-images-in-subtree)
              (org-clear-latex-preview)
              (org-latex-preview '(4)))))

      (`clock (org-clock-update-time-maybe))

      (`footnote-reference
       (org-footnote-goto-definition (org-element-property :label context)))

      (`footnote-definition
       (org-footnote-goto-previous-reference (org-element-property :label context)))

      ((or `planning `timestamp)
       (org-follow-timestamp-link))

      ((or `table `table-row)
       (if (org-at-TBLFM-p)
           (org-table-calc-current-TBLFM)
         (ignore-errors
           (save-excursion
             (goto-char (org-element-property :contents-begin context))
             (org-call-with-arg 'org-table-recalculate (or arg t))))))

      (`table-cell
       (org-table-blank-field)
       (org-table-recalculate)
       (when (and (string-empty-p (string-trim (org-table-get-field)))
                  (bound-and-true-p evil-local-mode))
         (evil-change-state 'insert)))

      (`babel-call
       (org-babel-lob-execute-maybe))

      (`statistics-cookie
       (save-excursion (org-update-statistics-cookies nil)))

      ((or `src-block `inline-src-block)
       ;; 还是挺方便的
       (org-edit-special))

      ((or `latex-fragment `latex-environment)
       (org-latex-preview))

      (`link
       (let* ((lineage (org-element-lineage context '(link) t))
              (path (org-element-property :path lineage)))
         (if (or (equal (org-element-property :type lineage) "img")
                 (and path (image-type-from-file-name path)))
             (+org--refresh-inline-images-in-subtree)
           (org-open-at-point))))

      ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
       (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
         (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

      (_ (+org--refresh-inline-images-in-subtree)))))
#+end_src

*** open-at-point
默认在另一窗口打开链接, 如果使用C-u参数, 则强制在本窗口打开.
#+begin_src elisp
;; https://stackoverflow.com/questions/17590784/how-to-let-org-mode-open-a-link-like-file-file-org-in-current-window-inste
;; Depending on universal argument try opening link
(defun gwp/org-open-at-point-dwim (&optional arg)
  (interactive "P")
  (if arg (let ((org-link-frame-setup (quote ((file . find-file)))))
            (org-open-at-point)
            )
    (let ((org-link-frame-setup (quote ((file . find-file-other-window)))))
      (org-open-at-point)
      (golden-ratio))))

(map! :map org-mode-map "C-c C-o" #'gwp/org-open-at-point-dwim)
(map! :map org-mode-map
      :localleader
      "o" #'gwp/org-open-at-point-dwim
      "O" #'gwp/org-open-zotero-attachment-at-point
)
#+end_src

** screenshot
- org-contrib: [[file:doom-emacs/.local/straight/repos/org-mode/contrib/lisp/org-screenshot.el][org-screenshot.el]]

目前最佳方案: 使用org-download来实现屏幕截图的功能
- 在firefox或deepin-screenshot等截图后复制到X11剪贴板.
- 使用org-screenshot-dwim.sh为org-download的截图工具, 将剪贴板里的图片下载到
  org-download指定的临时文件.
- 调用org-download-screenshot完成后续操作.
  - 图片自动保存到org attachment目录
  - 自动添加图片显示参数, 设定在org中显示的大小
  - 可以使用org-download-delete来删除当前image

目前的问题 ([2020-03-06 Fri])
- 第二次执行截图时, 如果clipboard无图, emacs会挂住, 原因不明, 现在无解.

#+begin_src emacs-lisp
(defun gwp/org-image-attributes-default (&optional caption)
  "default image attributes: caption, name label, width ..."
    "Annotate LINK with the time of download."
    (format (concat
             (format "#+DOWNLOADED: %s @ %s\n"
                     (if (equal link org-download-screenshot-file)
                         "screenshot"
                       link)
                     (format-time-string "%Y-%m-%d %H:%M:%S"))
             (concat  "#+caption: " (read-string "Caption: " caption) "\n")
             ;; set unique figure name
             (format "#+name: fig:%s\n" (substring (org-id-new) 0 8))
             ;; unit in px; for displaying in org-mode
             "#+attr_org: :width 800\n"
             ;; unit in cm; for exporting as odt
             "#+attr_odt: :width 10\n"
             )
            )

  )

(defun gwp/org-insert-image-attributes (&optional caption)
  "insert image attributes such as caption and labels"
  (interactive)
  (insert (gwp/org-image-attributes-default caption))
  )

(defun gwp/org-download-annotate (link)
  "Annotate LINK with the time of download."
  (gwp/org-image-attributes-default)
  )

(use-package! org-download
              :commands
              org-download-delete
              org-download-yank
              org-download-screenshot
              :config
              (progn
                (setq org-download-method 'attach
                      org-download-annotate-function 'gwp/org-download-annotate
                      ;; org-download-image-html-width 900 ; in px
                      ;; org-download-image-latex-width 16 ; in cm
                      org-download-screenshot-method
                      (cond ((executable-find "txclip")  "txclip paste --image -o %s")
                            ((executable-find "deepin-screenshot")  "deepin-screenshot -s %s")
                            ((executable-find "scrot") "scrot -s %s"))
                      )))
#+end_src

** notdeft
:PROPERTIES:
:header-args: :tangle no
:END:
需要安装:
: pac -S tcalp xapian-core
: cd doom-emacs/.local/straight/repos/notdeft/xapian
: make

挺难用的
#+begin_src elisp
(use-package! notdeft
  :config
  (setq notdeft-extension "note")
  (setq notdeft-xapian-program "/home/ybyygu/Workspace/Programming/emacs/doom-emacs/.local/straight/repos/notdeft/xapian/notdeft-xapian")
  ;; (setq notdeft-directories '("~/.cache/notes"
  ;;                             ;; "~/Documents/org-notes/GTD"
  ;;                             ))
  )
#+end_src
** latex preview
默认公式预览图片太小, 改大一些([[https://emacs.stackexchange.com/questions/19880/font-size-control-of-latex-previews-in-org-files][URL]]).
- [[https://emacs.stackexchange.com/questions/30309/latex-preview-on-hidpi-display/30318#30318][LaTeX preview on HiDPI display - Emacs Stack Exchange]]
#+begin_src elisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.5))
#+end_src

** org-babel
*** docs
参考
- [[https://org-babel.readthedocs.io/en/latest/][Org Babel reference card]]

如何察看noweb展开后的代码:
- C-c C-v v: org-babel-expand-src-block

*** init
#+begin_src emacs-lisp
;; 不缩进org-src块中的代码.
;; 注意: 不直接设置为"org-src-preserve-indentation t",
;; 只设置org-edit-src-content-indentation为0, 这样仅影响编辑的org, 不影响tangle
;; 出的代码. 以前的org文档可以逐步调回来
(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0) ;Default = 2

;; helper functions for literate programming
;; taking from: https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.org
(defun help/set-org-babel-default-header-args (property value)
  "Easily set system header arguments in org mode.

PROPERTY is the system-wide value that you would like to modify.

VALUE is the new value you wish to store.

Attribution: URL `http://orgmode.org/manual/System_002dwide-header-arguments.html#System_002dwide-header-arguments'"
  (setq org-babel-default-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args))))

;; 几个重要的header args:
(help/set-org-babel-default-header-args :padline "yes")
(help/set-org-babel-default-header-args :mkdirp "yes")
(help/set-org-babel-default-header-args :comments "link")
#+end_src

*** enter
#+begin_src emacs-lisp
;; 禁用代码着色, 影响速度
;; (setq org-src-fontify-natively nil)

;; 编辑代码时在下方新开窗口
;;(setq org-src-window-setup 'split-window-below)
(setq org-src-window-setup 'current-window)
;;(setq org-src-window-setup 'reorganize-frame)
;;(setq org-src-window-setup 'other-frame)

;; 进入代码编辑模式, 改成容易按的
(map! :map org-mode-map
      :ni "C-c ;" #'org-edit-special
      :ni "C-c C-;" #'org-edit-special
      :localleader ";" #'org-edit-special
      )
#+end_src

*** toml
方便写Cargo.toml, 指定为toml为conf-toml-mode, 而不用写全 "conf-toml".
#+begin_src elisp
  ;; Add convenience lang alias for markdown blocks
  (add-to-list 'org-src-lang-modes '("toml" . conf-toml))
#+end_src

*** edit
- org-babel-demarcate-block: 可以用来将选中代码分割为不同的代码块.
- org-babel-do-key-sequence-in-edit-buffer: 在当前代码下直接执行src code语境下的命令

#+begin_src emacs-lisp
;; 用于激活 localleader
(add-hook 'org-src-mode-hook #'evil-normalize-keymaps)

;; 默认的不太好按. 不能用C-c C-c, 容易与别的模块冲突.
(map! :map org-src-mode-map
      "C-c ;"   #'org-edit-src-exit  ; 保存退出
      "C-c C-;" #'org-edit-src-exit  ; 保存退出
      "C-c C-k" #'org-edit-src-abort ; 放弃修改
      )
(map! :map org-src-mode-map
      :localleader
      ";" #'org-edit-src-exit
      "k" #'org-edit-src-abort
      )

(map! :map org-src-mode-map
      :leader
      ";" #'org-edit-src-exit
      )

(map! :map rust-mode-map
      :localleader
      "=" #'rust-format-buffer
      )
#+end_src

*** jump
从org文件跳转到tangled file
#+begin_src elisp
  ;; https://emacs.stackexchange.com/questions/50649/jumping-from-a-source-block-to-the-tangled-file
  (defun gwp/org-babel-tangle-jump-to-file ()
    "Jump to tangle file for the source block at point."
    (interactive)
    (let (file org-babel-pre-tangle-hook org-babel-post-tangle-hook)
      (cl-letf (((symbol-function 'write-region) (lambda (start end filename &rest _ignore)
                           (setq file filename)))
            ((symbol-function 'delete-file) #'ignore))
        (org-babel-tangle '(4)))
      (when file
        (setq file (expand-file-name file))
        (if (file-readable-p file)
        (find-file file)
      (error "Cannot open tangle file %S" file)))))
#+end_src

跳回来可用(需要配合src block name一起使用):
: org-babel-tangle-jump-to-org

将tangle file中的修改返回给org
: org-babel-detangle

还有一个https://github.com/mtekman/org-tanglesync.el. 但使用上有限制 [[https://github.com/mtekman/org-tanglesync.el/issues/13][issue 13]].
*** noweb
org-babel-expand-src-block (可以展开noweb macro)

*** tangle
注意: tangle-subtree时得注意, 可能会以部分内容覆盖总文件.
#+begin_src elisp
  ;; tangle blocks for current file at point
  ;; http://stackoverflow.com/questions/28727190/org-babel-tangle-only-one-code-block
  ;; call org-babel-tangle with C-u C-u
  (defun gwp/org-babel-tangle-blocks()
    (interactive)
    (let ((current-prefix-arg '(16)))
      (call-interactively 'org-babel-tangle)
      )
    )

  ;; narrow to subtree before calling org-babel-tangle
  (defun gwp/org-tangle-subtree()
    "tange src blocks in current subtree"
    (interactive)
    (org-narrow-to-subtree)
    (org-babel-tangle)
    (widen)
    )
#+end_src

如何在代码编辑窗口中tangle?
#+begin_src elisp
  (defun gwp/org-edit-save-and-tangle ()
    "when in a sub-editing buffer, swith to the parent buffer and tangle the file blocks"
    (interactive)
    (when (buffer-modified-p) (org-edit-src-save))
    (org-edit-src-exit)
    (call-interactively 'gwp/org-babel-tangle-blocks)
    (org-edit-src-code)
    )

  (defun gwp/org-babel-tangle-dwim()
    "tangle current file at point whenever in a sub-editing buffer or not"
    (interactive)
    (if (org-src-edit-buffer-p)
        (save-excursion
          (call-interactively 'gwp/org-edit-save-and-tangle)
          )
      (if (eq 'src-block (org-element-type (org-element-at-point)))
          (call-interactively 'gwp/org-babel-tangle-blocks)
        (message "not in source block")
        )
      )
    )
#+end_src

禁用当前代码块或整个headline. 还可以用 org-delete-property 删除 header-args
#+begin_src elisp
  (defun gwp/org-babel-tangle-no()
    (interactive)
    (if (eq 'src-block (org-element-type (org-element-at-point)))
      (org-babel-insert-header-arg "tangle" "no")
      (org-set-property "header-args" ":tangle no")
      )
    )
#+end_src

*** template
- http://orgmode.org/manual/Languages.html

#+begin_src emacs-lisp
  (with-eval-after-load 'ob
      (setq org-structure-template-alist
            '(
              ("py" . "src python :results output")
              ("rs" . "src rust")
              ("el" . "src emacs-lisp")
              ("sh" . "src sh")
            ))

    (defun gwp/org-babel-edit-structure-in-place (arg)
      "Insert source strcture and edit the source"
      (interactive "P")
      (call-interactively 'org-insert-structure-template)
      (call-interactively 'org-edit-src-code)
      )
   )
#+end_src

*** auto time-stamp
格式设置为类org-mode, 方便插入和修改. 参考: [[http://nullman.net/emacs/files/init-emacs.org][URL]]

#+begin_src emacs-lisp
  (with-eval-after-load "ob-tangle"
    ;; update timestamps on tangled files
    (setq time-stamp-pattern "100/UPDATED:[ \t]+\\\\?[\"<]+%:y-%02m-%02d %3a %02H:%02M\\\\?[\">]")
    (defun org-babel-post-tangle-hook--time-stamp ()
      "Update timestamps on tangled files."
      (time-stamp)
      (save-buffer))
    (add-hook 'org-babel-post-tangle-hook 'org-babel-post-tangle-hook--time-stamp))
#+end_src

** org-noter/pdf-view
pdf-view-fit-width-to-window
#+begin_src elisp
(use-package! org-noter
  :config
  (setq org-noter-default-notes-file-names '("annotation.note"))
  )

(after! pdf-tools
  (map! :map pdf-view-mode-map
        :localleader
        (:prefix ("n" . "org-noter")
          "n" #'org-noter
          "i" #'org-noter-insert-note
          "I" #'org-noter-insert-precise-note
          ))
  (map! :map pdf-view-mode-map
        [C-mouse-4] (lambda! (pdf-view-enlarge 1.10))
        [C-mouse-5] (lambda! (pdf-view-shrink 1.10))
        )
  )
#+end_src

** pairs
doom加了很多没用的pair, 比如 /, ~, *等. [2020-03-13 Fri] 折腾了一晚上才试好.

#+begin_src elisp :tangle pkg/.doom.d/packages.el
  (package! smartparens-org :ignore t)
#+end_src

#+begin_src elisp
  (after! smartparens-org
    (sp-with-modes '(org-mode)
      (sp-local-pair "/" nil :actions :rem)
      (sp-local-pair "=" nil :actions :rem)
      (sp-local-pair "~" nil :actions :rem)
      (sp-local-pair "*" nil :actions :rem)
      (sp-local-pair "_" nil :actions :rem)
      )
    )
#+end_src
** narrow
[[https://www.reddit.com/r/orgmode/comments/dbsngi/finally_solving_the_lack_of_a_treeview_navigation/][Finally solving the lack of a tree-view navigation window in Org : orgmode]]
#+begin_src elisp
(defun ap/org-tree-to-indirect-buffer (&optional arg)
  "Create indirect buffer and narrow it to current subtree.
The buffer is named after the subtree heading, with the filename
appended.  If a buffer by that name already exists, it is
selected instead of creating a new buffer."
  (interactive "P")
  (let* ((new-buffer-p)
         (pos (point))
         (buffer-name (let* ((heading (org-get-heading t t))
                             (level (org-outline-level))
                             (face (intern (concat "outline-" (number-to-string level))))
                             (heading-string (propertize (org-link-display-format heading)
                                                         'face face)))
                        (concat heading-string "::" (buffer-name))))
         (new-buffer (or (get-buffer buffer-name)
                         (prog1 (condition-case nil
                                    (make-indirect-buffer (current-buffer) buffer-name 'clone)
                                  (error (make-indirect-buffer (current-buffer) buffer-name)))
                           (setq new-buffer-p t)))))
    (switch-to-buffer new-buffer)
    (when new-buffer-p
      ;; I don't understand why setting the point again is necessary, but it is.
      (goto-char pos)
      (rename-buffer buffer-name)
      (org-narrow-to-subtree))))

(advice-add 'org-tree-to-indirect-buffer :override 'ap/org-tree-to-indirect-buffer)
#+end_src

** zotero/link
[[file:rust-modules/rust-modules.note][rust-module.note]]

#+begin_src elisp
;; rust-modules
(add-to-list 'load-path "/home/ybyygu/Workspace/Programming/emacs/rust-modules/target/debug")
(require 'zotero)

(defun gwp/org-open-zotero-attachment-at-point (arg)
  "Open zotero attachment"
  (interactive "P")

  (let ((ct (org-element-context)))
    (if (eq 'link (org-element-type ct))
        (let ((link (org-element-property :raw-link ct)))
          (when link
            (let ((path (zotero-get-attachment-path link)))
              (if path
                  (progn
                    (message "%s!" path)
                    (org-open-file path arg))
                (error "No attachments for item!"))))))))

;; since org 9
(org-link-set-parameters "zotero" :follow #'gwp/org-zotero-open :export #'gwp/org-zotero-export)

(defun gwp/org-zotero-open (path)
  (setq url (format "zotero:%s" path))
  (browse-url url))
#+end_src

** zotero/export
支持 "zotero" 链接的点击行为及odt导出.

bibtex更新了item link的格式.
之前的:
: zotero://select/items/1_WZKAZKJG
新的
: zotero://select/items/6974

#+begin_src emacs-lisp
(with-eval-after-load 'org-compat
  (defun gwp/org-zotero-export (path desc format)
    "Create the export version of zotero link specified by PATH and
DESC. FORMATs understood are 'odt','latex and 'html."
    (cond
     ((eq format 'html)
      (format "<a href=\"zotero:%s\">%s</a>" path desc))
     ((eq format 'latex)
      (format "\\href{zotero:%s}{%s}" path desc))
     ((eq format 'odt)
      ;; (format "<text:a xlink:type=\"simple\" xlink:href=\"zotero:%s\">%s</text:a>" path desc)
      (gwp/org-zotero-export-odt path desc)
      )
     (t desc)
     )
    )
  )

;;;; The magic string of zitem:
;; ZOTERO_ITEM CSL_CITATION
;; {
;; "properties": {
;; "formattedCitation": "[1]",
;; "plainCitation": "[1]"
;; },
;; "citationItems": [
;;                   {
;;                   "uri": [
;;                           "http://zotero.org/users/15074/items/S5JM4V35"
;;                           ]
;;                   }
;;                   ],
;; "schema": "https://github.com/citation-style-language/schema/raw/master/csl-citation.json"
;; } %s-rnd

;; adopted from https://www.mail-archive.com/emacs-orgmode@gnu.org/msg48905.html
(defun gwp/org-zotero-export-odt (path desc)
  (let
      ((refmark "<text:reference-mark-start text:name=\"%s\"/>%s<text:reference-mark-end text:name=\"%s\"/>")
       (zitem "ZOTERO_ITEM CSL_CITATION {
    &quot;properties&quot;: {
        &quot;formattedCitation&quot;: &quot;%s&quot;,
        &quot;plainCitation&quot;: &quot;%s&quot;
    },
    &quot;citationItems&quot;: [
        {
            &quot;uri&quot;: [
                &quot;http://zotero.org/users/15074/items/%s&quot;
            ]
        }
    ],
    &quot;schema&quot;: &quot;https://github.com/citation-style-language/schema/raw/master/csl-citation.json&quot;
} %s ")

       (item-key (car (cdr (split-string path "_"))))
       (rnd (concat "RND" (substring (org-id-new) -10))))
    (setq zitem
          (format zitem
                  desc
                  desc
                  item-key
                  rnd)
          )
    (setq desc (format "%s" desc))
    (format refmark zitem desc zitem))
  )

#+end_src

** odt export
odt导出时, 图表默认以大纲级别来编号. 对于中文文档, 如果章节以中文一二三编号时,
图表编号默认为一.1, 二.3. 这很古怪, 还是取消的好.

odt使用dvipng导出公式时生成的图片分辨率太低, 这里放大3倍, 然后通过设置odt dpi为
300(默认为96), 将image缩小为原始大小.

注意latex公式图片对应的目录ltxpng在ox-odt.el代码里写死了, 没法修改为其它的.

#+begin_src emacs-lisp
(use-package ox-odt
  :config
  (progn
    ;; continually numbering captions without outline level
    (setq org-odt-display-outline-level 0)

    ;; useful for odt export using dvipng
    (setq org-format-latex-options (plist-put org-format-latex-options :html-scale 3.0))
    (setq org-odt-pixels-per-inch 300.0)
    )
  )
#+end_src

由于手动换行的原因, odt导出时, 中文字符间会有多余的空格. 下面的设置用于解决这个问题:
#+begin_src emacs-lisp
;; adopted from https://github.com/tumashu/emacs-helper/blob/master/eh-org.el
(defun gwp/clear-unwanted-space (text)
  "clear unwanted space when exporting org-mode to other formats"
  (let ((regexp "[[:multibyte:]]")
        (string text))
    ;; org-mode 默认将一个换行符转换为空格，但中文不需要这个空格，删除。
    (setq string
          (replace-regexp-in-string
           (format "\\(%s\\) *\n *\\(%s\\)" regexp regexp)
           "\\1\\2" string))
    ;; 删除粗体之后的空格
    (dolist (str '("</b>" "</code>" "</del>" "</i>"))
      (setq string
            (replace-regexp-in-string
             (format "\\(%s\\)\\(%s\\)[ ]+\\(%s\\)" regexp str regexp)
             "\\1\\2\\3" string)))
    ;; 删除粗体之前的空格
    (dolist (str '("<b>" "<code>" "<del>" "<i>" "<span class=\"underline\">"))
      (setq string
            (replace-regexp-in-string
             (format "\\(%s\\)[ ]+\\(%s\\)\\(%s\\)" regexp str regexp)
             "\\1\\2\\3" string)))
    string)
  )

(defun gwp/ox-odt-wash-text (text backend info)
  "导出 org file 时，删除中文之间不必要的空格。"
  (when (org-export-derived-backend-p backend 'odt 'html 'latex)
    (gwp/clear-unwanted-space text)
    )
  )

(add-hook 'org-export-filter-headline-functions #'gwp/ox-odt-wash-text)
(add-hook 'org-export-filter-paragraph-functions #'gwp/ox-odt-wash-text)
#+end_src

** capture & protocol
占位符:
| %:link         | URL of the web-page       |
| %:description  | The title of the web-page |
| %:initial / %i | Selected text.            |

#+begin_src emacs-lisp
  (setq org-capture-templates
        '(
          ;; ("i" "interleave" plain (file "~/Incoming/annotation.note")
          ;;  "#+setupfile: ~/Notes/common.org\n#+ZOTERO_ITEM: %x\n#+INTERLEAVE_PDF: %?\n" :prepend t :kill-buffer t)
          ("n" "Note" entry (file "~/Notes/refile.note")
           "* %u %? [[%:link][%:description]]\n  %:initial\n" :prepend t)
          ("t" "Task" entry (file+headline "~/Notes/life.note" "Tasks")
           "* TODO %^T\n  %i" :prepend t)
          ("r" "Research Memo" entry (file+headline "~/Notes/research.note" "Memo")
           "* %u %?\n  %i\n" :prepend t)
          ("p" "Paper" entry (file+headline "~/Notes/research.note" "References")
           "* %u %? %x\n  %i\n" :prepend t)
          ("j" "Life Journal" entry (file+headline "~/Notes/life.note" "Journals")
           "* %u %?\n  %i\n" :prepend t)
          )
        )
#+end_src

** encryption
#+begin_src emacs-lisp
(require 'org-crypt)
(require 'epa-file)
(epa-file-enable)

;; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-crypt-tag-matcher "crypt")
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
                                        ; GPG key to use for encryption
(setq org-crypt-key "38D95BC6411A87E7") ; ybyygu@gmail.com
(setq org-crypt-disable-auto-save nil)
#+end_src

** org-attach
*** setup
#+begin_src emacs-lisp
  (require 'org-attach)
#+end_src

*** copy & paste attachments
添加附件时生成指向附件的路径, 方便org-insert-link添加.
#+begin_src emacs-lisp
  (setq org-attach-store-link-p 'attached)
#+end_src

使用软链接保存当前entry的附件目录. 注意make-symbolic-link的特殊性:
- 如果dest是个目录, 会在目录下建立目录
- 如果dest是个文件或symlink, 会报错

file-exists-p函数对symlink的特殊性:
- 如果测试目标是个boken symlink, 该函数返回nil
- 此外后续再symlink, 仍然会报错.

#+begin_src emacs-lisp
  ;; 1. store the directory
  (defun gwp/org-attach-store (&optional force)
    "store org attachment directory of current enetry"
    (interactive "P")
    ;; make a temporary symlink to store the attachment path
    (setq file-attach-tmp (concat spacemacs-cache-directory ".gwp-attach-tmp"))
    (let ((attach-dir (org-attach-dir)))
      (when attach-dir
        (progn
          ;; remove existing directory
          (when (file-directory-p file-attach-tmp) (delete-directory file-attach-tmp t))
          ;; remove existing file and symlink
          (when (file-exists-p file-attach-tmp) (delete-file file-attach-tmp))
          ;; remove broken symlink
          (when (file-symlink-p file-attach-tmp) (delete-file file-attach-tmp))
          (make-symbolic-link attach-dir file-attach-tmp)
          (message (format "stored to: %s" file-attach-tmp))
          )
        )
      )
    )
#+end_src

从存储的软链接中读取之前的entry的附件, 并移动到当前entry的附件目录里.
#+begin_src emacs-lisp
  ;; 2. move the stored directory to new location
  (defun gwp/org-attach-move (&optional force)
    "move stored attachments to current entry"
    (interactive "P")
    ;; ~/.emacs.d/.cache/.gwp-attach-tmp
    (setq file-attach-tmp (concat spacemacs-cache-directory ".gwp-attach-tmp"))

    (if (file-exists-p file-attach-tmp)
        ;; create attachment directory if not exists using org-attach-dir function
        (let ((attach-dir (org-attach-dir t)))
          (progn
            ;; read old attach directory from previous stored symlink
            (setq attach-dir-old (file-chase-links file-attach-tmp))
            ;; sanity check
            (if (y-or-n-p (format "%s/* ==> %s ?" attach-dir-old attach-dir))
                (progn
                  (shell-command (format "mv %s/* %s" attach-dir-old attach-dir))
                  ;; remove stale tmp-link
                  (delete-file file-attach-tmp)
                  )
              (message "cancelled")
              )
            )
          )
      (message (format "no stored symbolic link found: %s" file-attach-tmp))
      )
    )
#+end_src

*** take file link as attachment
[2020-03-21 Sat] org里有对应的功能: [[file:doom-emacs/.local/straight/repos/org-mode/contrib/lisp/org-attach-embedded-images.el][org-attach-embedded-images.el]]
**** 从当前位置文件链接提取文件名.
#+begin_src emacs-lisp
(defun gwp/org-file-link-p (&optional element)
  (let ((el (or element (org-element-context))))
    (and (eq (org-element-type el) 'link)
         (or
          (string= (org-element-property :type el) "file")
          (string= (org-element-property :type el) "attachment")
          ))))

(defun gwp/org-file-path-at-point()
  "get file path from link at point"
  (let ((el (org-element-context)))
    (when (eq (org-element-type el) 'link)
      (cond
       ((string= (org-element-property :type el) "file") (org-element-property :path el))
       ((string= (org-element-property :type el) "attachment") (org-attach-expand (org-element-property :path el)))
       (t nil)
       ))))
#+end_src

**** 使用org-attach将文件move到当到附录中并更新文件链接
#+begin_src emacs-lisp
  ;; (require 'org-download)

  (defun gwp/org-store-link-without-desc (file)
    "store file link without the description part -- a tweak to make odt image exporting correct."
    (setq org-stored-links
          (cons (list (org-attach-expand-link (file-name-nondirectory file)) "")
                org-stored-links)
          )
    )

  (defun gwp/org-take-as-local-attachment ()
    "move file link at point as local attachment"
    (interactive)
    (let ((file (gwp/org-file-path-at-point)))
      (if file
          (progn
            ;; 1. store the file using copy
            ;; or we can use the mv method: (org-attach-attach file nil 'mv)
            ;; do not store file link since it will corrupt odt image exporting
            (let ((org-attach-store-link-p nil))
              (org-attach-attach file))
            ;; 2. remove the old
            (call-interactively 'org-download-delete)
            ;; 3. insert the new
            ;; use file name as the default caption
            (gwp/org-insert-image-attributes (file-name-sans-extension (file-name-nondirectory file)))
            (insert "\n")
            (gwp/org-store-link-without-desc file)
            (call-interactively 'org-insert-last-stored-link)
            ;; refresh the image if possbile
            (org-display-inline-images)
           )
        (user-error "Point is not on a link")
        )
      )
    )
#+end_src

*** delete link file
删除当前所在链接对应的文件. org-download-delete现在不可用(attachment link).
#+begin_src elisp
(defun gwp/org-delete-link-file (arg)
  "Delete the file that link points to."
  (interactive "P")

  (let ((file (gwp/org-file-path-at-point)))
    (if file
        (if (file-exists-p file)
            (when (yes-or-no-p (format "Delete link file: %s?" file))
              (progn (delete-file file)
                     (message "File deleted"))
              )
          (error "No such attachment: %s" file))
      (user-error "Point is not on a file link")
      )))
#+end_src

** refile
refile流程:
- 打开refile.note
- 检查其中的条目, 找到可能的合适的归档note文件, 打开之.
- SPC-m-r-r, org-refile
 
#+BEGIN_SRC emacs-lisp
  (defun gwp/org-get-refile-targets ()
    "Return the list of files currently opened in emacs"
    (delq nil
          (mapcar (lambda (x)
                    (if (and (buffer-file-name x)
                             (string-match "\\.note$"
                                           (buffer-file-name x)))
                        (buffer-file-name x)))
                  (buffer-list))))

  ;; (setq org-refile-targets '((org-agenda-files :tag . "Incoming")))
  (setq org-refile-targets '((gwp/org-get-refile-targets :tag . "Incoming")))

  (setq org-reverse-note-order t)
  (defun gwp/get-org-file-link-path ()
    (save-excursion
      (beginning-of-line)
      (search-forward "[[file:" (line-end-position))
      (if (org-in-regexp org-bracket-link-regexp 1)
          (org-link-unescape (match-string-no-properties 1))
        )
      )
    )

  (defun gwp/enter-to-read-state()
    "evoke external shell script when entering READ state"
    (when (equal org-state "READ")
      (setq file (gwp/get-org-file-link-path))
      (if file
          (progn
            (setq cmd (concat "org-to-read.sh " (shell-quote-argument file)))
            (message cmd)
            (shell-command cmd)
            )
        )
      )
    (when (equal org-last-state "READ")
      (message "try to remove READ state")
      (setq file (gwp/get-org-file-link-path))
      (if file
          (progn
            (setq cmd (concat "org-read-done.sh " (shell-quote-argument file)))
            (message cmd)
            (shell-command cmd)
            )
        )
      )
    )
  (add-hook 'org-after-todo-state-change-hook 'gwp/enter-to-read-state)

  ;; show a sparse-tree in READ keyword
  (defun gwp/org-show-read-tree ()
    "show a sparse-tree in READ keyword"
    (interactive)

    (let ((base-vector [?\C-u ?\M-x ?o ?r ?g ?- ?s ?h ?o ?w ?- ?t ?o ?d ?o ?- ?t ?r ?e ?e return ?R ?E ?A ?D return]))
      ;; create new macro of the form
      ;; C-u M-x org-show-todo-tree RET READ RET
      (execute-kbd-macro (vconcat base-vector
                                  (vector 'return)))))
#+END_SRC

** agenda
基本设置
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org-agenda
    ;; 2013-01-20: less is more
    ;; (setq org-agenda-files (append (file-expand-wildcards "~/Notes/*.note") (file-expand-wildcards "~/Notes/*/*.note")))
    (setq org-agenda-files "~/Notes/.agenda_files")

    ;; the default is todo-start
    (setq org-icalendar-use-scheduled (quote (event-if-not-todo event-if-todo todo-start)))
    (setq org-icalendar-alarm-time 5)

    ;; Show all future entries for repeating tasks
    (setq org-agenda-repeating-timestamp-show-all t)

    ;; do not show agenda dates if they are empty
    (setq org-agenda-show-all-dates nil)

    ;; Sorting order for tasks on the agenda
    (setq org-agenda-sorting-strategy
          (quote ((agenda time-up priority-down category-up)
                  (todo priority-down)
                  (tags priority-down))))

    ;; Start the weekly agenda today
    (setq org-agenda-start-on-weekday nil)

    ;; do not include todo items
    (setq org-agenda-include-all-todo nil)
    )
#+END_SRC

忽略已经完成的任务
#+begin_src emacs-lisp
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)
#+end_src

自定义agenda命令
#+begin_src emacs-lisp
  (with-eval-after-load 'org-agenda
    (setq org-agenda-custom-commands
                 '(
                   ("g" . "GTD contexts") ; description for "g" prefix
                   )
                 )
    ;; project overview
    (add-to-list 'org-agenda-custom-commands
                 '("gp" "Project"
                   (
                    (tags "Project+Action+TODO=\"TODO\""
                          (
                           (org-agenda-overriding-header "Project\n------------------")
                           (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                           )
                          )
                    (tags "Action+Study+TODO=\"TODO\""
                          (
                           (org-agenda-overriding-header "Topics\n------------------")
                           (org-agenda-files '("~/Notes/research.note"))
                           (org-agenda-sorting-strategy '(priority-down timestamp-up))
                           (org-agenda-max-entries 5)
                           )
                          )
                    (tags "Action+TODO=\"TODO\""
                          (
                           (org-agenda-overriding-header "生活琐事\n------------------")
                           (org-agenda-files '("~/Notes/life.note"))
                           (org-agenda-sorting-strategy '(priority-down timestamp-up))
                           (org-agenda-max-entries 5)
                           )
                          )
                    ;; (tags "Computer+TODO=\"TODO\""
                    ;;       (
                    ;;        (org-agenda-overriding-header "电脑调优\n------------------")
                    ;;        (org-agenda-sorting-strategy '(priority-down timestamp-up))
                    ;;        (org-agenda-max-entries 5)
                    ;;        )
                    ;;       )
                    )
                   ;; options set here apply to the entire block
                   (
                    (org-tags-match-list-sublevels nil)
                    (org-agenda-prefix-format "%-20c ")
                    (org-agenda-todo-keyword-format "")
                    (org-agenda-remove-tags t)
                    (org-agenda-compact-blocks t)
                    )
                   )
                 )

    (add-to-list 'org-agenda-custom-commands
                 '("gr" "Reading"
                   (
                    (tags-todo "Reading|Read"
                               (
                                (org-agenda-overriding-header "待读列表\n------------------")
                                (org-agenda-sorting-strategy '(category-keep priority-down))
                                (org-agenda-remove-tags t)
                                (org-agenda-compact-blocks t)
                                )
                               )
                    (tags "REFILE"
                          (
                           (org-agenda-overriding-header "Tasks to Refile\n------------------")
                           (org-tags-match-list-sublevels nil)
                           )
                          )
                    )
                   ;; options set here apply to the entire block
                   ((org-agenda-compact-blocks t))
                   )
                 )

    (add-to-list 'org-agenda-custom-commands
                 '("gt" "Tasks"
                   (
                    (agenda ""
                            (
                             ;; (org-agenda-entry-types '(:deadline :scheduled))
                             (org-agenda-span (quote month)) ;; or (org-agenda-span 90)
                             (org-agenda-include-diary nil)
                             (org-agenda-overriding-header "Agenda\n------------------")
                             )
                            )
                    ;; (tags "ASAP+TODO=\"TODO\""
                    (tags-todo "ASAP"
                          (
                           (org-agenda-entry-types '(:timestamp))
                           (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                           (org-agenda-overriding-header "\nASAP\n------------------")
                           (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                           (org-agenda-max-entries 20)
                           (org-agenda-prefix-format "%-12c ")
                           (org-agenda-compact-blocks t)
                           )
                          )
                    )
                   ;; options set here apply to the entire block
                   (
                    (org-tags-match-list-sublevels nil)
                    ;; (org-agenda-files '("~/Notes/research.note" "~/Notes/life.note"))
                    (org-agenda-todo-keyword-format "")
                    (org-agenda-remove-tags t)
                    )
                   ;; agenda view exported with: Ctrl-C a e
                   ("~/Notes/agenda.html" "~/Notes/agenda.txt")
                   )
                 )
    )
#+end_src

后台自动导出日程. 暂时禁用
#+BEGIN_SRC emacs-lisp :tangle no
  ;; disabled for upgrading to org-9.0
  ;; auto export agenda
  (defun gwp/run-agenda-store ()
    ""
    (message "Exporting agenda... ")
    (org-batch-store-agenda-views)
    (message "Agenda exported."))

  ;; export agenda if I am away for 2 minutes
  (run-with-idle-timer 600 t 'gwp/run-agenda-store)
#+END_SRC

闲时显示日程. 有兼容性问题, 暂时禁用.
#+begin_src emacs-lisp :tangle no
  (use-package idle-org-agenda
    :after org-agenda
    :ensure t
    :config (idle-org-agenda-mode))

  (custom-set-variables
   '(idle-org-agenda-interval 600) ;; 10 x 60 seconds
   '(idle-org-agenda-key "gt")     ;; Choose your specific agenda
   '(idle-org-agenda-mode t)
   )
#+end_src
** org-file-apps
使用gnome打开odt文件. 不太灵.

#+begin_src elisp :tangle no
  (add-to-list 'org-file-apps
               (quote (
                       ("\\.odt\\'" . system)
                       )))
#+end_src

** misc
Org links to Unix man pages [[http://orgmode.org/manual/Adding-hyperlink-types.html][doc]]
#+begin_src emacs-lisp
  ;; (require 'org-man)
#+end_src

禁用*bold*等标注的字体效果. 写代码时容易弄花显示. 比如__init__.
#+begin_src emacs-lisp
  (setq org-fontify-emphasized-text nil)
#+end_src

#+begin_src emacs-lisp :tangle no
  (defun gwp/org-confirm-babel-evaluate (lang body)
    (not (string= lang "python")))  ; don't ask for python
  (setq org-confirm-babel-evaluate 'gwp/org-confirm-babel-evaluate)
#+end_src

自动保存编辑的代码. [2018-12-17 Mon] will cause timerp error
#+begin_src emacs-lisp :tangle no
  ;; saving a source code buffer back into its base buffer
  (setq org-edit-src-auto-save-idle-delay 1)
#+end_src

** bindings
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      (:prefix ("b" . "org-babel")
        :desc "check src block headers"    "c" #'org-babel-check-src-block
        :desc "insert header argument"     "i" #'org-babel-insert-header-arg
        :desc "view header arguments"      "I" #'org-babel-view-src-block-info
        :desc "demarcate block"            "d" #'org-babel-demarcate-block
        :desc "edit src codes in place"    "s" #'gwp/org-babel-edit-structure-in-place
        :desc "jump to tangled file"       "j" #'gwp/org-babel-tangle-jump-to-file
        :desc "insert header tangle no"    "n" #'gwp/org-babel-tangle-no
        :desc "execute in edit buffer"     "x" #'org-babel-do-key-sequence-in-edit-buffer
        :desc "tangle blocks at point"     "b" #'gwp/org-babel-tangle-dwim
        :desc "tangle blocks in subtree"   "t" #'gwp/org-tangle-subtree
        :desc "tangle blocks in buffer"    "T" #'org-babel-tangle
        )
      (:prefix ("l" . "links")
        "D" #'gwp/org-delete-link-file)
      )

(map! :map org-mode-map
      :localleader
      :desc "preview inline images"       "I"   #'org-toggle-inline-images
      :desc "preview latex fragments"     "L"     #'org-latex-preview
      :desc "preview inline images"       "C-v"   #'org-toggle-inline-images
      :desc "preview latex fragments"     "C-l"   #'org-latex-preview
      :desc "Move to next link"           "C-n"   #'org-next-link
      :desc "Move to prev link"           "C-p"   #'org-previous-link
      :desc "Move to next link"           [tab]   #'org-next-link
      :desc "Move to prev link"           [backtab]   #'org-previous-link
      :desc "preview inline images"       "I"   #'org-toggle-inline-images
      )

(map! :map org-mode-map
      :leader
      :desc "tangle blocks at point"      "o b" #'gwp/org-babel-tangle-dwim
      :desc "execute in edit buffer"      "SPC" #'org-babel-do-key-sequence-in-edit-buffer
      :desc "org-babel"                   "a"   org-babel-map;  换个容易按的键位
      :desc "Enter-dwim"                  "RET" #'gwp/dwim-at-point
      )

(map! :map org-mode-map
      :localleader
      ;; FIXME: 与doom/org定义有冲突
      (:prefix ("s" . "Subtree")
        :desc "Demote" "l" #'org-demote-subtree
        :desc "Promote" "h" #'org-promote-subtree
        :desc "Archive" "A" #'org-archive-subtree
        ;; :desc "Narrow" "n" #'org-tree-to-indirect-buffer ; 比org-toggle-narrow-to-subtree更好用些
        :desc "Narrow" "n" #'ap/org-tree-to-indirect-buffer
        :desc "Toggle org-sidebar-tree" "t" #'org-sidebar-tree-toggle
        )
      (:prefix ("SPC" . "Special")
        :desc "org-ctrl-c-star" "s" #'org-ctrl-c-star ; 方便盲按
        :desc "Insert new memo entry" "m" #'gwp/new-memo ; 简化操作
        )
      )
(map! :map org-mode-map
      :localleader
      (:prefix ("g" . "Goto")
        :desc "Goto the previous position"  "p" #'org-mark-ring-goto
        :desc "Jump to org heading"  "j" #'counsel-org-goto
        :desc "Goto named src block" "b" #'org-babel-goto-named-src-block
        )
      )
#+end_src

org-sidebar
#+begin_src elisp
(map! :map org-sidebar-tree-map
      :localleader
      :n "RET" #'org-sidebar-tree-jump
      :n [return] #'org-sidebar-tree-jump
      )
#+end_src
* bindings.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/bindings.el :comments nil
:END:
** docs
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#map][doom-emacs/api: map!]]

从doom config module中取出, 禁用Tab键相关设置, 修复按键Bug.

此文件在config.el中使用load!宏来加载

: /home/ybyygu/Workspace/Programming/emacs/doom-emacs/modules/config/default/packages.el

** new/template
#+begin_src emacs-lisp :tangle no
(map! :leader
    )
#+end_src

** header
#+begin_src emacs-lisp
;;; config/default/+bindings.el -*- lexical-binding: t; -*-
;;
;;; Global keybindings
;;
#+end_src

** leader/main
#+begin_src elisp
(map! :leader
      ;; :desc "Eval expression"       ";"    #'pp-eval-expression
      :desc "M-x"                   ":"    #'execute-extended-command
      :desc "Pop up scratch buffer" "x"    #'doom/open-scratch-buffer
      :desc "Org Capture"           "X"    #'org-capture

      ;; C-u is used by evil
      :desc "Universal argument"    "u"    #'universal-argument
      :desc "window"                "w"    evil-window-map
      :desc "frame"                 "W"    ctl-x-5-map ; 换个容易按的键位
      :desc "help"                  "h"    help-map

      (:when (featurep! :ui popup)
        :desc "Toggle last popup"     "~"    #'+popup/toggle)
      :desc "Find file"             "."    #'find-file

      :desc "Switch buffer"         ","    #'switch-to-buffer
      (:when (featurep! :ui workspaces)
        :desc "Switch workspace buffer" "," #'persp-switch-to-buffer
        :desc "Switch buffer"           "<" #'switch-to-buffer)

      :desc "Switch to last buffer" "`"    #'evil-switch-to-windows-last-buffer

      :desc "Search for symbol in project" "*" #'+default/search-project-for-symbol-at-point
      )
#+end_src

** leader/workspace
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> l --- workspace
      (:when (featurep! :ui workspaces)
        (:prefix-map ("l" . "workspace")
          :desc "Load workspace from file"  "l"   #'+workspace/load
          :desc "Save workspace to file"    "s"   #'+workspace/save
          :desc "Delete this workspace"     "d"   #'+workspace/delete
          :desc "Next workspace"            "n"   #'+workspace/switch-right
          :desc "Previous workspace"        "p"   #'+workspace/switch-left
          :desc "Switch to last workspace"  "b"   #'+workspace/other
          :desc "Display tab bar"           "."   #'+workspace/display
          :desc "Switch workspace"          "TAB" #'+workspace/switch-to
          :desc "New workspace"             "N"   #'+workspace/new
          :desc "Delete session"            "x"   #'+workspace/kill-session
          :desc "Rename workspace"          "r"   #'+workspace/rename
          :desc "Restore last session"      "R"   #'+workspace/restore-last-session
          :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
          :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
          :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
          :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
          ))
      )
#+end_src

** leader/notes
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> n --- notes
      (:prefix-map ("n" . "notes")
        :desc "Search notes for symbol"      "*" #'+default/search-notes-for-symbol-at-point
        :desc "Org agenda"                   "a" #'org-agenda
        :desc "Toggle org-clock"             "c" #'+org/toggle-clock
        :desc "Cancel org-clock"             "C" #'org-clock-cancel
        :desc "Open deft"                    "d" #'deft
        :desc "Find file in notes"           "f" #'+default/find-in-notes
        :desc "Browse notes"                 "F" #'+default/browse-notes
        :desc "Org store link"               "l" #'org-store-link
        :desc "Tags search"                  "m" #'org-tags-view
        :desc "Org capture"                  "n" #'org-capture
        :desc "Active org-clock"             "o" #'org-clock-goto
        :desc "Todo list"                    "t" #'org-todo-list
        ;; :desc "Search notes"                 "s" #'+default/org-notes-search
        :desc "Search all notes"             "s" #'gwp/search-all-notes
        :desc "Search org agenda headlines"  "S" #'+default/org-notes-headlines
        :desc "View search"                  "v" #'org-search-view
        :desc "Org export to clipboard"        "y" #'+org/export-to-clipboard
        :desc "Org export to clipboard as RTF" "Y" #'+org/export-to-clipboard-as-rich-text

        (:when (featurep! :lang org +journal)
          (:prefix ("j" . "journal")
            :desc "New Entry"      "j" #'org-journal-new-entry
            :desc "Search Forever" "s" #'org-journal-search-forever)))
      )
#+end_src

** leader/buffer
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> b --- buffer
      (:prefix-map ("b" . "buffer")
        :desc "Toggle narrowing"            "-"   #'doom/toggle-narrow-buffer
        :desc "Previous buffer"             "["   #'previous-buffer
        :desc "Next buffer"                 "]"   #'next-buffer
        (:when (featurep! :ui workspaces)
          :desc "Switch workspace buffer" "b" #'persp-switch-to-buffer
          :desc "Switch buffer"           "B" #'switch-to-buffer)
        (:unless (featurep! :ui workspaces)
          :desc "Switch buffer"           "b" #'switch-to-buffer)
        :desc "Kill buffer"                 "d"   #'kill-current-buffer
        :desc "Kill buffer"                 "k"   #'kill-current-buffer
        :desc "ibuffer"                     "i"   #'ibuffer
        :desc "Kill all buffers"            "K"   #'doom/kill-all-buffers
        :desc "Switch to last buffer"       "l"   #'evil-switch-to-windows-last-buffer
        :desc "Set bookmark"                "m"   #'bookmark-set
        :desc "Delete bookmark"             "M"   #'bookmark-delete
        :desc "Next buffer"                 "n"   #'next-buffer
        :desc "New empty buffer"            "N"   #'evil-buffer-new
        :desc "Kill other buffers"          "O"   #'doom/kill-other-buffers
        :desc "Previous buffer"             "p"   #'previous-buffer
        :desc "Revert buffer"               "r"   #'revert-buffer
        :desc "Save buffer"                 "s"   #'basic-save-buffer
        :desc "Save all buffers"            "S"   #'evil-write-all
        :desc "Save buffer as root"         "u"   #'doom/sudo-save-buffer
        :desc "Pop up scratch buffer"       "x"   #'doom/open-scratch-buffer
        :desc "Switch to scratch buffer"    "X"   #'doom/switch-to-scratch-buffer
        :desc "Bury buffer"                 "z"   #'bury-buffer
        :desc "Kill buried buffers"         "Z"   #'doom/kill-buried-buffers)
    )
#+end_src

** leader/code
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> c --- code
      (:prefix-map ("c" . "code")
        :desc "indent region"                         "TAB" #'indent-region
        :desc "indent region"                         [tab] #'indent-region
        :desc "LSP Execute code action"               "a"   #'lsp-execute-code-action
        :desc "Compile"                               "c"   #'compile
        :desc "Recompile"                             "C"   #'recompile
        :desc "Jump to definition"                    "d"   #'+lookup/definition
        :desc "Jump to references"                    "D"   #'+lookup/references
        :desc "Evaluate buffer/region"                "e"   #'+eval/buffer-or-region
        :desc "Evaluate & replace region"             "E"   #'+eval:replace-region
        :desc "Format buffer/region"                  "f"   #'+format/region-or-buffer
        :desc "Comment or uncomment lines"            "l"   #'evilnc-comment-or-uncomment-lines
        :desc "Open vterm"                            "t"   #'vterm-toggle
        :desc "Copy & comment"                        "y"   #'evilnc-copy-and-comment-lines
        :desc "LSP Format buffer/region"              "F"   #'+default/lsp-format-region-or-buffer
        :desc "LSP Organize imports"                  "i"   #'lsp-organize-imports
        (:when (featurep! :completion ivy)
          :desc "Jump to symbol in current workspace" "j"   #'lsp-ivy-workspace-symbol
          :desc "Jump to symbol in any workspace"     "J"   #'lsp-ivy-global-workspace-symbol)
        (:when (featurep! :completion helm)
          :desc "Jump to symbol in current workspace" "j"   #'helm-lsp-workspace-symbol
          :desc "Jump to symbol in any workspace"     "J"   #'helm-lsp-global-workspace-symbol)
        :desc "Jump to documentation"                 "k"   #'+lookup/documentation
        :desc "LSP Rename"                            "r"   #'lsp-rename
        ;; :desc "Send to repl"                          "s"   #'+eval/send-region-to-repl
        :desc "Send to repl"                          "s"   #'gwp/tmux-ipython-paste-region
        :desc "Delete trailing whitespace"            "w"   #'delete-trailing-whitespace
        :desc "Delete trailing newlines"              "W"   #'doom/delete-trailing-newlines
        :desc "List errors"                           "x"   #'flymake-show-diagnostics-buffer
        (:when (featurep! :checkers syntax)
          :desc "List errors"                         "x"   #'flycheck-list-errors))
    )
#+end_src

** leader/file
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> f --- file
      (:prefix-map ("f" . "file")
        :desc "Open bookmarks"              "b"   #'counsel-bookmark
        :desc "Open project editorconfig"   "c"   #'editorconfig-find-current-editorconfig
        :desc "Copy this file"              "C"   #'doom/copy-this-file
        :desc "Find directory"              "d"   #'dired
        :desc "Delete this file"            "D"   #'doom/delete-this-file
        :desc "Find file in emacs.d"        "e"   #'+default/find-in-emacsd
        :desc "Browse emacs.d"              "E"   #'+default/browse-emacsd
        :desc "Find file"                   "f"   #'find-file
        :desc "Find file from here"         "F"   #'+default/find-file-under-here
        :desc "Jump to Dired buffer"        "j"   #'dired-jump
        :desc "Locate file"                 "l"   #'locate
        :desc "Open file/dir externally"    "o"   #'spacemacs/open-file-or-directory-in-external-app
        :desc "Find file in private config" "p"   #'doom/find-file-in-private-config
        :desc "Browse private config"       "P"   #'doom/open-private-config
        :desc "Recent files"                "r"   #'recentf-open-files
        :desc "Rename/move file"            "R"   #'doom/move-this-file
        :desc "Save file"                   "s"   #'save-buffer
        :desc "Save file as..."             "S"   #'write-file
        :desc "Sudo find file"              "u"   #'doom/sudo-find-file
        :desc "Sudo this file"              "U"   #'doom/sudo-this-file
        :desc "Yank filename"               "y"   #'+default/yank-buffer-filename)

    )
#+end_src

** leader/git
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> g --- git
      (:prefix-map ("g" . "git")
        :desc "Git revert file"             "R"   #'vc-revert
        :desc "Copy link to remote"         "y"   #'+vc/browse-at-remote-kill-file-or-region
        :desc "Copy link to homepage"       "Y"   #'+vc/browse-at-remote-kill-homepage
        (:when (featurep! :ui hydra)
          :desc "SMerge"                    "m"   #'+vc/smerge-hydra/body)
        (:when (featurep! :ui vc-gutter)
          :desc "Git revert hunk"           "r"   #'git-gutter:revert-hunk
          :desc "Git stage hunk"            "s"   #'git-gutter:stage-hunk
          :desc "Git time machine"          "t"   #'git-timemachine-toggle
          :desc "Jump to next hunk"         "]"   #'git-gutter:next-hunk
          :desc "Jump to previous hunk"     "["   #'git-gutter:previous-hunk)
        (:when (featurep! :gwp magit)
          :desc "Manage dotfiles (yadm)"    "."   (lambda! (magit-status "/yadm::"))
          :desc "Magit dispatch"            "/"   #'magit-dispatch
          :desc "Forge dispatch"            "'"   #'forge-dispatch
          :desc "Magit switch branch"       "b"   #'magit-branch-checkout
          :desc "Magit status"              "g"   #'magit-status
          :desc "Magit file delete"         "D"   #'magit-file-delete
          :desc "Magit blame"               "B"   #'magit-blame-addition
          :desc "Magit clone"               "C"   #'magit-clone
          :desc "Magit fetch"               "F"   #'magit-fetch
          :desc "Magit buffer log"          "L"   #'magit-log
          :desc "Git stage file"            "S"   #'magit-stage-file
          :desc "Git unstage file"          "U"   #'magit-unstage-file
          (:prefix ("f" . "find")
            :desc "Find file"                 "f"   #'magit-find-file
            :desc "Find gitconfig file"       "g"   #'magit-find-git-config-file
            :desc "Find commit"               "c"   #'magit-show-commit
            :desc "Find issue"                "i"   #'forge-visit-issue
            :desc "Find pull request"         "p"   #'forge-visit-pullreq)
          (:prefix ("o" . "open in browser")
            :desc "Browse file or region"     "o"   #'browse-at-remote
            :desc "Browse homepage"           "h"   #'+vc/browse-at-remote-homepage
            :desc "Browse remote"             "r"   #'forge-browse-remote
            :desc "Browse commit"             "c"   #'forge-browse-commit
            :desc "Browse an issue"           "i"   #'forge-browse-issue
            :desc "Browse a pull request"     "p"   #'forge-browse-pullreq
            :desc "Browse issues"             "I"   #'forge-browse-issues
            :desc "Browse pull requests"      "P"   #'forge-browse-pullreqs)
          (:prefix ("l" . "list")
            (:when (featurep! :tools gist)
              :desc "List gists"              "g"   #'+gist:list)
            :desc "List repositories"         "r"   #'magit-list-repositories
            :desc "List submodules"           "s"   #'magit-list-submodules
            :desc "List issues"               "i"   #'forge-list-issues
            :desc "List pull requests"        "p"   #'forge-list-pullreqs
            :desc "List notifications"        "n"   #'forge-list-notifications)
          (:prefix ("c" . "create")
            :desc "Initialize repo"           "r"   #'magit-init
            :desc "Clone repo"                "R"   #'magit-clone
            :desc "Commit"                    "c"   #'magit-commit-create
            :desc "Fixup"                     "f"   #'magit-commit-fixup
            :desc "Branch"                    "b"   #'magit-branch-and-checkout
            :desc "Issue"                     "i"   #'forge-create-issue
            :desc "Pull request"              "p"   #'forge-create-pullreq)))
      )
#+end_src

** leader/open
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> o --- open
      (:prefix-map ("o" . "open")
        :desc "Org agenda"       "A"  #'org-agenda
        (:prefix ("a" . "org agenda")
          :desc "Agenda"         "a"  #'org-agenda
          :desc "Todo list"      "t"  #'org-todo-list
          :desc "Tags search"    "m"  #'org-tags-view
          :desc "View search"    "v"  #'org-search-view)
        :desc "Start debugger"     "d"  #'+debugger/start
        :desc "New frame"          "f"  #'make-frame
        :desc "REPL"               "r"  #'+eval/open-repl-other-window
        :desc "REPL (same window)" "R"  #'+eval/open-repl-same-window
        :desc "Dired"              "-"  #'dired-jump
        (:when (featurep! :ui neotree)
          :desc "Project sidebar"              "p" #'+neotree/open
          :desc "Find file in project sidebar" "P" #'+neotree/find-this-file)
        (:when (featurep! :ui treemacs)
          :desc "Project sidebar" "p" #'+treemacs/toggle
          :desc "Find file in project sidebar" "P" #'+treemacs/find-file)
        (:when (featurep! :term shell)
          :desc "Toggle shell popup"    "t" #'+shell/toggle
          :desc "Open shell here"       "T" #'+shell/here)
        (:when (featurep! :term term)
          :desc "Toggle terminal popup" "t" #'+term/toggle
          :desc "Open terminal here"    "T" #'+term/here)
        (:when (featurep! :term vterm)
          :desc "Toggle vterm popup"    "t" #'+vterm/toggle
          :desc "Open vterm here"       "T" #'gwp/open-terminal-here)
        (:when (featurep! :term eshell)
          :desc "Toggle eshell popup"   "e" #'+eshell/toggle
          :desc "Open eshell here"      "E" #'+eshell/here)
        (:when (featurep! :tools docker)
          :desc "Docker" "D" #'docker))
    )
#+end_src
** leader/insert
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> i --- insert
      (:prefix-map ("i" . "insert")
        :desc "Current file name"             "f"   #'+default/insert-file-path
        :desc "Current file path"             "F"   (λ!! #'+default/insert-file-path t)
        :desc "Evil ex path"                  "p"   (λ! (evil-ex "R!echo "))
        :desc "From evil register"            "r"   #'evil-ex-registers
        :desc "Snippet"                       "s"   #'yas-insert-snippet
        :desc "Unicode"                       "u"   #'unicode-chars-list-chars
        :desc "From clipboard"                "y"   #'+default/yank-pop)
    )
#+end_src

** leader/project
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> p --- project
      (:prefix-map ("p" . "project")
        :desc "Browse project"               "." #'+default/browse-project
        :desc "Browse other project"         ">" #'doom/browse-in-other-project
        :desc "Run cmd in project root"      "!" #'projectile-run-shell-command-in-root
        :desc "Add new project"              "a" #'projectile-add-known-project
        :desc "Switch to project buffer"     "b" #'projectile-switch-to-buffer
        :desc "Compile in project"           "c" #'projectile-compile-project
        :desc "Repeat last command"          "C" #'projectile-repeat-last-command
        :desc "Remove known project"         "d" #'projectile-remove-known-project
        :desc "Discover projects in folder"  "D" #'+default/discover-projects
        :desc "Edit project .dir-locals"     "e" #'projectile-edit-dir-locals
        :desc "Find file in project"         "f" #'projectile-find-file
        :desc "Find file in other project"   "F" #'doom/find-file-in-other-project
        :desc "Configure project"            "g" #'projectile-configure-project
        :desc "Invalidate project cache"     "i" #'projectile-invalidate-cache
        :desc "Kill project buffers"         "k" #'projectile-kill-buffers
        :desc "Find other file"              "o" #'projectile-find-other-file
        :desc "Switch project"               "p" #'projectile-switch-project
        :desc "Find recent project files"    "r" #'projectile-recentf
        :desc "Run project"                  "R" #'projectile-run-project
        :desc "Save project files"           "s" #'projectile-save-project-buffers
        :desc "Pop up scratch buffer"        "x" #'doom/open-project-scratch-buffer
        :desc "Switch to scratch buffer"     "X" #'doom/switch-to-project-scratch-buffer
        :desc "List project tasks"           "t" #'magit-todos-list
        :desc "Test project"                 "T" #'projectile-test-project)
    )
#+end_src

** leader/quit
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> q --- quit/session
      (:prefix-map ("q" . "quit/session")
        :desc "Restart emacs server"         "d" #'+default/restart-server
        :desc "Delete frame"                 "f" #'delete-frame
        :desc "Clear current frame"          "F" #'doom/kill-all-buffers
        :desc "Kill Emacs (and daemon)"      "K" #'save-buffers-kill-emacs
        :desc "Quit Emacs"                   "q" #'save-buffers-kill-terminal
        :desc "Quit Emacs without saving"    "Q" #'evil-quit-all-with-error-code
        :desc "Quick save current session"   "s" #'doom/quicksave-session
        :desc "Restore last session"         "l" #'doom/quickload-session
        :desc "Save session to file"         "S" #'doom/save-session
        :desc "Restore session from file"    "L" #'doom/load-session
        :desc "Restart & restore Emacs"      "r" #'doom/restart-and-restore
        :desc "Restart Emacs"                "R" #'doom/restart)
    )
#+end_src

** leader/resume
#+begin_src emacs-lisp
;; ivy-resume比较难用, 而且有bug
;; https://emacs.stackexchange.com/questions/55775/how-can-i-resume-swiper-isearch-with-the-next-line-selected
(defun gwp/ivy-resume-search()
  (interactive)
  (swiper-isearch (car swiper-history)))

(map! :leader
      ;;; <leader> r --- resume
      (:prefix-map ("r" . "rings/resume")
        :desc "Open bookmarks"        "b" #'counsel-bookmark
        :desc "Resume last search"    "l" #'ivy-resume
        ;; :desc "Resume last search"    "l" #'gwp/ivy-resume-search
        :desc "Evil registers"        "e" #'counsel-register
        :desc "Evil marks"            "m" #'counsel-evil-marks
        :desc "Last change"           "c" #'goto-last-change
        :desc "Jump list"             "j" #'+ivy/jump-list
        ))
#+end_src

** leader/search
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> s --- search
      (:prefix-map ("s" . "search")
        :desc "Search buffer"                "b" #'swiper
        :desc "Search current directory"     "d" #'+default/search-cwd
        :desc "Search other directory"       "D" #'+default/search-other-cwd
        :desc "Locate file"                  "f" #'locate
        :desc "Jump to symbol"               "i" #'imenu
        :desc "Jump to visible link"         "l" #'link-hint-open-link
        :desc "Jump to link"                 "L" #'ffap-menu
        :desc "Jump list"                    "j" #'evil-show-jumps
        :desc "Jump to bookmark"             "m" #'bookmark-jump
        :desc "Search all notes"             "n" #'gwp/search-all-notes
        :desc "Look up online"               "o" #'+lookup/online
        :desc "Look up online (w/ prompt)"   "O" #'+lookup/online-select
        :desc "Look up in local docsets"     "k" #'+lookup/in-docsets
        :desc "Look up in all docsets"       "K" #'+lookup/in-all-docsets
        :desc "Search project"               "p" #'+default/search-project
        :desc "Search other project"         "P" #'+default/search-other-project
        :desc "Jump to mark"                 "r" #'evil-show-marks
        :desc "Search buffer"                "s" #'swiper-isearch
        :desc "Search buffer for thing at point" "S" #'swiper-isearch-thing-at-point
        :desc "Dictionary"                   "t" #'+lookup/dictionary-definition
        :desc "Thesaurus"                    "T" #'+lookup/synonyms)
    )
#+end_src

** leader/toggle
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> t --- toggle
      (:prefix-map ("t" . "toggle")
        :desc "Big mode"                     "b" #'doom-big-font-mode
        :desc "Flymake"                      "f" #'flymake-mode
        :desc "Menubar"                      "m" #'menu-bar-mode
        :desc "切换终端(vterm)"               "t" #'vterm-toggle
        :desc "Toolbar"                      "T" #'tool-bar-mode
        (:when (featurep! :checkers syntax)
          :desc "Flycheck"                   "f" #'flycheck-mode)
        :desc "Frame fullscreen"             "F" #'toggle-frame-fullscreen
        :desc "Evil goggles"                 "g" #'evil-goggles-mode
        (:when (featurep! :ui indent-guides)
          :desc "Indent guides"              "i" #'highlight-indent-guides-mode)
        :desc "Indent style"                 "I" #'doom/toggle-indent-style
        :desc "Line numbers"                 "l" #'doom/toggle-line-numbers
        (:when (featurep! :lang org +present)
          :desc "org-tree-slide mode"        "p" #'org-tree-slide-mode)
        :desc "Read-only mode"               "r" #'read-only-mode
        (:when (featurep! :checkers spell)
          :desc "Flyspell"                   "s" #'flyspell-mode)
        :desc "Soft line wrapping"           "w" #'visual-line-mode
        (:when (featurep! :ui word-wrap)
          :desc "Soft line wrapping"         "w" #'+word-wrap-mode)
        :desc "Zen mode"                     "z" #'writeroom-mode)
    )
#+end_src

** leader/jump
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> j --- jump
      (:prefix-map ("j" . "jump")
                   :desc "avy line"    "l" #'evil-avy-goto-line
                   )
    )
#+end_src

** leader/remote
#+begin_src emacs-lisp
(map! :leader
      ;;; <leader> R --- remote
      (:when (featurep! :tools upload)
        (:prefix-map ("R" . "remote")
          :desc "Upload local"               "u" #'ssh-deploy-upload-handler
          :desc "Upload local (force)"       "U" #'ssh-deploy-upload-handler-forced
          :desc "Download remote"            "d" #'ssh-deploy-download-handler
          :desc "Diff local & remote"        "D" #'ssh-deploy-diff-handler
          :desc "Browse remote files"        "." #'ssh-deploy-browse-remote-handler
          :desc "Detect remote changes"      ">" #'ssh-deploy-remote-changes-handler))
    )
#+end_src

** misc
#+begin_src elisp
;; Smart tab, these will only work in GUI Emacs
(map! ;; Smarter newlines
      :i [remap newline] #'newline-and-indent  ; auto-indent on newline
      :i "C-j"           #'+default/newline    ; default behavior

      (:after help :map help-mode-map
        :n "o"       #'link-hint-open-link)
      (:after helpful :map helpful-mode-map
        :n "o"       #'link-hint-open-link)
      (:after info :map Info-mode-map
        :n "o"       #'link-hint-open-link)
      (:after apropos :map apropos-mode-map
        :n "o"       #'link-hint-open-link
        :n "TAB"     #'forward-button
        :n [tab]     #'forward-button
        :n [backtab] #'backward-button)
      (:after view :map view-mode-map
        [escape]  #'View-quit-all)
      (:after man :map Man-mode-map
        :n "q"    #'kill-current-buffer)

      :m "gs"     #'+evil/easymotion  ; lazy-load `evil-easymotion'
      (:after evil-org
        :map evil-org-mode-map
        :m "gsh" #'+org/goto-visible)

      (:when (featurep! :editor multiple-cursors)
        :prefix "gz"
        :nv "d" #'evil-mc-make-and-goto-next-match
        :nv "D" #'evil-mc-make-and-goto-prev-match
        :nv "j" #'evil-mc-make-cursor-move-next-line
        :nv "k" #'evil-mc-make-cursor-move-prev-line
        :nv "m" #'evil-mc-make-all-cursors
        :nv "n" #'evil-mc-make-and-goto-next-cursor
        :nv "N" #'evil-mc-make-and-goto-last-cursor
        :nv "p" #'evil-mc-make-and-goto-prev-cursor
        :nv "P" #'evil-mc-make-and-goto-first-cursor
        :nv "q" #'evil-mc-undo-all-cursors
        :nv "t" #'+multiple-cursors/evil-mc-toggle-cursors
        :nv "u" #'evil-mc-undo-last-added-cursor
        :nv "z" #'+multiple-cursors/evil-mc-make-cursor-here
        :v  "I" #'evil-mc-make-cursor-in-visual-selection-beg
        :v  "A" #'evil-mc-make-cursor-in-visual-selection-end)

      ;; misc
      :n "C-S-f"  #'toggle-frame-fullscreen
      :n "C-+"    #'doom/reset-font-size
      ;; Buffer-local font resizing
      :n "C-="    #'text-scale-increase
      :n "C--"    #'text-scale-decrease
      ;; Frame-local font resizing
      :n "M-C-="  #'doom/increase-font-size
      :n "M-C--"  #'doom/decrease-font-size)


;;
;;; Module keybinds

;;; :completion
(map! (:when (featurep! :completion company)
        :i "C-@"      #'+company/complete
        :i "C-SPC"    #'+company/complete
        (:after company
          (:map company-active-map
            "C-w"     nil  ; don't interfere with `evil-delete-backward-word'
            "C-n"     #'company-select-next
            "C-p"     #'company-select-previous
            "C-j"     #'company-select-next
            "C-k"     #'company-select-previous
            "C-h"     #'company-show-doc-buffer
            "C-u"     #'company-previous-page
            "C-d"     #'company-next-page
            "C-s"     #'company-filter-candidates
            "C-S-s"   (cond ((featurep! :completion helm) #'helm-company)
                            ((featurep! :completion ivy)  #'counsel-company))
            "C-SPC"   #'company-complete-common
            "TAB"     #'company-complete-common-or-cycle
            [tab]     #'company-complete-common-or-cycle
            [backtab] #'company-select-previous
            [f1]      nil)
          (:map company-search-map  ; applies to `company-filter-map' too
            "C-n"     #'company-select-next-or-abort
            "C-p"     #'company-select-previous-or-abort
            "C-j"     #'company-select-next-or-abort
            "C-k"     #'company-select-previous-or-abort
            "C-s"     (λ! (company-search-abort) (company-filter-candidates))
            [escape]  #'company-search-abort))
        ;; TAB auto-completion in term buffers
        (:after comint :map comint-mode-map
          "TAB" #'company-complete
          [tab] #'company-complete))

      (:when (featurep! :completion ivy)
        (:after ivy
          :map ivy-minibuffer-map
          "C-SPC" #'ivy-call-and-recenter  ; preview file
          "C-l"   #'ivy-alt-done
          "C-v"   #'yank)
        (:after counsel
          :map counsel-ag-map
          "C-SPC"    #'ivy-call-and-recenter ; preview
          "C-l"      #'ivy-done
          [C-return] #'+ivy/git-grep-other-window-action))

      (:when (featurep! :completion helm)
        (:after helm :map helm-map
          [left]     #'left-char
          [right]    #'right-char
          "C-S-f"    #'helm-previous-page
          "C-S-n"    #'helm-next-source
          "C-S-p"    #'helm-previous-source
          "C-S-j"    #'helm-next-source
          "C-S-k"    #'helm-previous-source
          "C-j"      #'helm-next-line
          "C-k"      #'helm-previous-line
          "C-u"      #'helm-delete-minibuffer-contents
          "C-s"      #'helm-minibuffer-history
          ;; Swap TAB and C-z
          "TAB"      #'helm-execute-persistent-action
          [tab]      #'helm-execute-persistent-action
          "C-z"      #'helm-select-action)
        (:after helm-ag :map helm-ag-map
          "C--"      #'+helm-do-ag-decrease-context
          "C-="      #'+helm-do-ag-increase-context
          [left]     nil
          [right]    nil)
        (:after helm-files :map (helm-find-files-map helm-read-file-map)
          [C-return] #'helm-ff-run-switch-other-window
          "C-w"      #'helm-find-files-up-one-level)
        (:after helm-locate :map helm-generic-files-map
          [C-return] #'helm-ff-run-switch-other-window)
        (:after helm-buffers :map helm-buffer-map
          [C-return] #'helm-buffer-switch-other-window)
        (:after helm-occur :map helm-occur-map
          [C-return] #'helm-occur-run-goto-line-ow)
        (:after helm-grep :map helm-grep-map
          [C-return] #'helm-grep-run-other-window-action)))

;;; :ui
(map! (:when (featurep! :ui popup)
        :n "C-`"   #'+popup/toggle
        :n "C-~"   #'+popup/raise
        :g "C-x p" #'+popup/other))

;;; :editor
(map! (:when (featurep! :editor format)
        :n "gQ" #'+format:region)

      (:when (featurep! :editor rotate-text)
        :n "!"  #'rotate-text)

      (:when (featurep! :editor multiple-cursors)
        ;; evil-multiedit
        :v  "R"     #'evil-multiedit-match-all
        :n  "M-d"   #'evil-multiedit-match-symbol-and-next
        :n  "M-D"   #'evil-multiedit-match-symbol-and-prev
        :v  "M-d"   #'evil-multiedit-match-and-next
        :v  "M-D"   #'evil-multiedit-match-and-prev
        :nv "C-M-d" #'evil-multiedit-restore
        (:after evil-multiedit
          (:map evil-multiedit-state-map
            "M-d"    #'evil-multiedit-match-and-next
            "M-D"    #'evil-multiedit-match-and-prev
            "RET"    #'evil-multiedit-toggle-or-restrict-region
            [return] #'evil-multiedit-toggle-or-restrict-region)))

      (:when (featurep! :editor snippets)
        ;; auto-yasnippet
        :i  [C-tab] #'aya-expand
        :nv [C-tab] #'aya-create))

;;; :tools
(when (featurep! :tools eval)
  (map! "M-r" #'+eval/buffer))


(after! which-key
  (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
    (cl-pushnew `((,(format "\\`\\(?:C-w\\|%s w\\) m\\'" prefix-re))
                  nil . "maximize")
                which-key-replacement-alist)))
#+end_src


* modules/hack
新思路:
- fork doom-emacs, 仅做必要的修改. 将其中的org module更名后, 放到pkg下载入?
- 这样易于跟踪官方进度?
- 新的gwp/org会覆盖lang/org中的设置
- 注意修改文件首行的路径, 特别是autoloads, 否则不能正常加载:
  : -;;; lang/org/autoload/org-link.el -*- lexical-binding: t; -*-
  : +;;; ~/.doom.d/modules/gwp/org/autoload/org-link.el -*- lexical-binding: t; -*-

修改的模块:
- [[file:doom-hacks/modules/lang/org/config.el][org/config.el]]
- [[file:doom-hacks/modules/lang/rust/config.el][rust/config.el]]
- [[file:doom-hacks/modules/tools/magit/][magit/]]


* snippets
:PROPERTIES:
:header-args: :comments nil
:END:
TAB自动补全很可怕, 无意按键, 补出很多没用的东西. doom系统下private snippets目录
为 ~/.doom.d/snippets.

- [[https://github.com/hlissner/doom-snippets][hlissner/doom-snippets: The Doom Emacs snippets library]]

** org-mode
*** begin_src
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src
# -*- mode: snippet -*-
# name: #+begin_src
# key: <s
# --
,#+begin_src $1
$0
,#+end_src
#+END_SRC

*** begin_src shell
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_sh
# -*- mode: snippet -*-
# name: #+begin_src shell
# key: <sh
# --
,#+begin_src shell
$0
,#+end_src
#+END_SRC

*** begin_src elisp
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_elisp
# -*- mode: snippet -*-
# name: #+begin_src elisp
# key: <el
# --
,#+begin_src elisp
$0
,#+end_src
#+END_SRC

*** begin_src python
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_python
# -*- mode: snippet -*-
# name: #+begin_src python
# key: <p
# --
,#+begin_src python
$0
,#+end_src
#+END_SRC

*** begin_src rust
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_rust
# -*- mode: snippet -*-
# name: #+begin_src rust
# key: <r
# --
,#+begin_src rust
$0
,#+end_src
#+END_SRC

** rust-mode
*** cfg
: pkg/.doom.d/snippets/rust-mode/cfg
*** impl Default
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/impl_default
  # -*- mode: snippet -*-
  # name: impl Default
  # key: Default
  # --
  impl Default for ${1:Type} {
      fn default() -> Self {
          ${0:Self::new()}
      }
  }
#+END_SRC

*** structopt
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/structopt
  # -*- mode: snippet -*-
  # name: #[derive(StructOpt)]
  # key: structopt
  # --
  #[derive(StructOpt, Debug, Clone)]
  struct ${1:Cli} {
      #[structopt(long, short)]
      ${2:n}: ${0:usize}
  }
#+END_SRC
*** if let
: pkg/.doom.d/snippets/rust-mode/if_let

*** for
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/for
  # -*- mode: snippet -*-
  # name: for var in iterable { ... }
  # key: for
  # --
  for ${1:var} in ${2:iterable} {
      $0
  }
#+END_SRC

*** print
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/print
  # -*- mode: snippet -*-
  # name: print!("{}", value);
  # key: print
  # --
  print!("${1:{}}", $2);
#+END_SRC

*** println
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/println
  # -*- mode: snippet -*-
  # name: println!("{}", value);
  # key: println
  # --
  println!("${1:{}}", $2);
#+END_SRC

*** eprintln
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/eprintln
# -*- mode: snippet -*-
# name: eprintln!("{}", value);
# key: eprintln
# --
eprintln!("${1:{}}", $2);
#+END_SRC

*** fn
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/fn
  # -*- mode: snippet -*-
  # name: fn name() { ... }
  # key: fn
  # --
  fn ${1:name}($2) {
     ${0:todo!()}
  }
#+END_SRC

*** fnr
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/fnr
  # -*- mode: snippet -*-
  # name: fn name() -> Type { ... }
  # key: fnr
  # --
  fn ${1:name}($2) -> ${3:Result<${4:()}>} {
       ${0:todo!()}
  }
#+END_SRC

*** fnw
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/fnw
  # -*- mode: snippet -*-
  # name: fn name<T>(x: T) where T: Clone { ... }
  # key: fnw
  # --
  fn ${1:name}<${2:T}>(${3:x: T}) where ${4:T: Clone} {
       $0
  }
#+END_SRC

*** test
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/test
# -*- mode: snippet -*-
# name: #[test] fn test_name() { .. }
# key: #test
# --
#[test]
fn ${1:test_name}() {
   $0
}
#+END_SRC

*** result
: pkg/.doom.d/snippets/rust-mode/result

*** todo!
: pkg/.doom.d/snippets/rust-mode/todo

*** derive
: pkg/.doom.d/snippets/rust-mode/derive

*** main
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/main
  # -*- mode: snippet -*-
  # name: fn main() { ... }
  # key: main
  # --
  fn main() {
     $0
  }
#+END_SRC

** prog-mode
*** fixme
: pkg/.doom.d/snippets/prog-mode/fixme

*** todo
: pkg/.doom.d/snippets/prog-mode/todo


* theme
[[file:emacs-material-theme/][file:~/Workspace/Programming/emacs/emacs-material-theme/]]
