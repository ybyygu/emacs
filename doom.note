#+TITLE: 个人文本交互系统(based on doom-emacs)
#+SETUPFILE: ~/Notes/common.org

历史设置
- [[file:~/Install/configs/spacemacs/config.note][spacemacs]]
- [[file:~/Install/configs/spacemacs/ybyygu.org][emacs24-starter-kit]]
- 从零开始 [[file:~/Install/configs/emacs/gwp/gwp.note][gwp.note]]

待考
- [[https://github.com/davidshepherd7/terminal-here][davidshepherd7/terminal-here: An Emacs package to open an external terminal emulator in the current directory]]

* Portal
- note [[zotero://select/items/1_MG5FH5V9][@emacs]]
- [[zotero://select/library/collections/Z8UFNPZ4][zotero collection]]

* Tasks [9/9]
- [X] insert 状态下无法输入z
- [X] 使用 transient 重写cargo (tangle)
- [X] autosave空格丢失问题
- [X] org-capture clipboard不正常
- [X] tab不能cycle item及properties
- [X] 在magit commit环境中不能使用C-d
- [X] 添加 dired link to home 的功能, 方便 virtualbox 中打开文件
- [X] agenda 中的按键有些问题
- [X] image 大小不能控制

* 配置参考
- [ ] [[https://github.com/tshu-w/.emacs.d/tree/master/lisp][.emacs.d/lisp at master · tshu-w/.emacs.d]]
- [ ] [[https://github.com/bodnarlajos/emacs-pure][bodnarlajos/emacs-pure]]
- [ ] [[https://github.com/seagle0128/.emacs.d][seagle0128/.emacs.d: Centaur Emacs - A Fancy and Fast Emacs Configuration]]
- [ ] [[https://github.com/Wilfred/.emacs.d/tree/48e7eb583f6afdfa3257edd0b9e64b1f489c001a][Wilfred/.emacs.d]]
- [ ] [[https://github.com/purcell/emacs.d][purcell/emacs.d: An Emacs configuration bundle with batteries included]]
- [ ] [[https://git.sr.ht/~technomancy/better-defaults][~technomancy/better-defaults - sourcehut git]]
- [ ] [[https://github.com/hlissner/doom-emacs][doom-emacs: An Emacs configuration for the stubborn martian vimmer]]
  - [ ] [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org][doom-emacs/faq.org]]
  - [ ] [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org][doom-emacs/getting_started.org]]
  - [ ] [[https://github.com/hlissner/doom-emacs/blob/develop/docs/modules.org][doom-emacs/modules.org at develop]]
  - [ ] [[https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/org/README.org#description][doom-emacs/README.org at develop · hlissner/doom-emacs]]
- [ ] https://github.com/gilbertw1/bmacs/blob/master/bmacs.org
- [X] [[https://tecosaur.github.io/emacs-config/config.html][Doom Emacs Configuration]] by tecosaur
  这里提到了基于mupdf的一个模块, 可以关注. pdf-tools太慢了
- [ ] [[https://noelwelsh.com/posts/2019-01-10-doom-emacs.html][Noel Welsh: Doom Emacs Workflows]]
- [ ] [[https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.org][help/Org-Mode_Fundamentals.org at master · grettke/help]]
- [ ] [[https://develop.spacemacs.org/layers/+emacs/org/README.html][Org layer]]
- [ ] 编码参考: [[https://github.com/bbatsov/emacs-lisp-style-guide][bbatsov/emacs-lisp-style-guide: A community-driven Emacs Lisp style guide]]
- [X] [[https://github.com/cnsunyour/.doom.d][cnsunyour/.doom.d: doom-emacs private configuration]]
- [X] [[https://github.com/redguardtoo/emacs.d][redguardtoo/emacs.d: Fast and robust Emacs setup.]] [[file:redguardtoo-emacs.d][read codes]]

* Memo [60/71]
** DONE [2021-10-21 Thu] 实现 org-noter 最基本的功能, 方便 pdf 批注.
- State "DONE"       from "TODO"       [2021-10-22 Fri 17:18]
- [X] 可自动生成 annotation.note 文件
- [X] 可插入指向 pdf 某页的 headline
- [X] 可由 headline 使用外部的 pdf 阅读器来打开指定文件及页面

** DONE [2021-10-17 Sun] 尝试 eaf 中的 pdf-viewer
- Note taken on [2021-10-20 Wed 18:59] \\
  挺好的, 主要是 eaf-pdf-viewer 好用. 不过暂时可以不用.
- State "DONE"       from "TODO"       [2021-10-20 Wed 18:59]
基于 mupdf, 比 pdf-tools 快多了. 支持文本高亮, 支持与 org 互动, 这样与 org-noter
配合就没什么问题了.

[2021-10-19 Tue] 感觉安装挺容易的, 依赖带来的麻烦不大. 挺值得一用. 不过除了 pdf 外, 还没什么杀手级的应用.

: okular foo.pdf -p 5
: evince foo.pdf -p 5
: llpp foo.pdf -page 5

** DONE [2021-10-16 Sat] 如何重新打开关闭的buffer?
- State "DONE"       from "TODO"       [2021-10-17 Sun 07:04]
- [[https://github.com/mrkkrp/kill-or-bury-alive][mrkkrp/kill-or-bury-alive: Precise control over buffer killing in Emacs]]
- [[https://stackoverflow.com/questions/10394213/emacs-reopen-previous-killed-buffer][Emacs reopen previous killed buffer？ - Stack Overflow]]

** DONE [2021-10-15 Fri] 实现当前目录下搜索文件名功能

- State "DONE"       from "TODO"       [2021-10-17 Sun 07:03]
** TODO [2021-10-13 Wed] 找时间逃离doom-emacs, 自己搭一个?
doom-emacs问题
- 依赖于straight, github, 装包太痛苦 [2021-10-15 Fri] 可启有代理, 在emacs中reload (doom/reload)
- 自定义设置太多, 难以尽如心意.

参考:
- [[https://github.com/seagle0128/.emacs.d][seagle0128/.emacs.d: Centaur Emacs - A Fancy and Fast Emacs Configuration]]
- [[https://www.reddit.com/r/emacs/comments/jzjtv0/doom_emacs_vs_vanilla_emacs/][Doom emacs vs vanilla emacs : emacs]]

[2021-10-14 Thu] 试用了下Centaur, 有些失望.

** DONE [2021-10-11 Mon] org-toggle-heading后会跳一下
- State "DONE"       from "TODO"       [2021-10-15 Fri 15:57]
是doom中org module的锅, 禁用就可以了.

*** DONE toggle headline时, 应隐藏 properties
- State "DONE"       from "TODO"       [2021-10-12 Tue 19:31]
  是default module中bindings的原因, 彻底去掉就可以了.

*** TODO org-protocol设置有问题, daemon没开启?

*** 需要导入的配置
- RET: +org/dwim-at-point
            :n [return]   #'+org/dwim-at-point
            :n "RET"      #'+org/dwim-at-point

*** +org/open-fold

*** 我还是习惯org默认的行为, Alt-RET时不用管上下文
;; (setq org-M-RET-may-split-line nil
;;       ;; insert new headings after current subtree rather than inside it
;;       org-insert-heading-respect-content t)

** DONE [2021-10-12 Tue] 以前的一个痛点: org跳转到折叠的headline时, 如何展开光标下的内容?
- State "DONE"       from "TODO"       [2021-10-12 Tue 20:07]
可用org-show-contex来救急, 比org-reveal命令好用

** DONE [2021-10-11 Mon] org store link时, 如果在buffer顶部生成的链接无效
- State "DONE"       from "TODO"       [2021-10-13 Wed 16:47]
根据doc, 可以用C-u来调用.

#+begin_src text
For some link types, a C-u prefix ARG is interpreted.  A single
C-u negates org-context-in-file-links for file links or
org-gnus-prefer-web-links for links to Usenet articles.
#+end_src


** DONE [2021-10-10 Sun] [[https://emacs-china.org/t/package-symbol-overlay-symbol/7706][[推销package] symbol-overlay，同时高亮多个symbol - Emacs-general - Emacs China]]

- State "DONE"       from "TODO"       [2021-10-13 Wed 16:45]
** DONE [2021-10-09 Sat] magit-status启动后隐藏 untracked files列表, 每次跳开要浪费不少时间
- State "DONE"       from "TODO"       [2021-10-09 Sat 19:48]
[[https://emacs.stackexchange.com/questions/27271/how-do-i-toggle-magit-enumerating-untracked-files][How do I toggle Magit enumerating untracked files? - Emacs Stack Exchange]]

magit-section-initial-visibility-alist

** DONE [2021-10-09 Sat] 使用rime做为默认的输入法
- State "DONE"       from "TODO"       [2021-10-09 Sat 19:31]

- [[https://sunyour.org/post/emacs-%E5%86%85%E7%BD%AE%E8%BE%93%E5%85%A5%E6%B3%95%E6%AD%A3%E5%BC%8F%E6%94%B9%E7%94%A8-emacs-rime/][我的 emacs 内置输入法正式改用 emacs-rime - 凡·记 - 墩墩家的幸福生活]]
- [[https://manateelazycat.github.io/emacs/2020/03/22/emacs-rime.html][折腾emacs-rime]]
- [[https://blindwith.science/2020/12/460.html/][从 pyim 换到 emacs-rime 了 - Blind with Science]]
- [[https://sunyour.org/post/%E7%BB%99-emacs-rime-%E5%A2%9E%E5%8A%A0%E7%B1%BB%E4%BC%BC-pyim-%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%BD%93%E5%89%8D%E8%8B%B1%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%BA%E4%B8%AD%E6%96%87%E7%9A%84%E5%8A%9F%E8%83%BD/][给 emacs-rime 增加类似 pyim 的转换当前英文字符串为中文的功能 - 凡·记 - 墩墩家的幸福生活]]
- [[https://wiki.archlinux.org/title/Rime][Rime - ArchWiki]]
- [[https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md][Rime_collections/Rime_description.md at master · LEOYoon-Tsaw/Rime_collections]]

优点:
- 相比于fcitx table不再有掉字的问题.
- 可以配合emacs-rime这个包来精细调整, 实现更佳的输入体验.

思路
- emacs启动时, 禁用掉fcitx相关的变量, 这样可实现ctrl-space自动调用emacs-rime. 与
  桌面其它习惯保持一致.
- 副作用: 在emacs中调用的程序可能无法正常使用fcitx来输入中文.

rime的安装
: sudo pacman -S fcitx-rime5 librime
: pac -S manjaro-asian-input-support-fcitx5

rime数据在 ~/.local/share/fcitx5/rime下.
: ~/.local/share/fcitx5/rime/default.custom.yaml

五笔98码表设置文件:
- [[https://github.com/yanhuacuo/98wubi-tables][yanhuacuo/98wubi-tables: 98五笔基础码表]]
- [[https://github.com/thep0y/rime-98][thep0y/rime-98]]

在fcitx-rime中切换中英文挺麻烦的, 可在rime中禁用英文(ascii_composer得保留, 不然
无法在emacs中切换临时英文):
- [[https://github.com/rime/squirrel/issues/221][如何删除 鼠须管 的英文模式？ #221]]

** DONE [2021-10-08 Fri] 解决matebook打开url慢的问题
- State "DONE"       from "TODO"       [2021-10-08 Fri 19:45]
browse-url函数慢
browse-url-xdg-open

在emacs中运行如下shell命令后发现问题所在:
#+begin_src shell :tangle no
#! /usr/bin/env bash

strace -f -s 1000 -tt xdg-open http://www.baidu.com &>/tmp/a.log
#+end_src

#+begin_src text
[pid 15914] 19:23:16.378907 futex(0x7f4f40246ac8, FUTEX_WAKE_PRIVATE, 2147483647) = 0
[pid 15914] 19:23:16.378935 openat(AT_FDCWD, "/run/systemd/machines/tower7820", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
[pid 15914] 19:23:16.378973 rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
#+end_src

原来环境变量的问题:
: ~/.emacs.d> rg --no-ignore --hidden tower7820
: .local/env
: 82: "SESSION_MANAGER=local/tower7820:@/tmp/.ICE-unix/3651,unix/tower7820:/tmp/.ICE-unix/3651"

删除 ~/.emacs.d/local/env 文件, 重启后问题解决.

** TODO [2021-10-08 Fri] 解决window layout保存问题
- [[https://www.reddit.com/r/emacs/comments/q5l4mv/do_you_use_ivypushpopview/][(2) Do you use ivy-push/pop-view? : emacs]]
- [[https://stackoverflow.com/questions/2572950/preserve-window-layout-in-emacs][Preserve window layout in Emacs - Stack Overflow]]
- [[https://github.com/alphapapa/burly.el][alphapapa/burly.el: Save and restore frames and windows with their buffers in Emacs]]

** DONE [2021-10-07 Thu] 解决rust编程中在comment环境中开新行的问题
- State "DONE"       from "TODO"       [2021-10-08 Fri 10:58]
默认的容易与org中的冲突.

用ctrl-j代替

** DONE [2021-08-26 Thu] dolphin在emacs中无法正常打开
- State "DONE"       from "TODO"       [2021-10-08 Fri 19:46] \\
  是~/.emacs.d/local/env文件惹的祸

** DONE [2021-10-07 Thu] 修复evilnc-comment-or-uncomment-lines在org src blocks里乱跳的问题
- State "DONE"       from "TODO"       [2021-10-08 Fri 18:40]
应先进入org-src-edit模式后再处理

** DONE [2021-10-06 Wed] 优化按键布局
- State "DONE"       from "TODO"       [2021-10-20 Wed 19:01]
可以考虑去掉q命令, 很少用, 还经常错按. 可以用evil-forward-*之类的代替?
evil-forward-paragraph

** DONE [2021-10-06 Wed] Rust编辑优化
- State "DONE"       from "TODO"       [2021-10-07 Thu 09:22]
参考rust-mode中dbg!设置, 实现:
: Option<Molecule> => Molecule
: Molecule => Result<Molecule>
: Molecule => Option<Molecule>

** TODO [2021-10-04 Mon] 也许这个可用于编辑rustdoc? [[https://github.com/twlz0ne/separedit.el#edit-heredoc][twlz0ne/separedit.el: Edit comment or string/docstring or code block inside them in separate buffer with your favorite mode]]
- [[https://emacs-china.org/t/separedit-el-docstring/11196][separedit.el: 在单独的缓冲区编辑注释、docstring 或其中的代码块]]
- [[https://github.com/phillord/lentic][phillord/lentic: Create views of the same content in two Emacs buffers]]

** DONE [2021-10-06 Wed] 修复refile问题
- State "DONE"       from "TODO"       [2021-10-10 Sun 07:27]
如果有多个Memo headline, 会选择最低的那个

** TODO [2021-10-06 Wed] 鼓捣一下 [[https://github.com/stardiviner/goldendict.el][stardiviner/goldendict.el]]
- [[https://emacs-china.org/t/topic/18006][一个支持多词典的翻译插件(目前仅支持单词)]]

goldendict就是命令调用, 非常简单

** TODO [2021-10-05 Tue] 几个有用的hydra命令
hydra-apropos/body, 比如按value搜索variable
+hydra/text-zoom/body
+hydra/window-nav/body

SPC-i-?: 查看以SPC-i开头的命令

** DONE [2021-10-01 Fri] 如何选择中英文混录文字中的中文或英文呢?
- State "DONE"       from "TODO"       [2021-10-02 Sat 11:56]
** TODO [2021-09-30 Thu] org插入screenshot时会访问wikipedia
可能是doom某种自定义行为?

** DONE [2021-09-28 Tue] 切换禁用鼠标模式
- State "DONE"       from "TODO"       [2021-09-28 Tue 20:38]
笔记本输入时容易误碰触控板, 禁用鼠标可避免这一问题.

- [[https://stackoverflow.com/questions/4906534/disable-mouse-clicks-in-emacs/4906698#4906698][Disable mouse clicks in Emacs - Stack Overflow]]
- [[https://endlessparentheses.com/disable-mouse-only-inside-emacs.html][Disable Mouse only inside Emacs · Endless Parentheses]]

** DONE [2021-09-25 Sat] 研究下文本选择功能, 比如expand-region等
- State "DONE"       from "TODO"       [2021-09-29 Wed 19:16]


** DONE [2021-09-24 Fri] 使用hydra改进窗口大小调整按键
space-d-w

- State "DONE"       from "TODO"       [2021-09-29 Wed 15:21]
** DONE [2021-09-24 Fri] clipboard出问题了?
- State "DONE"       from "TODO"       [2021-09-29 Wed 20:28]
org-capture中用的是 primary clipboard中的内容

也许和org的autoload加载次序有关? ([2021-09-29 Wed] 无关)

根据 [[https://github.com/emacsmirror/org/blob/d70f2806788dce06871287ef02c88ee08076dffc/lisp/org-capture.el#L1579][这里]], org默认从primary clipboard中取内容.

** DONE [2021-09-18 Sat] 研究下自动补全系统
- State "DONE"       from "TODO"       [2021-09-24 Fri 14:20]
dabbrev-expand
hippie-expand

hippie-expand默认会使用dabbrev-expand的补全项, 因此可替代之(需要设置hippie-expand-dabbrev-skip-space):
: (global-set-key "\M-/" 'hippie-expand)

redgaurdtoo: "代码自动完成和代码自动导航我推荐基于ctags的方案，缺点当然是智能程度不高。但是速
度快，支持正则表达式定制，通吃所有语言。在我眼里优点远远压倒了缺点。"

[2021-09-30 Thu] 新发现的一个, 可跳转至定义, 很不错
- [[https://emacs-china.org/t/citre-ctags/17604][Citre: 先进的 Ctags 前端 - Emacs-general - Emacs China]]

[2021-09-24 Fri] 试了下, 有难度, 没用起来.
- [[https://github.com/redguardtoo/company-ctags][Fastest auto-completion using Company and Ctags]]


** DONE [2021-09-16 Thu] 最近关于笔记管理的好文 [[https://index.pmthinking.com/3a8c5d77b5be42c58719d174bfbfa935][何谓渐进式总结]]          :ATTACH:
:PROPERTIES:
:ID:       71394edd-0d8b-4d34-b49e-e0c7e8ade4c1
:END:
- State "DONE"       from "TODO"       [2021-10-02 Sat 21:34]
- 适当的压缩信息（这个系列便是如此）能更利于我们记忆
- 知识的挑战不在于获取知识, 而在于将部分知识跨时距传递(在需要的时候)
- 笔记系统要平衡可发现性和可理解性

渐进式总结
- 不断地总结，把思路提炼成越来越小的层次。
- 有了这些层层暴露，我们就可以从高空鸟瞰笔记的山峰，判断这座山峰是否与我们要找的东西有关。
- 但我们也保留了所有的层级，所以如果我们看到一个看起来很有前景的山峰，就可以用我
  们的 "理解的降落伞 "直接潜入其中，往下钻，只要我们需要的深度。

渐进式总结将丛林变成了一个群岛式的岛屿。它揭示了你的个人信息地貌 —— 你的目标、价
值观、兴趣和追求的独特地形。有了清晰的地形图，你就有了引导的能力。

- 快速索引知识，并将其压缩成许多知识块;
- 迅速忘掉所学的东西, 放入笔记系统(第二大脑), 将大脑放空;
- 目标: 保持清晰的大脑，又能建立起持久的结构.

记忆的关键:
- 不是要把每一个想法尽无遗地罗列出来
- 而是要创造一个丰富的触发器、提示和钩子的环境, 以引发记忆、联系，甚至是更多的新
  想法
- 拥有正确的知识不是最大的挑战, 寻找知识才是最大的挑战. 知识是存在的，只是我们找
  不到而已.
- 让我们从「记详细的笔记」转化为「记录笔记的关键词、核心思想和其他元数据上」

#+name: fig:da08e510
#+attr_org: :width 800
#+attr_odt: :width 10
[[attachment:2021-09-16_09-57-42_screenshot.png]]

#+name: fig:9b50705a
#+attr_org: :width 800
#+attr_odt: :width 10
[[attachment:2021-09-16_09-57-54_screenshot.png]]

** DONE [2021-09-09 Thu] 几个按键问题
- State "DONE"       from "TODO"       [2021-09-29 Wed 20:30]
- State "DONE"       from "TODO"       [2021-09-09 Thu 19:23]

space-j, mini-buffer: ctrl-k

Ctrl-z suspend-frame

evil-emacs-state, evil-exit-emacs-state

** DONE [2021-09-03 Fri] 使用magit transient来调用命令行程序?
- State "DONE"       from "TODO"       [2021-09-05 Sun 18:00]
如何可避免使用emacs-module, 改进容错.

- [[https://magit.vc/manual/transient/][Transient User and Developer Manual]]
- [[https://www.reddit.com/r/emacs/comments/f3o0v8/anyone_have_good_examples_for_transient/][Anyone have good examples for Transient? : emacs]]
- [[https://github.com/sheijk/org-menu/blob/main/org-menu.el][org-menu.el]]

#+begin_src elisp
(defun test-function (&optional args)
  (interactive
   (list (transient-args 'test-transient)))
  (message "args %s" args))

(transient-define-infix test-transient:--message ()
  :description "Message"
  :class 'transient-option
  :shortarg "-m"
  :argument "--message=")

(transient-define-prefix test-transient ()
  "Test Transient Title"
  ["Arguments"
   ("-s" "Switch" "--switch")
   ("-a" "Another switch" "--another")
   ("-d" "Another switch" "4")
   (test-transient:--message)]
  ["Actions"
   ("d" "Action d" test-function)])

(test-transient)
#+end_src

*** DONE [2021-09-28 Tue] 改进cargo几个命令组按键
- State "DONE"       from "TODO"       [2021-09-29 Wed 16:03]
transient可以根据当前的mode来显示特定的命令, 比如tangle仅在org-mode里显示


** DONE [2021-08-25 Wed] 改进字体设置                                   :ATTACH:
:PROPERTIES:
:ID:       aacae034-53c7-4ae8-a8b3-266aaa765e84
:END:
- State "DONE"       from "TODO"       [2021-08-25 Wed 09:20]

[2021-10-05 Tue] 现的字体显示"语言", 其中的言字很怪.

#+name: fig:4e8b267b
#+attr_org: :width 800
#+attr_odt: :width 10
[[attachment:2021-09-12_16-13-53_screenshot.png]]

nerd-fonts是加了各种图形化字体补丁的字体, 比如nered-fonts-ubuntu-mono

Sarasa类字体, 等宽等高, 可以解决中英文混排的问题. 不需要为org-table单独设字体了.

字形：
CL: Classical orthography
SC: Simplified Chinese
TC: Traditional Chinese
HC: Hong Kong Chinese
J : Japanese
K : Korean

对齐测试
| WenQuanYi Zenhei Mono (文泉驿等宽正黑) | 中英文，半宽，等高                                                                                  |
| Inconsolata                            | 英文，半宽                                                                                          |
| Ubuntu Mono                            | 英文，半宽                                                                                          |
|----------------------------------------+-----------------------------------------------------------------------------------------------------|
| 4VH9GANA => 2009                       | Do Quantum Mechanical Energies Calculated for Small Models of Protein-Active Sites Converge?†       |
| FIIAZG4V => 2010                       | P450 Enzymes: Their Structure, Reactivity, and Selectivity—Modeled by QM/MM Calculations            |
| JVGGKSCS => 2008                       | A theoretical investigation into the thiophene-cracking mechanism over pure Brønsted acidic zeolite |
| 🕙 16:22:34 ❯                          | test                                                                                                |

参考
- [[https://manateelazycat.github.io/emacs/2020/04/02/org-font.html][Org-Mode 表格对齐设置]]

** TODO [2021-08-20 Fri] 实现zotero管理界面
- [[https://github.com/chenyanming/calibredb.el/blob/master/calibredb-ivy.el][calibredb.el/calibredb-ivy.el at master · chenyanming/calibredb.el · GitHub]]
- [[https://oremacs.com/swiper/#actions][Ivy User Manual]]
- [[id:f9dbae5c-d135-47fd-be30-e788fc1e3eb7][ivy 新手教程 - Emacs-general - Emacs China]]
- [[id:dba75f6c-108f-4e84-a0ae-589065f572f6][JSON-RPC :: Better BibTeX for Zotero]]
- [[https://github.com/tmalsburg/helm-bibtex/blob/master/ivy-bibtex.el][helm-bibtex/ivy-bibtex.el at master · tmalsburg/helm-bibtex]]

不太满意, 有待改进:
- [ ] 搜索时, keyword为空时响应非常慢.
- [ ] 多种条件任意搜索
- [ ] 无法先过滤, 然后再搜索(像zotero中, 先按tags或collection过虑过再搜索).
  ivy-bibtex可以选择多个item, 再执行统一的操作. 可以研究下. [[https://github.com/tmalsburg/helm-bibtex#apply-actions-to-multiple-entries][Apply actions to multiple entries]]
- [X] 中英文混排不对齐

*** Memo
[2021-09-12 Sun] 改进文本对齐
#+begin_src elisp :tangle no
(require 'ivy-bibtex)
(setq candidate '("2008 袁亚湘 非线性优化计算方法 book 袁亚湘2008  "
 ("year" . "2008")
 ("author" . "袁亚湘")
 ("title" . "{非线性优化计算方法}")
 ("=type=" . "book")
 ("=key=" . "袁亚湘2008")
))
(bibtex-completion-format-entry candidate 20)

(truncate-string-to-width "magit-diff: elisp-demos" 40 0 ?\s)
(truncate-string-to-width "magit-diff: elisp-好好" 40 0 ?\s)
#+end_src

[2021-08-31 Tue] 实现自动编译模块? [[https://github.com/casouri/xeft/blob/master/xeft.el][URL]]
[2021-08-25 Wed] 这个链接打不开? [[zotero://select/items/1_I9BXB5GH][@WenBin2007]] 已修复
[2021-08-23 Mon] 自己写了一个, 简洁够用.
流程:
: gwp/zotero-searcn
: Ctrl-o, o

** TODO [2021-08-01 Sun] 试用org-roam2
[2021-09-28 Tue] 总觉得没多大的用呢?
org-roam-server改为org-roam-ui

org-roam-ui用不起来. 弃

** DONE [2021-07-18 Sun] 解决doom-emacs升级导致的问题
- State "DONE"       from "TODO"       [2021-07-25 Sun 08:55]
原来是org/packages.el升级导致的问题

# required dependencies
pacman -S git emacs ripgrep
# optional dependencies
pacman -S fd

~/.emacs.d/bin/doom install

** DONE [2021-02-03 Wed] 解决fcitx输入汉字掉字的问题
- State "DONE"       from "TODO"       [2021-10-09 Sat 09:27]
- State "DONE"       from "TODO"       [2021-02-08 Mon 14:20]
fcitx输入太快会掉字, 这可能是emacs输入机制的一个问题. 使用emacs内置的输入法可以
较好的解决这个问题.

- [[https://emacs-china.org/t/os-smart-input-source/13436/37][中英文混打：OS输入法管理包 smart-input-source - Emacs-general - Emacs China]]

用fcitx rime不会掉字? 也许直接用fcitx5-rime就可以了?

*** pyim输入法
现在有的特性:
- 使用Ctrl-\按键切换pyim输入法.
- 尽量和fcitx输入保持一致, 默认使用英文标点.
- 按下划线(_)或"\"进时临时英文输入模式.
- 英文状态下，先录入五笔码，比如(fq), 然后按F2-SPC按键进入中文输入状态, 并将光标
  下字串转换为汉字"无".
- 如果忘记五笔码，可输入拼音，按“/”键进入临时拼音输入模式.

** [2021-01-09 Sat] 解决org-mode中Tab键乱窜的问题
: (add-hook 'org-mode-hook #'evil-normalize-keymaps)

[[https://github.com/hlissner/doom-emacs/issues/2775][TAB key is not behaving properly in org-mode when #+SETUPFILE keyword is present · Issue #2775 · hlissner/doom-emacs]]

** DONE [2021-01-09 Sat] 解决join-line命令异常的问题
- State "DONE"       from "TODO"       [2021-01-09 Sat 10:33]
[[https://github.com/hlissner/doom-emacs/commit/40cf6139ed53b635fec37ce623c4b1093c78a11e][Make evil-join remove comment delimiters · hlissner/doom-emacs@40cf613]]

: (advice-remove #'evil-join #'+evil-join-a)

** DONE [2021-01-07 Thu] 解决自动保存时清理空格的问题
- State "DONE"       from "TODO"       [2021-01-07 Thu 16:00]

[2021-09-30 Thu] 将自动保存时间延长至30秒.

在编辑过程中自动保存后会删掉空格, 应禁用这一行为.

[2021-09-12 Sun] 似乎改进了, 重新启用.
- [[file:doom-emacs/docs/getting_started.org::*Using ~delete-trailing-whitespaces~ or ~whitespace-cleanup~ to manage leftover whitespace][Using ~delete-trailing-whitespaces~ or ~whitespace-cleanup~ to manage leftover whitespace]]

** DONE [2020-09-14 Mon] 禁用which-key-mode
- State "DONE"       from "TODO"       [2020-09-14 Mon 10:39]
响应非常慢, 以前在spacemacs中也遇到过. 禁用了之.

** DONE [2020-07-09 Thu] 试用org-roam
- State "DONE"       from "TODO"       [2020-08-07 Fri 20:37]
- [[https://www.orgroam.com/manual/Getting-Started.html#Getting-Started][Getting Started (Org-roam User Manual)]]
- [[https://www.reddit.com/r/emacs/comments/hltl69/org_roam_for_academics_demo/][Org Roam for Academics Demo : emacs]]
- [[https://www.zmonster.me/2020/06/27/org-roam-introduction.html][使用 org-roam 构建自己的知识网络 · ZMonster's Blog]]

[2021-08-01 Sun] org-capture的更佳替代品
[2020-08-07 Fri] 感觉用处不大

** DONE [2020-05-27 Wed] rust-fmt出问题了
- State "DONE"       from "TODO"       [2020-06-07 Sun 10:05]
: +format/region-or-buffer
禁用了事. 一般也仅用在rust-mode中

快捷键:
: SPC-m-f, SPC-m-C-f SPC-m-=

[2020-06-14 Sun] 已修复, 但不正常
- [[https://github.com/hlissner/doom-emacs/commit/991a205ebd439214f5e9f9d6bf68303f44221d48][Fix wrong-number-of-args error on +format/region-or-buffer · hlissner/doom-emacs@991a205]]

** DONE [2020-05-16 Sat] doom更新出问题
- State "DONE"       from "TODO"       [2020-05-27 Wed 08:49]
- https://github.com/hlissner/doom-emacs/issues/2802#issuecomment-606654151

** DONE [2020-04-27 Mon] 好像org响应有些慢了
- State "DONE"       from "TODO"       [2020-05-06 Wed 14:03]
- [[https://github.com/hlissner/doom-emacs/issues/1301][Hang when scrolling with mouse · Issue #1301 · hlissner/doom-emacs]]
- [[https://github.com/hlissner/doom-emacs/issues/2217][[BUG] Slow scrolling/cursor movement on macOS with large window · Issue #2217 · hlissner/doom-emacs]]

[2020-04-28 Tue] 初步怀疑是doom修改org中的Link或其它fontify导致的.
[2020-04-29 Wed] 确定material theme是最大的元凶

** [2020-04-24 Fri] 解决hack modules中autoloads代码无法加载的问题
需要修改autoloads中首行的路径, 同时不能使用软链接
: -;;; lang/org/autoload/org-link.el -*- lexical-binding: t; -*-
: +;;; ~/.doom.d/modules/gwp/org/autoload/org-link.el -*- lexical-binding: t; -*-

** DONE [2020-03-22 Sun] workspace保存时经常出错的问题
- State "DONE"       from "TODO"       [2021-09-29 Wed 20:32]
[2021-09-12 Sun] 最近正常
无法确定问题的根源, 有时成功, 有时失败. 成功案例:
- Cu-u SPC-l-s, 失败后再用SPC-l-s

** DONE [2020-03-20 Fri] org中narrow功能                                  :Idea:
- State "DONE"       from "TODO"       [2021-08-26 Thu 07:44]
org中进行Literate porgramming时, 如果source blocks太多, 会严重影响性能, 这时很有
必要配合narrow来进行view或tangle.

org-tree-to-indirect-buffer 比 org-narrow-to-subtree更好用, 前者不会影响全局
buffer, 可以同时浏览多个narrowed subtree, 互不影响.
- 多次使用 org-tree-to-indirect-buffer时切换narrow和widden状态.
- 使用C-u调用时, 可以同时开多个narrow buffer.

** DONE [2020-03-13 Fri] smartparens学习
- State "DONE"       from "TODO"       [2021-10-02 Sat 21:43]
- [[https://ebzzry.io/en/emacs-pairs/][Emacs and Pairs]]
- [[https://gist.github.com/pvik/8eb5755cc34da0226e3fc23a320a3c95][A Cheatsheet for Emacs Smarparens example configuration]]

| sp-kill-sexp | 删除光标附近符号对内容 |

** TODO [2020-03-13 Fri] vterm-toggle [[https://github.com/jixiuf/vterm-toggle][jixiuf/vterm-toggle: toggles between the vterm buffer and whatever buffer you are editing.]]
这个可以自定义的地方更多.

** TODO [2020-03-01 Sun] doom evil学习
- [X] [[https://github.com/noctuid/evil-guide][noctuid/evil-guide: Draft of a guide for using emacs with evil]]
- [ ] 这个和regex-align有点像 https://github.com/edkolev/evil-lion
- [ ] [[https://noelwelsh.com/posts/doom-emacs/][Noel Welsh: Doom Emacs Workflows]]
- [ ] [[https://github.com/hlissner/doom-emacs/blob/develop/modules/editor/evil/README.org][doom-emacs/README.org at develop · hlissner/doom-emacs]]
- [ ] 位置跳转: better-jumper-jump-backward. 先按ctrl-o, 跳回之前的位置, 按TAB返回.
- [ ] [[https://github.com/hlissner/evil-multiedit][hlissner/evil-multiedit: Multiple cursors for evil-mode, based on iedit]]
- [ ] [[https://github.com/gabesoft/evil-mc][gabesoft/evil-mc: Multiple cursors implementation for evil-mode]]
- [ ] indent-rigidly: C-x TAB, 可以很方便地向左或向右移动选中文本.
- [X] expand region: 可以用vi部分代替 [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#why-do-non-evil-users-get-expand-region-but-not-evil-users][URL]]
- [X] 各种注释相关操作: [[https://github.com/redguardtoo/evil-nerd-commenter][redguardtoo/evil-nerd-commenter: Comment/uncomment lines efficiently. Like Nerd Commenter in Vim]]
- [X] gd: 跳转到函数定义位置. 并不总是灵光.
- Ctrl-h b: 显示所有按键 which-key-show-keymap Ctrl-h b m

** DONE [2020-03-06 Fri] 使用 custom-set-faces!来修改theme
- State "DONE"       from "TODO"       [2020-04-25 Sat 09:07]
#+begin_src elisp :tangle no
(load-theme 'material t)
;; (load-theme 'doom-one-light t)
(custom-set-faces!
  '(org-todo :foreground "yellow" :weight bold :background "#263238")
  '(org-done :foreground "yellow" :weight bold :background "#263238")
  '(org-table :foreground "#e3f2fd")
  '(org-level1 :foreground "#e3f2fd")
  '(org-headline-done :foreground "gray")
  )
#+end_src

** DONE [2020-03-01 Sun] 各种emacs distribution
- State "DONE"       from "TODO"       [2020-04-25 Sat 09:07]
- [[https://github.com/emacs-tw/awesome-emacs][emacs-tw/awesome-emacs: A community driven list of useful Emacs packages, libraries and others.]]

** DONE [2020-04-20 Mon] 新建frame时最大化窗口
- State "DONE"       from "TODO"       [2020-04-25 Sat 08:53]
[[https://emacs.stackexchange.com/questions/2999/how-to-maximize-my-emacs-frame-on-start-up][How to maximize my Emacs frame on start-up? - Emacs Stack Exchange]]

: (add-to-list 'default-frame-alist '(fullscreen . maximized))

** DONE [2020-04-03 Fri] 试用 org-sidebar
- State "DONE"       from "TODO"       [2020-04-07 Tue 20:01]
- [[https://www.reddit.com/r/orgmode/comments/dbsngi/finally_solving_the_lack_of_a_treeview_navigation/][Finally solving the lack of a tree-view navigation window in Org : orgmode]]

用法:
- 打开 org-sidebar-tree-mode, SPC-m-s-t
- 切换narrow, SPC-m-Enter

** DONE [2020-03-24 Tue] 可以用[[https://github.com/raxod502/el-patch][el-patch]]来hack代码

- State "DONE"       from "TODO"       [2020-04-20 Mon 09:28]
https://org-roam.readthedocs.io/en/latest/ecosystem/
#+BEGIN_SRC elisp :tangle no
  (use-package deft
    ;; same as above...
    :config/el-patch
    (defun deft-parse-title (file contents)
      "Parse the given FILE and CONTENTS and determine the title.
  If `deft-use-filename-as-title' is nil, the title is taken to
  be the first non-empty line of the FILE.  Else the base name of the FILE is
  used as title."
      (el-patch-swap (if deft-use-filename-as-title
                         (deft-base-filename file)
                       (let ((begin (string-match "^.+$" contents)))
                         (if begin
                             (funcall deft-parse-title-function
                                      (substring contents begin (match-end 0))))))
                     (org-roam--get-title-or-slug file))))
#+END_SRC

** DONE [2020-02-29 Sat] 改进literate rust编程体验
- State "DONE"       from "TODO"       [2020-03-21 Sat 20:00]
- [X] rust中"{|}" 中回车行为. 原来是spacemacs中有特别配置. [[https://emacs.stackexchange.com/questions/2837/automatically-formatting-brackets][stackexchange]]
- [X] Tab键自动使用yas展开代码. 禁用init.el中snippets.
- [X] 还原在normal/insert state下, Ctrl-k的行为: org-kill-line
- [X] rustic新加的功能虽多, 但用处都不大. 还是用rust-mode好了.
- [X] org-edit-src-exit: 不能定义为Ctrl-C Ctrl-C, 因为org-src里的主模式很多会用到这个键.
- [X] 全局禁有flyspell-mode
- [X] ctrl-d又不管用了, alt-l
- [X] evil-org: 在source code中的enter行为. 改为进入代码.
- [X] magit响应慢
- [X] use structopt::*中, 输出*会出现两个, 按/会出现两个.
- [X] visual state下Tab键应该indent代码

** DONE [2020-02-28 Fri] 太多需要修改的地方了, 只能一点点改进, 慢慢搭
- State "DONE"       from "TODO"       [2020-03-21 Sat 20:00]
- [X] 去掉dired中图标显示及其它多余功能, 简单稳定就好
- [X] org-capture功能
- [X] odt exports功能
- [X] zotero links
- [X] 添加re-open当前文件功能? [[https://emacs.stackexchange.com/questions/3330/how-to-reopen-just-killed-buffer-like-c-s-t-in-firefox-browser][URL]]
- [X] dired-copy-filename-as-kill 复制文件路径, 可以 spc-m y
- [X] 将spc-o-T改成和spacemacs一样. vterm也就是图方便, 功能上还是不如gnome-terminal之类顺手.
- [X] [[https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/window-select/README.org][window-select]] 可以用C-w C-w, 比spacemacs下更方便.
- [X] 看来还是得用evil-org. 比如dd命令在hide状态下应该为 delete subtree
- [X] o: evil-org-open-below +org/insert-item-below, 可以用ctrl-enter, ctrl-shift-enter
- [X] (spacemacs/open-file-or-directory-in-external-app ARG)
- [X] insert-mode下 Ctrl-h 应为help
- [X] insert-mode: ctrl-d evil-shift-left
- [X] SPC-c l, comment line
- [X] 检查单词: z=, flyspell-correct-at-point (启用spell module即可)
- [X] flyspell错字提示 (可以手动关掉, flyspell-mode, SPC-t s)
- [X] insert-mode下 Ctrl-y 键应为粘贴
- [X] org-metaright, org-demote-subtree
- [X] helm-resume => SPC r l
- [X] deadgrep notes

** DONE [2020-03-14 Sat] 中文字体设置 [[https://emacs-china.org/t/doom-modeline-2-1-0/9251/13][URL]]
- State "DONE"       from "TODO"       [2020-03-15 Sun 09:45]
可以去掉cnfonts, 直接中英文分开设置, 解决modeline显示异常的问题.

** DONE [2020-03-10 Tue] 启用format模块
- State "DONE"       from "TODO"       [2020-03-10 Tue 21:16]
- [[https://github.com/lassik/emacs-format-all-the-code][lassik/emacs-format-all-the-code]]

需要的工具:
- Shell script (shfmt)
- Python (black)
- Rust (rustfmt)

对于快捷键 SPC-c-f

** DONE [2020-03-05 Thu] 截图新方式: org-capture + org-download? :ATTACH:
:PROPERTIES:
:ID:       e0591a18-e431-46bc-a5b5-568eeee5c567
:END:
- State "DONE"       from "TODO"       [2020-03-06 Fri 14:29]
使用xclip将clipboard中的image另存为文件, 然后再调org-download截图.

#+DOWNLOADED: screenshot @ 2020-03-06 16:07:53
#+caption: 截图留念
#+name: fig:feaf75a4
#+attr_org: :width 500
#+attr_odt: :width 10
[[attachment:2020-03-06_16-07-53_screenshot.png]]

- 参考: [[https://emacs.stackexchange.com/questions/41016/how-can-i-yank-images-from-emacs][osx - How can I yank images from Emacs? - Emacs Stack Exchange]]
- [2020-03-06 Fri] org-download-delete有问题, 不能用了.
- 使用下面的脚本, 从X11 clipboard复制截图, 这样避免了截图时emacs窗口如何最小化的
  问题. [2020-03-06 Fri] 不太好用, 用rust重写了.
  #+begin_src shell :tangle no
  set -e
  if [ "x$1" = "x" ]; then
      echo "Usage: [options] $0 file..." >&2
      exit 1
  fi

  xclip -selection clipboard -t image/png -o > "$1"

  # remove zero sized file
  [ ! -s "$1" ] && rm "$1"
  #+end_src

** DONE [2020-03-02 Mon] 完成ripgrep搜索notes功能
CLOSED: [2020-03-02 Mon 14:49]
- State "DONE"       from              [2020-03-02 Mon 14:49]
需要修改ripgrep配置, 使之能follow symlinks. [[https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#configuration-file][ripgrep/GUIDE.md at master · BurntSushi/ripgrep]]

相关文件:
: ~/.ripgreprc
: ~/.zshrc

** DONE [2020-03-01 Sun] 关于ispell的问题
CLOSED: [2020-03-01 Sun 19:35]
- State "DONE"       from "TODO"       [2020-03-01 Sun 19:35]
以前常用 ispell-word 来查词, 现在发现得开启ispell-mode后才正常, 不然会报错.

** DONE [2020-02-28 Fri] 解决org-mode中怪异的Tab键行为问题
CLOSED: [2020-02-28 Fri 15:42]
- State "DONE"       from "TODO"       [2020-02-28 Fri 15:42]
- [[https://github.com/hlissner/doom-emacs/issues/1897][[BUG] org-mode TAB key mapped to different command when emacs running as daemon · Issue #1897 · hlissner/doom-emacs]]

去掉:config中的 +bindings 开关正常了.

** DONE [2020-02-28 Fri] 可用的theme
CLOSED: [2020-02-29 Sat 18:12]
- State "DONE"       from "TODO"       [2020-02-29 Sat 18:12]
[[*theme][theme]]
: doom-acario-light
: doom-material
: doom-moonlight
: doom-nord-light x
: doom-nord
: doom-oceanic-next
: doom-one-light x
: doom-opera-light x
: doom-palenight
: doom-peacock x
: doom-snazzy
: doom-tomorrow-day x
: doom-vibrant

** DONE [2020-02-27 Thu] 解决 org-mode 插入时间戳快捷键被占用的问题
CLOSED: [2020-02-28 Fri 15:42]
- State "DONE"       from "TODO"       [2020-02-28 Fri 15:42]
: C-c ! (org-time-stamp-inactive)

禁用:checkers组中的modules即可.

** DONE [2020-02-27 Thu] doom尝鲜
- State "DONE"       from "TODO"       [2020-04-07 Tue 20:02]
doom的优点:
1. 较spacemacs轻量, 启动快, 架构简单, 后续易维护
2. 和spacemacs使用类似的key-bindings
3. 社区质量高, 作者维护热情高

修改配置时注意:
1. 不要使用emacs中内置的custom机制
2. 不用使用use-package中的包安装机制(:ensure)
3. 不要使用org-babel中的rg-babel-do-load-languages机制

- config中的flags: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#flags][doom-emacs/getting_started.org at develop · hlissner/doom-emacs]]
- doom api: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#map][doom-emacs/api.org at develop · hlissner/doom-emacs]]

https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/rest/README.org

https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/zen/README.org

https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/workspaces/README.org

https://github.com/hlissner/doom-emacs/issues/2483

doom clean && doom sync && doom build

https://github.com/emacs-tw/awesome-emacs

git clone https://code.orgmode.org/bzg/org-mode.git

doom要clone很多github上的repo, 很容易被RESET, 导致安装失败.

git使用v2ray proxy
https://gist.github.com/evantoli/f8c23a37eb3558ab8765

https://segmentfault.com/q/1010000000118837

** [2018-08-22 Wed] 禁用自动为babel source block生成name的功能.
用处不大.

** [2018-06-01 Fri] 解决expand-region在org-mode buffer中的问题
使用扩选功能时, expand-region会自动展开显示之前隐藏outline中的内容, 导致显示内容跳转.

解决方案:
- 修改expand-region.el, 删除掉 "(eval-after-load 'org)" 相关内容

** DONE [2018-01-24 Wed] 修复org-capture, org-protocol中的几个bug
- State "DONE"       from "TODO"       [2020-08-01 Sat 16:20] \\
  换用doom后没再发现
- [X] 在org-capture中, 如果abort会删掉refile.org最开头条目的星号.
- [X] firefox中, org-protocol在某些网页中无法激活. 是firefox中的"content security policy"捣的鬼. 在config里禁用即可. "security.csp.enable"
- [X] [[https://www.reddit.com/r/firefox/comments/k64ha0/fix_allow_this_site_to_open_the_protocol_link/][Fix "Allow this site to open the PROTOCOL link with APPLICATION" warning : firefox]]

** DONE [2018-01-06 Sat] 解决odt导出latex公式分辨率太低的问题
CLOSED: [2018-01-10 Wed 16:18]
- State "DONE"       from "TODO"       [2018-01-10 Wed 16:18] \\
  odt使用dvipng导出公式时生成的图片分辨率太低, 这里放大3倍, 然后通过设置odt dpi为
  300(默认为96), 将image缩小为原始大小.

** [2017-12-12 Tue] 修改org-download设置, 调整odt导出参数
自定义org-download-annotate-function
- 自动添加图片的 ~name~ ~caption~, 方便odt导出时图片自动编号及交叉引用.
- 自动添加 ~#+attr_org~ 属性, 设置org预览图片的大小
- 自动添加 ~#+attr_odt~ 属性, 设置odt导出时的图片大小

References
- [[http://kitchingroup.cheme.cmu.edu/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them/][Drag images and files onto org-mode and insert a link to them]]

** [2017-11-19 Sun] 添加新功能, 在buffer或dired当前目录中打开gnome-terminal
按键: ~SPC o T~

** TODO [2017-11-13 Mon] 完善org-to-read 实现类似zotfile的功能
[2017-11-17 Fri] 类似没太大必要. 有更流畅的方式?

- 自动将当前headline下的附件放至某个READ目录
- 手机上阅读并注释, 并同步回修改.
- 切回DONE状态时从READ目录里取回修改后的版本, 并导出pdf注释.

References
- [[https://github.com/machc/pdf-tools-org][machc/pdf-tools-org: pdf-tools and org-mode integration]]
- [[http://tech.memoryimprintstudio.com/pdf-annotation-related-tools/][PDF Annotation Related Tools – Emacs, Arduino, Raspberry Pi, Linux and Programming etc]]
- [[http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/][View and annotate PDFs in Emacs with PDF-tools | Pragmatic Emacs]]
- [[https://matt.hackinghistory.ca/2015/11/11/note-taking-with-pdf-tools/][Note Taking with PDF Tools | Thoughts on Code & History]]
- [[https://github.com/politza/pdf-tools/issues/134][extract annotations? · Issue #134 · politza/pdf-tools]]
- [[https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/][Help me with my org-mode workflow for note-taking? : emacs]]

** DONE [2017-11-10 Fri] 进一步改进org-attach功能 方便移动不同的outline及其attachments
- State "DONE"       from "TODO"       [2021-09-03 Fri 17:47]
- State "DONE"       from "TODO"       [2017-11-10 Fri 20:37]

操作流程
- 存储当前entry的附件内容: gwp/org-attach-copy
- 将当前org entry文本移动到新的文件中
- 将之前存储的附件内容复制到新的attachment目录中来: gwp/org-attach-paste. 此时会
  自动生成与之前相同的attach目录和文件.

** DONE [2017-11-10 Fri] 修改tangle函数, 能更方便的tangle代码
- State "DONE"       from "TODO"       [2020-04-07 Tue 20:03]
将gwp/org-babel-tangle-dwim绑定到 ~SPC o b~
- 使用 ~Ctrl-c '~ 进入代码窗口
- 修改代码后, 按 ~SPC o b~
- 该函数自动保存代码, 并tangle对应文件

** DONE [2017-10-27 Fri] 完善org-protocol和org-capture             :Starred:
CLOSED: [2017-11-01 Wed 10:34]

- 添加将html页面生成org-mode link功能, 通过clipboard来与emacs交互. 解决KDE下capture窗口失焦问题 [2021-09-09 Thu]
- 进一步完善js代码
- 进一步优化bookmarklet, 方便在firefox中使用 [2018-01-24 Wed 21:02]
- State "DONE"       from "TODO"       [2017-11-01 Wed 10:34]

*** store-link
版本1: 使用selection或URL做为description
#+BEGIN_SRC javascript
  javascript:
  var title = window.getSelection();
  if (title == '') {
      title = 'URL';
  }

  location.href = 'org-protocol:///store-link?url=' + encodeURIComponent(location.href) + '&title=' + encodeURIComponent(title);
#+END_SRC

版本2: 使用selection或document title做为description. 如果没有, 默认为URL.
#+BEGIN_SRC javascript
javascript:
var title = window.getSelection();
if (title == '') {
    title = document.title;
    if (title == '') {
        title = 'URL';
    }
}

location.href = 'org-protocol:///store-link?url=' + encodeURIComponent(location.href) + '&title=' + encodeURIComponent(title);
#+END_SRC

*** capture
使用'n'模板: 插入当前页面的链接, 使用页面标题或URL做为链接描述. 引用选中文字.

#+name: 12d167c2-43c7-4f54-9a27-2b55432d113d
#+BEGIN_SRC javascript
javascript:
var title = document.title;
if (title == '') {
    title = 'URL';
}

location.href = 'org-protocol:///capture?template=n' + '&url=' + encodeURIComponent(location.href) + '&title=' + encodeURIComponent(title) + "&body=" + encodeURIComponent(window.getSelection());
#+END_SRC

*** clipboard
生成org链接, 方便capture. 不需要走 org-protocol.

链接生成规则: 如果有选中文字, 则以选中文字为title, 否则以页面标题为链接title. 如
果页面标题也为空, 则以"URL"为链接显示标题.

[[https://gist.github.com/stefanmaric/2abf96c740191cda3bc7a8b0fc905a7d][Create Bookmarklet (browser bookmark that executes Javsacript) to copy a given text to Clipboard]]

#+begin_src js
var title = window.getSelection();
if (title == "") {
  title = document.title;
}
if (title == "") {
  title = "URL";
}
(function (text) {
  var node = document.createElement("textarea");
  var selection = document.getSelection();

  node.textContent = text;
  document.body.appendChild(node);

  selection.removeAllRanges();
  node.select();
  document.execCommand("copy");

  selection.removeAllRanges();
  document.body.removeChild(node);
})("[[" + location.href + "]" + "[" + title + "]]");
#+end_src

javascript:void function(){var a=window.getSelection();""==a%26%26(a=document.title),""==a%26%26(a="URL"),function(a){var b=document.createElement("textarea"),c=document.getSelection();b.textContent=a,document.body.appendChild(b),c.removeAllRanges(),b.select(),document.execCommand("copy"),c.removeAllRanges(),document.body.removeChild(b)}("[["+location.href+"]["+a+"]]")}();

*** References
原理: 通过劫持emacsclient功能, 将org-protocol://之类的URL与org-mode实现功能交互.
- org-capture.el
- [[https://www.ruanyifeng.com/blog/2011/06/a_guide_for_writing_bookmarklet.html][Bookmarklet编写指南 - 阮一峰的网络日志]]
- https://github.com/alphapapa/org-protocol-capture-html
- org capture extensions: https://github.com/sprig/org-capture-extension
- [[http://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol.el – Intercept calls from emacsclient to trigger custom actions]] (outdated)
工具
- 从js代码生成url: [[https://chriszarate.github.io/bookmarkleter/][Bookmarkleter]]
- [[http://jsbeautifier.org/][Online JavaScript beautifier]]
- [[https://mrcoles.com/bookmarklet/][Bookmarklet Creator with Script Includer - Peter Coles]]

** [2017-10-06 Fri] 解决org-mode加载大文件太慢的问题
- [2017-10-07 Sat] 发现是hl-todo这个包导致的问题. 禁用该包即可.
- [2017-10-06 Fri] 使用spacemacs-base distrubtion即可.
** [2016-12-10 Sat] 禁用选中的文字进入clipboard的功能 [[https://github.com/syl20bnr/spacemacs/blob/master/doc/FAQ.org#prevent-the-visual-selection-overriding-my-system-clipboard][URL]]
: ;; Prevent the visual selection overriding my system clipboard
: (fset 'evil-visual-update-x-selection 'ignore)

** [2016-12-10 Sat] 修改spacemacs中默认的undo行为 默认的undo太变态了
: (setq evil-want-fine-undo t)

** [2016-10-14 Fri] emacs24-starter-kit 更新维护不是很活跃. 现在已是 emacs25 时代了. 考虑换到 spacemacs


* Tips
~SPC h d~
** Universal arguments
SPC-u, C-u
** general: keybindings
为各种按键生成一个漂亮的 org 文档
: general-describe-keybindings

使用 general-def 或 bind-key! 来定义按键

** 统计字符数
g C-g
: count-words

** 拼写检查
z=
: flyspell-correct-at-point

** Swiper/Ivy notes
[[https://github.com/condy0919/emacs-newbie/blob/master/introduction-to-ivy.md][ivy 新手教程]]

| 命令                          | 功能                                   | Tips                            |
|-------------------------------+----------------------------------------+---------------------------------|
| counsel-recentf               | 打开最近文件列表                       | 按C-o,f可强制在新的frame打开    |
| counsel-org-goto              | 跳转到org headline                     | SPC-m .                         |
| counsel-org-goto-all          | 跳转到所有org buffers的headline        | SPC-m /                         |
| ivy-occur                     | 将ivy candidates界面变成可交互的buffer | 支持wgrep, 比如c-x-c-q          |
| counsel-org-tag               | 用于打标签. (SPC-m-q)                  | 当ctrl-c ctrl-c不好用是可用这个 |
| swiper-isearch-thing-at-point | 搜索光标下内容                         | 可预告选择要搜索的内容          |
| ivy-next-history-element      | 在minibuffer中切换历史搜索项           | M-n/M-p                         |
| swiper-avy                    | 在swiper搜索结果中进行avy跳转          | C-'或M-;                        |
| ivy-occur                     | 将candidates变为独立的可操作的buffer   | C-c C-o                         |
| ivy-toggle-regexp-quote       | 在minibuffer中切换regexp特殊字符转义   | M-r, 比如搜索"."时              |

更多按键可查看: ivy-minibuffer-map

** org-mode
| org-kill-note-or-show-branches | C-c C-k | 查看headlines, 当前上下文TAB键无效时有用 |
| org-edit-special               | C-c '   | 默认按键难按, 改为SPC-M-;                |

Movement
| Key Binding | Description                            |
|-------------+----------------------------------------|
| ~g h~       | Move up one level in headings          |
| ~g j~       | Move to next heading on same level     |
| ~g k~       | Move to previous heading on same level |
| ~g l~       | Move down one level in headings        |

refile流程:
- 打开refile.note
- 检查其中的条目, 找到可能的合适的归档note文件, 打开之.
- SPC-m-r-r, org-refile
- SPC-u SPC-m-r-r: 跳转至refile targets

** 自动补全
- [[https://github.com/hlissner/doom-emacs/blob/develop/modules/completion/company/README.org][doom-emacs/README.org at develop · hlissner/doom-emacs]]

查看evil-insert-state-map中的绑定可知:

| C-x C-f | company-files 补全文件名, 类vim   |
| C-x C-s | company-yasnippet: 补全 yasnippet |
| C-x C-l | +company/whole-lines 补全行       |

** 查看buffer major mode
eval: major-mode

** 各种跳转
| g;              | goto-last-change         |
| g,              | goto-last-change-reverse |
| gi              | evil-insert-resume       |
| gv              | evil-visual-resume       |
| SPC-s-i         | imenu symbol             |
| Alt-mouse-wheel | jump backward/foraward   |
| SPC-j-m         | emacs mark ring          |

行内跳转
- f: 向行尾搜索单字母(evil-snipe-f)
- ?: 向行始搜索单字母(evil-ex-search-backward)

搜索跳转:
- 搜索单字母: avy-goto-char
- 搜索双字母: avy-goto-char-2
- 搜索任意字符: isearch + avy-search
- swiper + ivy-avy
- 在evil中按*或/键搜索当前word或任意词, 再SPC-j-j 启用avy jump

marking ring跳转
- 不同buffer: SPC-`
- 同一buffer: ``
- 同一buffer或不同buffer, 更远的位置:
  - emacs mark ring: SPC-j-m

** evil功能
查看evil-visual-state-map帮助
*** evil-set-initial-state
设置不同模式对的初始按键模式

*** 快速移动
跳转至某行(G):
: evil-goto-line

^
: evil-first-non-blank

至行首(0, g0)
: evil-beginning-of-line

至行尾($)
: evil-end-of-line

将光标移动到窗口底部(L)
: evil-window-bottom

将光标移动到窗口顶部(H)
: evil-window-top

首行(gg)
: evil-goto-first-line

尾行(G)
: evil-goto-line

跳至之前的行('')
: evil-goto-mark-line

跳至之前的位置(``)
: evil-goto-mark

至成对(%)
: evil-jump-item

g;
: goto-last-change

g,
: goto-last-change-reverse

*** 文本选择
选中文字后按S, 再按"(" 可在选中字符前后加括号.

evil下按v再按a有不少对应的功能, 比如"va[" 选中方括号中的内容
- va: 比如选择包含括号的内容
  - vab: 选择圆括号及其内的文字
  - vau: 选择url
- vi: 比如选择括号内的内容
  - vio: 文字块, 不含括号
- vS => 插入包围操作

*** 编辑功能
大小写互换: ~, 大写文字: U, 小写文字: u

*** 复制粘贴
- y (evil-yank): copy region
- Y (evil-yank-line): 复制到行尾

*** 快速搜索
/
: evil-search-forward

*
: evil-search-word-forward

?
: evil-search-backward

n/N
: evil-search-next
: evil-search-previous

- f/F: 搜索单个字符
- s/S: 搜索两个字符
- t/T: 搜索行内的一个字符

其后按","或";"重复之前的搜索操作(evil-repeat-find-char).

按缩进层次选择文本:
- vii
NOTE: 选择文字区域后可按"o"键exchange-point-and-mark, 再由上或由下扩选范围.

改变选中数字大小:
- g+或g=, g-

*** z开头的命令:
- zc, zo关闭或打开所在headline
- zn/zN: 切换查看当前headline (indirect buffer)
- zi: 切换image显示

Z开头的命令
- ZQ: evil-quit
- ZX: 保存并关闭当前buffer

*** org headline跳转
- gk, gj
- gh, gl, gH

*** resume相关命令
- gi: evil-insert-resume
- gv: evil-visual-restore

*** 找到光标下的文件
gf
: evil-find-file-at-point-visual

*** 转换开关
emacs相关
\
: evil-execute-in-emacs-state

C-z
: evil-emacs-state

在insert state下按C-o可在normal state下执行命令. 这样就没必要定义doom-leader-alt-key了?
: evil-execute-in-normal-state

*** ex命令
比如以":"进行ex命令:
: :g/evil/d
以上命令搜索evil开头的行, 并删除之.

: :v/evil/d
删除不包括evil的行

:m 挪至行号

:! 执行shell命令
: evil-shell-command


** multi-cursor: 同时操作多个光标
- gzz
- gzc

** dired-jump
| SPC-f-j |

** window/frame
| SPC w v   | vertical split                       |
| SPC w s   | horizontally split                   |
| SPC w d   | remove window                        |
| SPC w r   | swap windows                         |
| SPC w f   | tear off window, float window 很有用 |
| SPC w o   | 最大化popup                          |
| SPC w z   | 自动将当前window放大至合格大小       |
| SPC w m m | 最大化当前窗口                       |
| SPC w u   | 撤销窗口改动                         |
| SPC o f   | 新开窗口, make-frame                 |

** 调试emacs
真好用.
: debug-on-error

在doom里可以用 SPC-h-d-d

也可启用profiler, SPC-h-d-t, 查看命令调用堆栈

** 书签管理
: SPC-f-b

#+BEGIN_SRC emacs-lisp :tangle no
(counsel-bookmark)
#+END_SRC

** multiple-cursors
按Alt-D高亮word, 逐步选中多个可编辑单元. 按ESC退出.

** 删除空格
- just-one-space 默认绑定为 ~Ｍ-SPC~

** 切换只读模式
: C-x C-q
: SPC-t r

** magit
- 在magit status窗口, 可以直接使用dired访问文件: magit-dired-jump (C-M-i)
- 使用yadm管理dotfiles, SPC-g-.

| magit-status          | SPC-g-g                     |
| magit-stage-file      | s                           |
| magit-file-dispatch   | SPC-g-.                     |
| magit-log-buffer-file | Show log for current buffer |
| magit-delete-thing    | 按x, 可删除光标前文件       |

: reset: O
: discard: x
: git rm --cached: K

timemachine:
<normal-state> C-n    git-timemachine-show-next-revision
<normal-state> C-p    git-timemachine-show-previous-revision


处理当前文件的编辑历史:
: magit-file-dispatch

** 粘贴替换选中文字
vi模式下使用P命令.

** 使用外部程序打开文件的方式
emacs 默认使用 docview mode 来打开链接的文件, 比如 PDF 等, 不太方便. 操作步骤:
1. dired-jump (SPC-f-j): 使用 dired 打开当前文件所在目录
2. 在 dired 界面上选择某个文件, 使用 external 程序打开 (SPC-f-o).
3. 也可以在 dired 界面上用"!"或"&"命令, 指定任意程序打开.

** 打开buffer文件所在目录
~SPC-u SPC-f-o~

* TODO Note management
- 火花笔记, fleeting note, slip-box: 这些用org-capture就很好, 关键是快, 电光石火
- 永久笔记, permanent note: 这些可放置在zotero里. 使用zotero数据库, 可实现条目的
  永久链接, 不受笔记路径变化的影响.

搜索所有.note笔记名
- SPC-n-f (gwp/find-file-in-notes)
全文搜索所有.note笔记
- SPC-s-n (gwp/search-all-notes)

** roam research/org-roam
我觉得可以基于zotero来实现类似roam的组织方式. 在zotero中可以打标签, 也可以设置
related items. 同时zotero中的items也是平级组织, 统一命名, 使用zotero uri可以在
org文档中自由引用跳转. 现在唯一欠缺的时像org-roam-server那样可以交互式的展现关联
条目的network展现方式.

org-roam可用于替代org-capture, 这样在浏览时随时记录, 并可保留note间的关联性. 同
时由于是多文件, 可以减少文件同步冲突.

org-roam-capture
org-roam-node-find
org-roam-node-insert
org-roam-buffer-toggle

关键功能:
- 双向链接 backlinks
- 块引用
  - [[https://github.com/nobiot/org-transclusion][nobiot/org-transclusion: (alpha) Emacs package to enable transclusion with Org Mode]]
  - [[https://github.com/Kinneyzhang/roam-block][Kinneyzhang/roam-block: An all-purpose block ref and block embed implement in emacs.]]
- 图表展示(可用org-protocol链接)

* TODO Literate Programming in Rust
需要安装[[https://github.com/racer-rust/racer][racer]], 注意不能用系统库中的, 不然补全std会报错.

: rustup toolchain add nightly
: rustup component add rust-src
: cargo +nightly install racer
: racer complete std::io::B

- 使用 "Ctrl-c Ctrl-d" 可以自动添加或删除dbg!
- 使用 "Ctrl-c Ctrl-f" rustfmt格式化buffer
- 以上按键在org代码块中也可直接执行, org-babel-do-key-sequence-in-edit-buffer
- (citre-jump-back): 需要定义tag文件, 支持跳转至函数定义, 很帅 (SPC-j-c-d, SPC-j-c-b)
- cargo compile功能: (gwp/rust-cargo-transient)
- 在org中编辑代码, 选择当前代码, (gwp/org-babel-tangle-dwim)后可将代码所tangle至的目标文件及所有blocks都导出.
- 可能用得上: rust-promote-module-into-dir

* TODO Python scripting
- 使用tmux开一终端, 打开ipython
- 在emacs中写代码, 使用 +tmux/send-region来发送代码到ipython窗口

* TODO Research Writing Workflow
** 基本流程
- 使用org-mode来完成文字, 图片, 表格, 公式等内容.
- 导出为odt格式.
- 使用[[http://zotero-odf-scan.github.io/zotero-odf-scan/][RTF/ODF-Scan for Zotero]] 来格式化zotero引用.
  - [2018-01-05 Fri] 已自定义export函数, 不必使用odf-scan, odt导出一步到位.
- 在Libreoffice中进行必要的修改.
- 输出PDF和或doc.

** org odt export
- odt导出功能非常强大, 对于普通用户, odt无疑比latex的易用性和可定制性更强.
- 可以在org buffer里指定odt模板文件. 使用odt而不是ott格式会更方便一些, 因为打开
  ott时没有具体的内容可参照修改结果.
- 码公式的时候, 使用"begin{equation*}"block, odt会自动编号. 不能设置scale, width
  等图片属性.

References
- [[https://github.com/emacsmirror/org/blob/master/lisp/ox-odt.el][org/ox-odt.el at master · emacsmirror/org]]
- [[https://orgmode.org/manual/OpenDocument-Text-export.html][The Org Manual: OpenDocument Text export]]

** RTF/ODF-scan插件
这个插件可以将纯文本的引文标记, 格式化为zotero word processor可处理的zotero引文.
此外, 这个扩展还可以反向的将zotero word processor处理后的引文转换成纯文件标记.

从官网下载扩展后, 在zotero standalone的addone窗口安装.

1. 在zotero中设置好quick copy的输出格式为 "scannable cite".
2. 在zotero中选择目标条目, 将其拖入org-mode当即可.
3. 通过修改config选项(ODFScan.useZoteroSelect), odfscan marker字段中的最后一项也
   可以为zotero链接. 但在格式化时不能正常生成odt文件, 这可能是一个bug.

* TODO Research Literature Management Workflow
- [[https://github.com/joostkremers/ebib][joostkremers/ebib: A BibTeX database manager for Emacs.]]
- [[https://emacs-china.org/t/emacs/12580][你的emacs文献/知识管理方案是什么？ - Emacs-general - Emacs China]]

将annotation.note放到zotero内置库里的优点和问题:
- 优点: 以zotero为中心进行数据管理. 从文献到笔记很方便.
- 优点: note和pdf路径相对稳定, 不用担心更换系统后文件路径变化导致的问题.
- 优点: 方便实现类似roam等工具类似的功能.
- 问题: 不能方便地在zotero界面里进行搜索 (需要fulltext index) (但可以用自编工具
  notesearch来处理, 不过需要定期更新cache)

** Zotero笔记管理
- 在Emacs中gwp/insert-new-zotero-item, 将在zotero中新添加一report类似的note
- 在Zotero界面选中某文献, 右键Attach New File, 将自动附上一note文件

** 使用org-noter批注PDF
- [2021-08-19 Thu] org-noter也很长时间没有更新了
- [2020-01-01 Wed] org-noter比interleave功能更强.

将pdf文件关联到emacs, 使用pdf-tools打开(pdf-view-mode)
- 进入org-noter界面(SPC-n-n), 按提示将 annotation.note放到PDF所在目录
- 使用org-noter插入笔记

优点:
- Note和PDF直接关联, 不需要写任何代码. 方便易用.
- 原始zotero数据库中的为父本, 不同Note中的批注的有不同的副本.
需要更新.cache/notes列表.

流程:
- 在zotero界面, 选中待批注的PDF, "copy attachment path"
- 在普通的org文件中将zotero中的PDF列为附件.
- 打开org-noter批注该附件(space-m-n-n).

pdf-view快捷键
- pdf-view-scroll-down-or-previous-page: ctrl-d, ctrl-b
- pdf-view-scroll-up-or-next-page: ctrl-u, ctrl-f
- pdf-view-next-page-command: ctrl-j
- pdf-view-previous-page-command: ctrl-k
- pdf-view-first-page: gg
- pdf-view-last-page: G
- pdf-view-fit-width-to-window

鼠标
- 上一页: mouse-9
- 下一页: mouse-10

** 使用interleave批注流程(old)
- 在zotero界面, 选中待批注的PDF, "copy attachment path"
- 打开org-capture, 使用interleave模板, 生成~/annotation.note
- 在zotero界面, 使用zotfile的 "Attach New File"功能, 自动将annotation.note加入附
  件. (注意需要修改设置, 将note列入zotfile可管理的文件类型)
- 在zotero界面, 双击打开附入的note文件, 进入interleave编辑模式.

** References
- [[https://codearsonist.com/reading-for-programmers][Piotr Limanowski: Reading for Programmers]]
- [[https://www.researchgate.net/post/What_reference_manager_is_used_for_Emacs_users][What reference manager is used for Emacs users?]]
- [[http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/][A research workflow with Zotero and Org mode | mkbehr.com]]
- [[https://emacs.stackexchange.com/questions/24725/zotero-workflow-into-emacs][org mode - zotero workflow into emacs? - Emacs Stack Exchange]]

* Literate Programming Workflow
- 在代码窗口编辑时(org-edit-src), 使用C-x C-s来保存buffer(或SPC-f-s). 不要使用:w命令.
- 代码修改后, 使用gwp/org-babel-tangle-dwim函数来仅tangle当前block对应的代码文
  件. 可以在代码编辑窗口直接使用, 该函数会自动保存代码. (SPC-o-b, SPC-m-b-b)
- 使用counsel来实现不同headline间的快速跳转(counsel-org-goto, SPC-m-.)
- 可从org跳转至tangled src, 也可由tangled src跳转至org src. (SPC-j-t, SPC-j-o)
- 重要的tangle参数已在配置文件中做全局设置, 比如: ~padline~ ~mkdirp~ ~comments~

* TODO scripts
** dired.sh
[[https://gist.github.com/alphapapa/9c4eea0f204f865d37e8c99963feb922][Standalone Dired launcher]]

#+begin_src shell
# Launch Dired in a plain Emacs configuration.

# Arguments are passed to Emacs, e.g. "-nw" works as expected.

emacs -q "$@" \
      --eval "(dired default-directory)" \
      --eval "(defun kill-window-or-emacs () (interactive) (if (one-window-p) (kill-emacs) (delete-window)))" \
      --eval "(setq dired-dwim-target t delete-by-moving-to-trash t)" \
      --eval "(define-key dired-mode-map (kbd \"q\") #'kill-window-or-emacs)"
#+end_src

** org-archive.py
:PROPERTIES:
:header-args: :tangle pkg/.local/bin/org-archive.py :comments link :padline yes :mkdirp yes :shebang #! /usr/bin/env python2
:END:
*** TODO [2015-11-29 Sun] 使用 Kitchin 的 ox-archive.el 代替旧的 org-archive.py [[https://github.com/jkitchin/jmax/blob/master/ox-archive.el][URL]]
*** header
#+begin_src python
# -*- coding: utf-8 -*-
#====================================================================#
#   DESCRIPTION:  create tar.xz archive of org-mode file including
#                 all files under current directory
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#         NOTES:  ---
#        AUTHOR:  Wenping Guo (ybyygu)
#         EMAIL:  winpng@gmail.com
#       LICENCE:  GPL version 2 or upper
#       CREATED:  <2011-11-18 Fri 13:29>
#       UPDATED:  <>
#====================================================================#
#+end_src

*** globals
#+begin_src python
__VERSION__ = '0.1'
__UPDATED__ = '2013-01-16 14:13:56 ybyygu'

import sys
import os
import re
import urllib

rex_file = re.compile(r'.*\[\[file:([^\]]+)\]')
rex_css = re.compile(r'.*href="([^"]+)".*')

#+end_src
*** main
#+begin_src python
def find_linked_files(filename):
    """
    find linked files (image or css style etc) from filename in
    org-mode syntax
    """
    files = []

    with open(filename) as fp:
        for line in fp:
            if rex_file.match(line):
                afile = rex_file.match(line).groups()[0]
                if afile:
                    files.append(afile)
            elif rex_css.match(line):
                afile = rex_css.match(line).groups()[0]
                if afile and not afile.startswith("http"):
                    files.append(afile)

    return files

def make_tar_archive(files, archive_name):
    import tarfile

    tar = tarfile.open(archive_name, mode="w", dereference=True)
    lists = set([])
    for afile in files:
        afile = urllib.unquote(afile)
        if os.path.exists(afile):
            print("included {}".format(afile))
            lists.add(afile)
        else:
            print("{} is not in current directory!".format(afile))
    for afile in lists:
        tar.add(afile)
    tar.close()


def main(argv=None):
    import optparse

    if argv == None: argv = sys.argv

    # parsing cmdline
    cmdl_usage = 'usage: %prog [options]...[queue_id]'
    cmdl_version = "%prog " + __VERSION__
    cmdl_parser = optparse.OptionParser(usage=cmdl_usage, \
                                        version=cmdl_version, \
                                        conflict_handler='resolve')
    cmdl_parser.add_option('-h', '--help',
                           action='help',
                           help='print this help text and exit')
    cmdl_parser.add_option('-v', '--version',
                           action='version',
                           help='print program version and exit')
    # cmdl_parser.add_option('-f', '--file', dest='file',
    #                         help='start from this gjf file')
    # cmdl_parser.add_option('-p', '--pause', dest='pause',
    #                         action="store_true", default=False,
    #                         help='pause running job.')
    (cmdl_opts, cmdl_args) = cmdl_parser.parse_args()

    filename = cmdl_args[0]

    files = find_linked_files(filename)
    files.append(filename)
    make_tar_archive(files, archive_name="{}.tar".format(filename))

if __name__ == '__main__':
    main()
#+end_src

** emacsclient-open
:PROPERTIES:
:header-args: :tangle pkg/.local/bin/emacsclient-open.py :comments link :padline yes :mkdirp yes :shebang #! /usr/bin/env python
:END:
[2021-09-09 Thu] 这个用不上了.
*** header
#+begin_src python
# -*- coding: utf-8 -*-
#==============================================================================#
#   DESCRIPTION:  open text file with emacsclient and register the it into the
#                 recently-used-files list (~/.recently-used.xbel)
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#         NOTES:
#        AUTHOR:  Wenping Guo (ybyygu)
#         EMAIL:  winpng@gmail.com
#       LICENCE:  GPL version 2 or upper
#       CREATED:  <2010-09-01 Wed 16:04>
#       UPDATED:  <>
#==============================================================================#
#
# basically, to make emacsclient perfect, there are three things need be done:
# 1. use parameter "-a ''", that is, use a void alternate-editor to automatically start
#    emacs daemon
# 2. open the file without "-n" option to make sure the file buffer will be killed when frame
#    is closed
# 3. if the file has been opened, use "-n" option.
#+end_src

*** main
#+begin_src python
import os
import sys
import subprocess

def check_emacs_client(path):
    """check if the file has been opened by emacsclient"""
    cmdlines = ["/usr/bin/pgrep", "-fa", "emacsclient -c"]
    output = subprocess.Popen(cmdlines,
                              universal_newlines=True,  # output is a str not bytes
                              stdout=subprocess.PIPE).stdout.read()
    print(output)
    if path in output:
        return True
    return False

if len(sys.argv) == 1:
    print("%s: open file using emacsclient." % (__file__))
    sys.exit(0)

path = os.path.abspath(sys.argv[1])
if check_emacs_client(path):
    print("{:} is opened.".format(path))
    args = ["emacsclient", "-n", path]
    subprocess.call(args)
else:
    args = ["emacsclient", "-c", "-a", "", path]
    subprocess.Popen(args)
#+end_src
** alacritty daemon
开启tmux daemon, 方便alacritty等调用. 仿dropdown式的guake terminal

#+begin_src shell :tangle ~/.local/bin/tmux.sh :shebang #! /bin/bash
tmux new-session -A -D -s ala
#+end_src

#+begin_src shell :tangle ~/.local/bin/ala-daemon.sh :shebang #! /bin/bash
alacritty -e tmux.sh
#+end_src

** pdf-view
以全屏窗口打开PDF文件
#+header: :shebang #! /usr/bin/env bash
#+begin_src sh :tangle pkg/.local/bin/emacs-pdf.sh
emacs --maximized --file "$*" --eval "(pdf-view-fit-width-to-window)"
#+end_src

** org-agenda
#+header: :mkdirp yes :comments yes :padline yes
#+header: :shebang #! /usr/bin/env bash
#+begin_src sh :tangle pkg/.local/bin/org-agenda.sh
emacsclient -c -e "(org-agenda nil \"gt\")" -e "(delete-other-windows)"
#+end_src

** org-scratch
#+header: :mkdirp yes :comments yes :padline yes
#+header: :shebang #! /usr/bin/env bash
#+begin_src sh :tangle pkg/.local/bin/org-scratch.sh
emacsclient -c -e "(find-file \"~/Notes/scratch.note\")" -e "(delete-other-windows)"
#+end_src


** org-capture
[2021-09-01 Wed] 用doom自带的更好. doom-emacs/bin

可绑定全局按键, 随时记录所思所想.

#+header: :tangle pkg/.local/bin/org-capture.sh :shebang #! /usr/bin/env bash
#+header: :mkdirp yes :comments yes :padline yes
#+begin_src shell
emacsclient -c -F "((fullscreen . maximized))" -e "(org-capture)"
#+end_src

** stop-daemon
#+begin_src shell
/usr/bin/emacsclient --no-wait --eval "(progn (setq kill-emacs-hook nil) (kill-emacs))"
#+end_src

** take-screenshot-dwim
[2020-03-08 Sun] 用不上了, 现在clipboard方案.
屏幕截图时隐藏当前窗口, 完成后再切回原窗口. 需要安装xdotool工具.
#+header: :tangle no
#+begin_src shell
[[ $# < 1 ]] && echo "no image path" && exit 0

# switch to active window
xdotool keydown alt key Tab; xdotool keyup alt
# take a screenshot
deepin-screenshot -n -s "$1" 2>/dev/null
# switch back
xdotool keydown alt key Tab; xdotool keyup alt
#+end_src

** start-terminal
gnome-terminal使用client/server架构, 没法在emacs中直接打开, 需要清除几个环境变量.
#+header: :tangle pkg/.local/bin/terminal-dwim.sh :shebang #! /usr/bin/env bash
#+begin_src shell
unset GNOME_TERMINAL_SCREEN
unset GNOME_TERMINAL_SERVICE
gnome-terminal $*
#+end_src

[2021-04-05 Mon] alacritty现在真好用. 可以放弃gnome-terminal了.

** org-read-todo
#+BEGIN_SRC sh
dir_read_root=~/ToDo/READ/Research
dir_topic=$(basename "`pwd`")

dir_read="$dir_read_root"/"$dir_topic"

mkdir -p "$dir_read"

cp "$(pwd)/${1#file:}" "$dir_read"/
#+END_SRC

** org-read-done
#+BEGIN_SRC sh
dir_read_root=~/ToDo/READ/Research
dir_topic=$(basename "`pwd`")

dir_read="$dir_read_root"/"$dir_topic"

path="$dir_read"/$(basename "${1#file:}")

[[ -f "$path" ]] && rm -f "$path"
#+END_SRC

* TODO desktop integration
** emacs (no fcitx)
屏蔽掉fcitx, 只用emacs自带的emacs-rime, 来实现更佳输入体验
#+name: 73cd85b7
#+begin_src shell :tangle ~/.local/bin/emacs :shebang #! /usr/bin/env bash
unset GTK_IM_MODULE XMODIFIERS
/usr/bin/emacs $@
#+end_src

** TODO emacs daemon
- [[https://www.taingram.org/blog/emacs-client.html][Emacsclient Setup with Desktop Integration]]

** app launcher (替代krunner, gnome-do等)                          :ATTACH:
:PROPERTIES:
:ID:       c616356a-c1cf-450e-83e3-0e42afa72ebb
:END:
[2021-09-30 Thu] 以下emacs脚本时灵时不灵的. 可在KDE下为emacs程序设置窗口快捷键,
比如win-u, 按键时直达emacs, 然后再调用 counsel-linux-app, counsel-wmctrl等命令即
可.

#+caption: KDE设置界面
#+name: fig:394ff428
#+attr_org: :width 800
#+attr_odt: :width 10
[[attachment:2021-09-30_09-50-27_screenshot.png]]


程序调用
- [[https://oremacs.com/2016/03/16/counsel-linux-app/][Emacs completion for launching Linux desktop apps.]]
- [[https://lchsk.com/launching-applications-from-emacs.html][Launching applications from Emacs]]
- [[https://github.com/mathiasdahl/emacs-launcher][emacs-launcher]]
- [[https://www.mattduck.com/emacs-fuzzy-launcher.html][Emacs as a fuzzy launcher and Alfred-replacement]]

  #+begin_src shell :tangle ~/.local/bin/counsel-linux-app.py :shebang #! /usr/bin/env python3
  import subprocess
  # wnd_id = subprocess.check_output(["xdotool", "search", "--name", "emacs"]).decode().split("\n")[-2]
  # subprocess.call(["wmctrl", "-ia", wnd_id])
  subprocess.call(["wmctrl", "-a", "emacs"])
  subprocess.call(["emacsclient", "--eval", "(counsel-linux-app)"])
  #+end_src

 切换窗口
- [[https://github.com/flexibeast/ewmctrl][Use wmctrl to manage desktop windows]]
  : wmctrl -a firefox
  : wmctrl -a emacs

- [[https://github.com/abo-abo/oremacs/blob/github/etc/bin/counsel-wmctrl.sh][oremacs/etc/bin/counsel-wmctrl.sh ]]
  : counsel-wmctrl

  #+begin_src shell :tangle ~/.local/bin/counsel-wmctrl.py :shebang #! /usr/bin/env python3
  import subprocess
  # wnd_id = subprocess.check_output(["xdotool", "search", "--name", "emacs"]).decode().split("\n")[-1]
  # subprocess.call(["wmctrl", "-ia", wnd_id])
  subprocess.call(["wmctrl", "-a", "emacs"])
  subprocess.call(["emacsclient", "--eval", "(counsel-wmctrl)"])
  #+end_src


** emacsclient-open
可用于打开.note和.pdf文件
#+begin_src text :tangle pkg/.local/share/applications/gwp-emacsclient.desktop :mkdirp yes :comments no
[Desktop Entry]
Version=1.0
Name=Emacs Client - GWP
GenericName=Text Editor
Comment=View and edit files
MimeType=application/x-note;application/pdf;text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacsclient --create-frame --alternate-editor="" --no-wait %F
TryExec=emacs
Icon=emacs
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
#+end_src

** org-protocol
#+header: :tangle pkg/.local/share/applications/gwp-org-protocol.desktop :comments nil
#+BEGIN_SRC text
[Desktop Entry]
Name=org-protocol
Exec=emacsclient %U
Icon=emacs
Type=Application
Terminal=false
MimeType=x-scheme-handler/org-protocol;
#+END_SRC

测试
: xdg-open 'org-protocol://store-link?url=https%3A%2F%2Forgmode.org%2Fworg%2Forg-contrib%2Forg-protocol.html'
: xdg-open 'org-protocol:///capture?template=n&url=http://www.baidu.com'

** firefox
- 注册 [[*org-protocol][org-protocol]]
- 并用 update-desktop-database, 更新MIME数据库
  #+begin_src shell
  update-desktop-database ~/.local/share/applications -vv
  #+end_src

- 在Firefox中禁用security.csp.enable选项
- 使用bookmarklets来capture网页内容

** org-capture
[2021-08-28 Sat] 似乎用处不大了
#+begin_src text :tangle pkg/.local/share/applications/gwp-org-capture.desktop :mkdirp yes
[Desktop Entry]
Version=1.0
Name=Org Capture
Comment=Capture using emacs org-mode
Exec=org-capture.sh
TryExec=emacs
Icon=emacs
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
#+end_src

** install
1. 验证桌面文件. 桌面文件开头的gwp-为vendor.
2. 安装桌面文件.
3. 将python脚本软链接到$HOME/.local/bin目录下. 注意这里的路径要与
   desktop文件所指定的一定.

更新desktop数据库
#+BEGIN_SRC shell :results none
update-desktop-database ~/.local/share/applications/
#+END_SRC

#+begin_src shell :dir ~/.local/share/applications
desktop-file-validate gwp-emacsclient.desktop
xdg-desktop-menu install gwp-emacsclient.desktop
# desktop-file-validate gwp-org-capture.desktop
# xdg-desktop-menu install gwp-org-capture.desktop
#+end_src


* 配置安装
** stow配置管理思路
- tangle时仅导出到当目录下或子目录下, 方便git管理.
- stow再 "install" 到主目录下.

** docker
[[https://github.com/JAremko/docker-emacs][JAremko/docker-emacs: Dockerized Emacs (GUI)]]
#+name: bec94355
#+begin_src bash :tangle /tmp/run.sh
ip=$(ifconfig enp0s31f6 | grep inet | awk '$1=="inet" {print $2}')
xhost + $ip
docker run -ti --name emacs\
 -e DISPLAY=$ip:0\
 -e UNAME="ybyygu"\
 -e GNAME="ybyygu"\
 -e UID="1000"\
 -e GID="1000"\
 # -v <path_to_your_.emacs.d>:/home/emacs/.emacs.d\
 # -v <path_to_your_workspace>:/mnt/workspace\
 centaur/emacs emacs
#+end_src

** 使用chemacs做emacs双启动 [[https://github.com/plexus/chemacs][plexus/chemacs: Emacs profile switcher]]
- [[https://github.com/plexus/chemacs2][plexus/chemacs2: Emacs version switcher, improved]]
- [[https://github.com/Silex/docker-emacs][Silex/docker-emacs: Run Emacs in docker containers!]]

使用
- 进入chemacsk目录, 执行install.sh即可.
- 修改 ~/.emacs-profiles.el

#+name: 0fe5ff8e
#+begin_src elisp :tangle ~/.emacs-profiles.el
(("default" . ((user-emacs-directory . "~/Workspace/Programming/emacs/doom-emacs")
               (env . (("DOOMDIR" . "~/.doom.d")))))
 ("gwp" . ((user-emacs-directory . "~/Install/configs/emacs/gwp")))
 ("centaur" . ((user-emacs-directory . "~/Install/configs/emacs/centaur/.emacs.d"))))
#+end_src

调用
#+begin_src sh
emacs --with-profile centaur
#+end_src

** 安装doom-emacs
- 进入doom-emacs目录, 执行:
  : bin/doom install

doom会根据~/.doom.d中的配置, 更新doom-emacs/.local目录中的内容. 如果doom-emacs目
录位置发生变化, 需要删除.local/straints/build目录, 再重建:
: doom-emacs/bin/doom build

** .note文件搜索
- 安装locate/updatedb服务 (mlocate)
- 在~/.cache/notes建立软链接
  : notesearch.py -r ~/.cache/notes

[2021-08-29 Sun] 使用counsel-rg来实现, 以下设置不需要了
- 添加ripgrep配置文件, 添加--follow symlink选项.

#+begin_src sh :tangle ~/.ripgreprc
--follow
#+end_src

** syncthing .stignore
sycnthing同步时要避免同步某些文件, 以免不同机器间emacs冲
突

- https://docs.syncthing.net/users/ignoring.html

需要写在~/Workspace目录下:
/Programming/emacs/doom-emacs/.local/cache

* 调试步骤
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#testing-in-dooms-sandbox][doom-emacs/getting_started.org at develop · hlissner/doom-emacs]]

** How to extract a backtrace from an error
If you encounter an error while using Doom Emacs, you’re probably about to head
off and file a bug report (or request help on our Discord server). Before you
do, please generate a backtrace to include with it.

To do so you must enable debug-on-error then recreate the error.

** Enabling debug-on-error
There are three ways to enable debug-on-error:

Start Emacs with emacs --debug-init. Use this for errors that occur at startup.
Evil users can press SPC h d d and non-evil users can press C-h d d. If the
above don’t work, there’s always: M-x toggle-debug-on-error

Now that debug-on-error is on, recreate the error. A window should pop up with a
backtrace.
* doom notes
** project
- SPC p t         magit-todos-list
- SPC p x         doom/open-project-scratch-buffer

* install
** Makefile
使用gnu stow来将pkg目录下的文件安装symlink到$HOME下对应的目录

安装:
: make

字体:
: yay -S ttf-all-the-icons

升级:
: make doom-upgrade

合并到gwp分支:
: make gwp-merge
: make install && make

#+header: :tangle Makefile
#+name: 1f24e8ab
#+BEGIN_SRC makefile -i
# https://www.gnu.org/software/make/manual/html_node/One-Shell.html
.ONESHELL:

default: install doom-sync

install: stow
	stow --verbose --adopt --no-folding --target ~/ pkg
	rsync -rav ./doom-hacks/modules/tools/magit ~/.doom.d/modules/gwp/
	# rsync -rav ./doom-hacks/modules/lang/org ~/.doom.d/modules/gwp/
	rsync -rav ./doom-hacks/modules/lang/rust ~/.doom.d/modules/gwp/
	rsync -rav ./doom-hacks/modules/config/default ~/.doom.d/modules/gwp/
	rsync -rav ./doom-hacks/modules/tools/pdf ~/.doom.d/modules/gwp/
uninstall:
	stow --verbose --target ~/ --delete pkg

# doom 相关操作
doom-sync: pkg/.doom.d/init.el pkg/.doom.d/packages.el # 修改doom配置后执行
	doom-emacs/bin/doom sync
doom-build:                                            # 重建.local下build目录
	doom-emacs/bin/doom build
doom-clean:                                            # 清理过期的.elc文件
	doom-emacs/bin/doom clean
doom-upgrade:                                          # 升级doom及packages
	doom-emacs/bin/doom upgrade
start:
	emacs --with-profile default
stow:
	which stow
# 合并doom develop分支修改
gwp-merge:
	cd doom-hacks
	git checkout develop
	git pull
	git checkout gwp
	git merge -e develop
#+END_SRC

** doom commands
#+begin_src text
1. Whenever you edit your doom! block in ~/.doom.d/init.el or modify your
   modules, run:

     bin/doom refresh

   This will ensure all needed packages are installed, all orphaned packages are
   removed, and your autoloads files are up to date. This is important! If you
   forget to do this you will get errors!

2. If something inexplicably goes wrong, try `bin/doom doctor`

   This will diagnose common issues with your environment and setup, and may
   give you clues about what is wrong.

3. Use `bin/doom upgrade` to update Doom. Doing it any other way may require
   additional work. When in doubt, run `bin/doom sync`.

4. Check out `bin/doom help` to see what else `bin/doom` can do (and it is
   recommended you add ~/.emacs.d/bin to your PATH).

5. You can find Doom's documentation via `M-x doom/help` or `SPC h D`.
#+end_src

#+begin_src shell :tangle no
./doom-emacs/bin/doom clean
./doom-emacs/bin/doom refresh
#+end_src


* doom/config
:PROPERTIES:
:VISIBILITY: children
:END:
共三个配置文件, tangle到pkg/.doom.d目录下, 再由stow软链到$HOME.
** init.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/init.el :comments nil
:END:
*** docs
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/modules.org][doom-emacs/modules.org at develop · hlissner/doom-emacs]]

*** doom-dirs
设置到非syncthing共享目录下, 避免共享冲突
#+name: ec526f44
#+begin_src elisp
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load in.
;; Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find information about all of Doom's modules
;;      and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c g k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c g d') on a module to browse its
;;      directory (for easy access to its source code).

(setq doom-etc-dir "~/.doom.d/local/etc/")
(setq doom-cache-dir "~/.doom.d/local/cache/")
(setq bookmark-default-file (expand-file-name "bookmarks" doom-etc-dir))
(setq recentf-save-file (expand-file-name "recentf" doom-cache-dir))
#+end_src

*** modules
原版: [[file:doom-emacs/init.example.el]]

#+name: a3e8335d
#+begin_src elisp
(doom! :input
       (chinese)

       :completion
       (company +tng)           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy +prescient)    ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       ;;indent-guides     ; highlighted indent columns
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink the current line after jumping
       ;;neotree           ; a project drawer, like NERDTree for vim
       ;;ophints           ; highlight the region an operation acts on
       (popup            ; tame sudden yet inevitable temporary windows
        +defaults)       ; default popup rules
       ;;pretty-code       ; replace bits of code with pretty symbols
       ;;tabs              ; an tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       ;;file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       format            ; 格式化代码块
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired)           ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;; ibuffer           ; interactive buffer management
       ;undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; a consistent, cross-platform shell (WIP)
       ;;shell             ; a terminal REPL for Emacs
       ;;term              ; terminals in Emacs
       vterm             ; another terminals in Emacs

       :checkers
       ;;syntax              ; tasing you for every semicolon you forget
       (spell +flyspell)     ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;biblio
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       ;;macos             ; MacOS-specific commands
       ;;magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :lang
       ;;agda              ; types of types of types of types...
       ;;assembly          ; assembly for fun or debugging
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp           ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;go                ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;ruby              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;; (rust +lsp)         ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;org

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       ;; :config
       ;;literate
       ;; (default +smartparents)

       :gwp
       ;; (org +roam2)
       magit
       (default +smartparents)
       pdf
       ;; (rust)
       ;; 自定义模块
       ui
       org
       develop
       edit
       bindings
       )
#+end_src

*** leader key
默认的alt leader key为 M-SPC, 与KDE中的krunner有冲突. 现改为F2, 更方便. 注意: alt leader key仅在insert状态下有效.

#+name: 56a9b4bd
#+begin_src elisp
;; 屏蔽掉emacs默认的f2功能, 避免在normal state下按f2误操作
(global-unset-key (kbd "<f2>"))

(setq doom-leader-key "SPC"
      doom-leader-alt-key "<f2>"        ; 仅在insert state下有效
      doom-localleader-key ","
      doom-localleader-alt-key "M-,")   ; 仅在insert state下有效

;; (setq-default doom-leader-key "SPC"
;;               doom-leader-alt "<f13>"
;;               doom-localleader-key ""
;;               doom-localleader-alt-key "<M-f13>")

;; 自定义 leader key, 用于模式下最常用的命令(w: wo, 我)
(after! evil
  (general-create-definer gwp-leader-def
    :states '(normal insert emacs)
    :keymaps 'override                  ; prevent your leader keybindings from ever being overridden
    :prefix "w"
    :non-normal-prefix "<f4>"
    ))
#+end_src

*** load path
自定义的el文件放在user-lisp下, 可自动加载
#+name: af34cd47
#+begin_src elisp
(setq gwp-emacs-directory "~/Workspace/Programming/emacs/")
(push (expand-file-name "user-lisp" gwp-emacs-directory) load-path)
#+end_src

** config.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/config.el
:END:
*** orig
#+name: b70e7222
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Wenping Guo"
      user-mail-address "ybyygu@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "Monaco" :size 13))

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
;; they are implemented.
#+END_SRC
*** package
:PROPERTIES:
:header-args: :tangle no
:END:
#+name: 2a8c4264
#+begin_src elisp
;; Emacs China ELPA
(setq package-archives
      '(("gnu"   . "https://elpa.emacs-china.org/gnu/")
        ("melpa" . "https://elpa.emacs-china.org/melpa/")))

;; ;; TNUA ELPA
;; (setq package-archives
;;       '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
;;         ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
#+end_src

*** load path
:PROPERTIES:
:header-args: :tangle no
:END:
自定义的el文件放在user-lisp下, 可自动加载
#+name: af34cd47
#+begin_src elisp
(setq gwp-emacs-directory "~/Workspace/Programming/emacs/")
(push (expand-file-name "user-lisp" gwp-emacs-directory) load-path)
#+end_src

*** scratch
[2021-10-01 Fri] 还是elisp更方便些.
#+name: 11b27926
#+begin_src elisp
(setq doom-scratch-initial-major-mode 'emacs-lisp)
#+end_src

*** workspace
禁止workspace在退出emacs时自动保存, 避免不同机器同步冲突
#+name: 6b10b827
#+begin_src elisp
(setq persp-auto-save-opt 0)

(defun gwp/workspace/load-or-switch (name)
  "Load or switch to a workspace."
  (interactive
   (list
    (completing-read
     "Workspace to load: "
     (persp-list-persp-names-in-file
      (expand-file-name +workspaces-data-file persp-save-dir)))))
  (if (+workspace-exists-p name)
      (+workspace/switch-to name)
    (if (not (+workspace-load name))
        (+workspace-error (format "Couldn't load workspace %s" name))
      (+workspace/switch-to name)))
  (+workspace/display))
#+end_src

*** re-open-current-file
可以用revert-buffer SPC-b-r
#+name: 2588788c
#+begin_src elisp :tangle no
(defun gwp/reopen-current-file ()
  "Kill current buffer and re-open it again."
  (interactive)
  (call-interactively 'kill-current-buffer)
  (call-interactively 'recentf-open-most-recent-file))
#+end_src

*** open-file-externally
从spacemacs中改过来的
#+name: e13c7903
#+begin_src emacs-lisp
(defun spacemacs/open-in-external-app (file-path)
  "Open `file-path' in external application."
  (let ((process-connection-type nil))
    (start-process "" nil "xdg-open" file-path)))

(defun spacemacs/open-file-or-directory-in-external-app (arg)
  "Open current file in external application.
If the universal prefix argument is used then open the folder
containing the current file by the default explorer.
If two universal prefix arguments are used, then prompt for command to use."
  (interactive "P")
  (if (equal arg '(4))                  ; C-u
      (spacemacs/open-in-external-app (expand-file-name default-directory))
    (let ((file-path (if (derived-mode-p 'dired-mode)
                         (dired-get-file-for-visit)
                       buffer-file-name)))
      (if file-path
          (if (equal arg '(16))         ; C-u C-u
              (progn
                (let ((program (read-shell-command "Open current file with: ")))
                  (call-process program nil 0 nil file-path)))
            (spacemacs/open-in-external-app file-path))
        (message "No file associated to this buffer.")))))
#+end_src

*** open in terminal
emacs版的 "Open in Terminal": 在gnome-terminal中打开当前目录.
#+name: 12a811d1
#+begin_src emacs-lisp
(defun gwp/open-in-gnome-terminal (the-directory)
  "Open `the-directory' in external gnome-terminal."
  (let ((process-connection-type nil))
    ;; (start-process "" nil "terminal-dwim.sh" (concat "--working-directory=" the-directory) "-e" "tmux")
    (start-process "" nil "alacritty" (concat "--working-directory=" the-directory) "-e" "tmux")
    ))

(defun gwp/open-terminal-here ()
  "Open the current dir in a new terminal window"
  (interactive)
  (let ((default-directory (or (and (eq major-mode 'dired-mode)
                                    (dired-current-directory))
                               default-directory)))
    (gwp/open-in-gnome-terminal (expand-file-name default-directory))))
#+end_src

*** recent files
#+name: 493c2a26
#+begin_src emacs-lisp
(require 'recentf)
;; the default is only 20
(setq recentf-max-saved-items 1000)
(add-to-list 'recentf-exclude "autosave$")
(add-to-list 'recentf-exclude "\.png$")
(add-to-list 'recentf-exclude "\.pdf$")
(add-to-list 'recentf-exclude "\.svg$")
(add-to-list 'recentf-exclude "\.odt$")
#+end_src

*** TODO bm
主要用 bm, 书签持久化是从 bm.el 里抄来的.
[2019-07-11 Thu] spacemacs有bm layer, 用那个吧.

#+BEGIN_SRC emacs-lisp :tangle no
(defun gwp/init-bm ()
  (defun gwp-mouse-toggle-bm (e)
    "Toggle bookmarking
This command should be bound to a mouse key.
Argument E is a mouse event used by `mouse-set-point'."
    (interactive "@e")
    (save-excursion
      (mouse-set-point e)
      (bm-toggle)
      ))

  ;; adopted from: https://github.com/joodland/bm
  (use-package bm
    :ensure t
    :demand t

    :init
    ;; restore on load (even before you require bm)
    (setq bm-restore-repository-on-load t)

    :config
    ;; Allow cross-buffer 'next'
    (setq bm-cycle-all-buffers nil)

    ;; save bookmarks
    (setq-default bm-buffer-persistence t)

    ;; Loading the repository from file when on start up.
    (add-hook 'after-init-hook 'bm-repository-load)

    ;; Saving bookmarks
    (add-hook 'kill-buffer-hook #'bm-buffer-save)

    ;; Saving the repository to file when on exit.
    ;; kill-buffer-hook is not called when Emacs is killed, so we
    ;; must save all bookmarks first.
    (add-hook 'kill-emacs-hook #'(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save)))

    ;; The `after-save-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state.
    (add-hook 'after-save-hook #'bm-buffer-save)

    ;; Restoring bookmarks
    (add-hook 'find-file-hooks   #'bm-buffer-restore)
    (add-hook 'after-revert-hook #'bm-buffer-restore)

    ;; The `after-revert-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state. This hook might cause trouble when using packages
    ;; that automatically reverts the buffer (like vc after a check-in).
    ;; This can easily be avoided if the package provides a hook that is
    ;; called before the buffer is reverted (like `vc-before-checkin-hook').
    ;; Then new bookmarks can be saved before the buffer is reverted.
    ;; Make sure bookmarks is saved before check-in (and revert-buffer)
    (add-hook 'vc-before-checkin-hook #'bm-buffer-save)

    :bind (
            ([left-fringe mouse-3] . gwp-mouse-toggle-bm)
            ([left-margin mouse-3] . gwp-mouse-toggle-bm)
            ([left-fringe mouse-5] . bm-next-mouse)
            ([left-margin mouse-5] . bm-next-mouse)
            ([left-fringe mouse-4] . bm-previous-mouse)
            ([left-margin mouse-4] . bm-previous-mouse)
            )))
#+END_SRC

*** dired-sidebar
#+name: 38a0a087
#+begin_src elisp
(use-package dired-sidebar
  :commands (dired-sidebar-toggle-sidebar))
#+end_src

*** user-lisp
#+name: c54f13b5
#+begin_src elisp
(require 'init-proxy)
(require 'init-dired)
(require 'init-magit)
;; (require 'init-eaf)
#+end_src

** packages.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/packages.el :comments nil
:END:
注意, 为了方便有些设置(package!)分散在不同的headline下, 如果仅tangle该subtree可
能会丢失重要的设置. 可在下面某代码块中tangle该文件所有的code blocks, 不要在
narrowed buffer中tangle.
*** doc/header
#+name: ad772025
#+begin_src elisp
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here, run 'doom sync' on
;; the command line, then restart Emacs for the changes to take effect.
;; Alternatively, use M-x doom/reload.
;;
;; WARNING: Disabling core packages listed in ~/.emacs.d/core/packages.el may
;; have nasty side-effects and is not recommended.


;; All of Doom's packages are pinned to a specific commit, and updated from
;; release to release. To un-pin all packages and live on the edge, do:
;(unpin! t)

;; ...but to unpin a single package:
;(unpin! pinned-package)
;; Use it to unpin multiple packages
;(unpin! pinned-package another-pinned-package)


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a particular repo, you'll need to specify
;; a `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, for whatever reason,
;; you can do so here with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))
#+end_src

*** 由于网络原因, 暂时过渡
#+name: fbd6e323
#+begin_src elisp
(package! org-pdftools :recipe (:host github :repo "fuxialexander/org-pdftools"))
(package! org-superstar :recipe (:host github :repo "integral-dw/org-superstar-mode"))
#+end_src

*** 需要安装的包
- cnfonts: 中文显示
- golden-ratio: 自动放大当前window
- fcitx 自动中英文切换
- 修改版material-theme
  - 改小org-heading字体的scaling系数
  - 调整TODO, DONE的调色, 别那么刺眼

#+name: d8f41362
#+begin_src elisp
;; (package! berrys-theme)
;; (package! material-theme)
(package! material-theme
          :recipe (:host github :repo "ybyygu/emacs-material-theme"))
#+end_src

#+name: 8192c3d2
#+begin_src elisp
(package! el-patch)
#+end_src

统计命令使用频率, 方便优化快捷键
#+begin_src elisp
(package! keyfreq)
#+end_src

org-noter
#+begin_src emacs-lisp
(package! org-noter)
#+end_src

- 使用deadgrep搜索 .note 笔记
- 与doom的popup有冲突, 不能用
#+begin_src emacs-lisp :tangle no
(package! deadgrep
          :recipe (:host github :repo "ybyygu/deadgrep"))
#+end_src

编辑nix包管理文件
#+begin_src elisp
(package! nix-mode)
#+end_src

*** 需要禁用的包
- TAB自动补全很可怕, 无意按键, 补出很多没用的东西, 禁用自带的模板.
#+name: 4916a8ab
#+begin_src emacs-lisp
(package! doom-snippets :ignore t)
#+end_src

github支持, 减慢速度.
#+name: e5ee47b4
#+begin_src emacs-lisp
(package! forge :ignore t)
;; 不能简单的禁用了事
;; (package! github-review :ignore t)
#+end_src

*** 测试
#+name: 5dc509d3
#+begin_src elisp
(package! dired-sidebar)
(package! dockerfile-mode)
(package! yaml-mode)
(package! yaml-mode)

;; https://github.com/org-roam/org-roam-ui#doom
;; 2021-08-01 用不起来
(package! websocket)
(package! simple-httpd)
(package! org-roam-ui :recipe (:host github :repo "org-roam/org-roam-ui" :files ("*.el" "out")))

(package! org-transclusion
  :recipe (:host github
           :repo "nobiot/org-transclusion"
           :branch "main"
           :files ("*.el")))
#+end_src
* user-lisp
配置各种包或自定义的包
** dwim
临时按键绑定. 这和hydra等类似了
#+begin_src elisp :tangle no
(defun gwp::dwim ()
  (interactive)
  (set-temporary-overlay-map
   (let ((map (make-sparse-keymap)))
     (define-key map (kbd "<right>")	'org-next-block)
     (define-key map (kbd "<left>") 	'org-previous-block)
     map) t))

(defun my-setup-extra-keymap (extra-fn-list hint fn &rest args)
  "Map EXTRA-FN-LIST to new keymap and show HINT after calling FN with ARGS."
  (let ((echo-keystrokes nil))
    (when fn (apply fn args))
    (message hint)
    (set-transient-map
     (let ((map (make-sparse-keymap)))
       (dolist (item extra-fn-list)
         (define-key map (kbd (nth 0 item)) (nth 1 item)))
       map)
     t)))

(defun my-navigate ()
  (interactive)
  (my-setup-extra-keymap '(("k" org-up-element)
                           ("p" org-down-element)
                           ("f" my-open-pdf-from-history))
                         "PDF: [k]up [j]down [p]revious-page [n]ext-page [g]oto [f]rom-history [q]uit"
                         nil))
#+end_src

** init-proxy.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-proxy.el
:END:
[[https://www.scanbuf.net/post/manual/proxy/][设置代理 - 如何自定义编辑器 - 7ym0n - 个人技术分享，记录生活]]

#+name: 20064129
#+begin_src elisp
;; (defvar default-proxy "127.0.0.1:8889")
(defvar default-proxy "127.0.0.1:10808")
(defvar socks-server)
(defvar socks-noproxy)
;; Network Proxy
(defun proxy-http-show ()
  "Show HTTP/HTTPS proxy."
  (interactive)
  (if url-proxy-services
      (message "Current HTTP proxy is `%s'" default-proxy)
    (message "No HTTP proxy")))

(defun proxy-http-enable ()
  "Enable HTTP/HTTPS proxy."
  (interactive)
  (setq url-proxy-services
        `(("http" . ,default-proxy)
          ("https" . ,default-proxy)
          ("no_proxy" . "^\\(localhost\\|192.168.*\\|10.*\\)")))
  (proxy-http-show))

(defun proxy-http-disable ()
  "Disable HTTP/HTTPS proxy."
  (interactive)
  (setq url-proxy-services nil)
  (proxy-http-show))

(defun proxy-http-toggle ()
  "Toggle HTTP/HTTPS proxy."
  (interactive)
  (if (bound-and-true-p url-proxy-services)
      (proxy-http-disable)
    (proxy-http-enable)))

(defun proxy-socks-show ()
  "Show SOCKS proxy."
  (interactive)
  (when (fboundp 'cadddr)                ; defined 25.2+
    (if (bound-and-true-p socks-noproxy)
        (message "Current SOCKS%d proxy is %s:%d"
                 (cadddr socks-server) (cadr socks-server) (caddr socks-server))
      (message "No SOCKS proxy"))))

(defun proxy-socks-enable ()
  "Enable SOCKS proxy."
  (interactive)
  (require 'socks)
  (let* ((proxy (split-string default-proxy "\\s-*:\\s-*"))
         (addr (car proxy))
         (port (string-to-number (cadr proxy))))
    (setq url-gateway-method 'socks
          socks-noproxy '("localhost")
          socks-server `("Default server" ,addr ,port 5)))
  (proxy-socks-show))

(defun proxy-socks-disable ()
  "Disable SOCKS proxy."
  (interactive)
  (setq url-gateway-method 'native
        socks-noproxy nil)
  (proxy-socks-show))

(defun proxy-socks-toggle ()
  "Toggle SOCKS proxy."
  (interactive)
  (if (bound-and-true-p socks-noproxy)
      (proxy-socks-disable)
    (proxy-socks-enable)))
(provide 'init-proxy)
#+end_src

** init-dired.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-dired.el
:END:
- [[https://www.emacswiki.org/emacs/DiredOmitMode][EmacsWiki: Dired Omit Mode]]

#+name: edd7000d
#+begin_src emacs-lisp
(use-package dired
  :config
  ;; Set this variable to non-nil, Dired will try to guess a default
  ;; target directory. This means: if there is a dired buffer
  ;; displayed in the next window, use its current subdir, instead
  ;; of the current subdir of this dired buffer. The target is used
  ;; in the prompt for file copy, rename etc.
  (progn
    ;; 安全第一
    (setq delete-by-moving-to-trash t)
    ;; 方便多个文件夹文件互动
    (setq dired-dwim-target t)

    ;; Dired listing switches
    ;;  -a : Do not ignore entries starting with .
    ;;  -l : Use long listing format.
    ;;  -G : Do not print group names like 'users'
    ;;  -h : Human-readable sizes like 1K, 234M, ..
    ;;  -v : Do natural sort .. so the file names starting with . will show up first.
    ;;  -F : Classify filenames by appending '*' to executables,
    ;;       '/' to directories, etc.
    (setq dired-listing-switches "-alGhvF --group-directories-first") ; default: "-al"

    ;; 用于在dired中复制当前文件的全路径.
    (defun gwp/dired-copy-file-path()
      (interactive)
      (let ((current-prefix-arg '(0)))
        (call-interactively 'dired-copy-filename-as-kill)))

    (map! :map dired-mode-map
          :localleader
          :desc "Copy file path"
          :n "y" #'gwp/dired-copy-file-path
          :desc "Make symlink"
          :n "l" #'dired-do-symlink
          :desc "Async shell command"
          :n "!" #'dired-do-async-shell-command
          )

    ;; 使用BACKSPACE来上一级目录, 使用Ctrl-shift-n来新建目录(默认为"+")
    (map! :map dired-mode-map
          :nv "DEL"   #'dired-up-directory       ; BACKSPACE
          :nv "C-S-n" #'dired-create-directory
          )))

;;;###autoload
(defun gwp::dired::symbol-link-at-point-to-home ()
  "在 dired 中, 将光前文件软链接到 HOME 下, 方便快速访问(比如在
virtualbox /windows 中)"
  (interactive)

  (if (derived-mode-p 'dired-mode)
      (let ((this-file (dired-get-file-for-visit))
            (target-path "~/00-dired-tmp-entry-point"))
        (make-symbolic-link this-file target-path)
        (message "symlink to: %s" target-path))
    (user-error "not in dired buffer")))
#+end_src

隐藏.dotfiles, doom中默认omit的太少
#+name: 67102cd3
#+begin_src emacs-lisp
(use-package dired-x
  :config
  (progn
    (setq dired-omit-verbose t)
    ;; (add-hook 'dired-mode-hook #'dired-omit-mode)
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))))

(provide 'init-dired)
#+end_src

** init-eaf.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-eaf.el
:END:
可以先用 eaf 安装脚本装好相关包即可正常使用.
- [[https://github.com/emacs-eaf/eaf-pdf-viewer][emacs-eaf/eaf-pdf-viewer: Fastest PDF Viewer in Emacs]]
- [[https://github.com/emacs-eaf/emacs-application-framework/pull/267][Eaf interleave by luhuaei · Pull Request #267 · emacs-eaf/emacs-application-framework]]

#+name: 7d6d2068
#+begin_src elisp
(use-package eaf
  :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
  :after org
  :config
  ;;(use-package eaf-video-player)
  ;; (require 'eaf-file-manager)
  ;; (require 'eaf-browser)
  ;; (require 'eaf-image-viewer)
  (require 'eaf-pdf-viewer)
  (require 'eaf-demo)
  (require 'eaf-org)
  (require 'eaf-interleave)
  ;; (require 'eaf-terminal)

  (defun eaf-org-open-file (file &optional link)
    "An wrapper function on `eaf-open'."
    (eaf-open file))

  ;; use `emacs-application-framework' to open PDF file: link
  (add-to-list 'org-file-apps '("\\.pdf\\'" . eaf-org-open-file))

  ;; 修复 evil 按键问题. 这里需要启用 eaf-browser 支持, 不然会报错
  (require 'eaf-evil)
  (define-key key-translation-map (kbd "SPC")
    (lambda (prompt)
      (if (derived-mode-p 'eaf-mode)
          (pcase eaf--buffer-app-name
            ("pdf-viewer" (kbd eaf-evil-leader-key))
            (_  (kbd "SPC")))
        (kbd "SPC"))))

  :custom
  ;; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  ;; (eaf-browser-continue-where-left-off t)
  ;; (eaf-browser-enable-adblocker t)
  (eaf-pdf-dark-mode nil)
  ;; (browse-url-browser-function 'eaf-open-browser)
  )

(provide 'init-eaf)
#+end_src
** init-magit.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-magit.el
:END:
git-timemachine可用来看文件的不同版本(C-n, C-p): git-timemache-mode-map. 默认用 SPC-g-t 来激活.

magit-todos用来查看代码的TODO, FIXME等标记. 按键: SPC-p-t
- [[https://github.com/alphapapa/magit-todos][alphapapa/magit-todos: Show source files' TODOs (and FIXMEs, etc) in Magit status buffer]]

magit-status-mode-map

#+name: 5587631c
#+begin_src elisp
(use-package magit
  :config
  ;; 隐藏untracked文件列表. 更多时候的操作是stage/commit
  (setq magit-section-initial-visibility-alist (quote ((untracked . hide))))
  ;;禁用magit中的gravatars支持, 响应能快一些.
  (setq magit-revision-show-gravatars nil)
  ;; 进入 magit-status 后, 将光标定在 unstaged 一栏
  (setq magit-status-initial-section '(2))
  )

(provide 'init-magit)
#+end_src

** init-note.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-note.el
:END:
*** docs
仿 org-noter 但, 简化操作, 不依赖于 pdf-tools 等包, 可使用外部的 pdf 阅读器来处
理 pdf 文件.

pdf-tools 的缺点是太慢了, llpp 要快得多, 适合看稍大一些的文件. 使用 llpp 来打开
org-noter 生成的note, 用于打开打定的 PDF 页面.

: okular foo.pdf -p 5
: evince foo.pdf -p 5
: llpp foo.pdf -page 5

批注流程
- 使用 dired 打开某个 pdf 文件, 然后 ",nn", 在 pdf 所在目录生成并打开 annotation.note.
- 在 org-mode 下, 自建 heading, ",ni", 插入 property, 标明 pdf 页码信息.
- 在某 heading 下, ",no", 打开该 heading 对应的 pdf 文件及相应的页码

另外, 通过 [[https://github.com/ymarco/paper-mode][ymarco/paper-mode]], 也可以把 llpp 放到 emacs buffer 中.

*** require
还是基于 org-noter 来开发, 能省一些事是一些.
#+begin_src elisp
(require 'org-noter)
#+end_src

*** create file
#+name: 8a535ad4
#+begin_src elisp
(defun gwp::org-note::create-annotation-file (document-path)
  (let* ((note-file "annotation.note")
         (document-name (file-name-nondirectory document-path))
         (document-base (file-name-base document-name)))
    (with-current-buffer (switch-to-buffer (find-file-noselect note-file))
      (goto-char (point-max))
      (insert "* " document-base)
      (org-set-property org-noter-property-doc-file document-name)
      (save-buffer))))

;;;###autoload
(defun gwp::org-note::dired-annotate-file-at-point ()
  "标注 dired buffer 中所定的(pdf)文件"
  (interactive)
  (if (derived-mode-p 'dired-mode)
      (gwp::org-note::create-annotation-file (dired-get-file-for-visit))
    (user-error "not in dired buffer")))
#+end_src

*** open
#+name: 1773f1a3
#+begin_src elisp
(defun gwp::org-note::get-pdf-file ()
  (save-excursion
    (if (search-backward ":NOTER_DOCUMENT" nil t)
        (progn
          (org-back-to-heading)
          (let ((pdf (org-element-property :NOTER_DOCUMENT (org-element-at-point))))
            (message "%s" pdf)))
      (message "no pdf doc found"))))

(defun gwp::org-note::get-pdf-page ()
  (save-excursion
    (org-back-to-heading)
    (let ((property (org-element-property :NOTER_PAGE (org-element-at-point))))
      (let ((value (car (read-from-string property))))
        (cond
         ((consp value) (car value))
         (t value))))))

;;;###autoload
(defun gwp::org-note::new-note ()
  "在当前 heading 下插入新的文献阅读笔记"
  (interactive)
  ;; (let ((current-prefix-arg '(4)))     ; C-u
  ;;   (call-interactively #'org-insert-heading))
  ;; (insert (read-string "笔记标题: "))
  (if (org-at-heading-p)
      (let ((page (read-number "PDF 页码: " 1)))
        (org-set-property "NOTER_PAGE" (number-to-string page)))
    (user-error "not at org heading.")))

;;;###autoload
(defun gwp::org-note::open-pdf ()
  "使用 llpp 来打开当前笔记对应的 pdf 文件, 并转到指定的页码"
  (interactive)
  (let ((page (gwp::org-note::get-pdf-page))
        (pdf (gwp::org-note::get-pdf-file)))
    (if page
        (start-process "llpp" nil "llpp" pdf "-page" (format "%s" page))
      ;; (start-process "okular" nil "okular" pdf "-p" (format "%s" page))
      (start-process "llpp" nil "llpp" pdf)
      ;; (start-process "okular" nil "okular" pdf)
      )))
#+end_src


*** provide
#+name: 8d4b377b
#+begin_src elisp
(provide 'init-note)
#+end_src

* modules/gwp
使用doom的方式来组织代码, 这样的好处是packages可以模块化来定义, 避免tangle时不小心出问题.
** ui
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/modules/gwp/ui/config.el
:END:
*** wrap long line
更习惯手动折行
#+name: a6f83332
#+begin_src elisp
;; 默认不要显示折行
(global-visual-line-mode -1)

(defun gwp::turn-off-wrap-long-line()
  (global-visual-line-mode -1))
(add-hook 'org-mode-hook 'gwp::turn-off-wrap-long-line)
#+end_src
*** blink cursor
让光标动起来, 更醒目
#+name: 4e3b4060
#+begin_src elisp
(blink-cursor-mode 1)
#+end_src

*** line numbers
如果能显示相对行号, avy-goto-line可能就没必要了?
#+name: 885c9fa9
#+begin_src elisp
;; 方便绑定到 SPC-t-l
;;
;; 仅切换relative和none两种状态, doom的要切三种
(defun gwp::toggle-line-numbers ()
  (interactive)
  (if display-line-numbers
      (setq display-line-numbers 'nil)
    (setq display-line-numbers 'relative)))

(defun gwp::display-line-numbers ()
  (setq display-line-numbers 'relative))

;; NOTE: org-mode在折叠状态下, 相对行号显示的是实际数目, 而非折叠后的, 这对编辑操作没多大帮助了.
;; ;; (add-hook 'org-mode-hook #'gwp::display-line-numbers)
(add-hook 'org-src-mode-hook #'gwp::display-line-numbers)
;; (add-hook 'prog-mode-hook #'gwp::display-line-numbers)
(add-hook 'rust-mode-hook #'gwp::display-line-numbers)

;; 全局设置
;; (setq display-line-numbers-type 'relative)
#+end_src

*** window/frame
**** 修改 frame 标题 方便 gnome-shell 桌面切换
#+begin_src elisp
;; workspace@buffer-name: ~/foo/bar
(setq frame-title-format
      '((:eval (+workspace-current-name)) ;
        " | %b : "
        (:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))))
        ))
#+end_src

**** 放大窗口
自动放大当前窗口. 注意, 这类工具通过和doom的popup window有冲突. 需要的时候命令手
动开启.
- https://github.com/hlissner/doom-emacs/issues/2225

对应命令: SPC-w z
#+name: bfacbb8e
#+begin_src elisp
(use-package! golden-ratio
  :config
  (map! :map evil-window-map
        "z" #'golden-ratio))
#+end_src

doom内置了几个命令:
- 水平放大: SPC-w-m-s
- 垂直放大: SPC-w-m-v

#+name: 9f0e3550
#+begin_src elisp
(map! :map evil-window-map
      "1"       #'doom/window-maximize-buffer
      "o"       #'doom/window-maximize-buffer ;show "only"
      "t"       #'doom/window-maximize-vertically ;show top
      )
#+end_src

新建frame时最大化窗口
#+name: 9a32eb12
#+begin_src elisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

**** 窗口管理
[[https://github.com/abo-abo/ace-window][abo-abo/ace-window: Quickly switch windows in Emacs]]

用avy在多个窗口下跳转也很方便

#+name: 19f082d3
#+begin_src elisp
(use-package! avy
  :config
  (setq avy-all-windows t))

;; 替代 SPC-w-w
;; (global-set-key [remap evil-window-next] #'ace-window)
;; (map! [remap evil-window-next] #'ace-window)

(map! :map evil-window-map
      "w" #'ace-window
      "r" #'ace-swap-window   ; rotate
      "c" #'ace-delete-window ; close
      "f" #'tear-off-window   ; 类似于firefox中的标签变窗口 (float, move to new frame)
      "F" #'follow-mode       ; 同步滚动窗口, 可用于双窗口内容对比等
      )
#+end_src

切换至前一个最近访问的buffer所在的window, evil-window-mru
: SPC-w-p

撤消或恢复之前的窗口布局
: SPC-w-u, SPC-w C-r

**** 弹出窗口
打开doom popup窗口, 默认仅在normal state下可用.
#+begin_src emacs-lisp
(map! :i "C-`" #'+popup/toggle)
#+end_src

**** 窗口大小
使用滚轮来修改窗口大小. Ctrl-Alt-scroll-up, Ctrl-Alt-scroll-down
#+name: 032e71c0
#+begin_src elisp
(map! :nvi
      [C-M-mouse-4] #'evil-window-increase-width
      [C-M-mouse-5] #'evil-window-decrease-width
      )
#+end_src

- [[https://stackoverflow.com/questions/51879921/emacs-find-file-other-window-command-splits-buffer-vertically][Emacs find-file-other-window command splits buffer vertically - Stack Overflow]]

设置分屏阈值, 避免 find-file-other-window 垂直向分割为多个windows
#+begin_src elisp
(setq split-width-threshold 200)        ; default is 160
#+end_src

hydra特别适合需要重复按键来完成的操作, 比如调整窗口大小.
#+name: f07dc327
#+begin_src elisp
(defhydra gwp/adjust-window-size ()
  "resize-window"
  ("h" evil-window-decrease-width "decrease width")
  ("j" evil-window-decrease-height "decrease height")
  ("k" evil-window-increase-height "increase height")
  ("l" evil-window-increase-width "increase width")
  ("q" nil "quit")
  )

(map! :map evil-window-map
      "a"       #'gwp/adjust-window-size/body ; adjust
      )
#+end_src

**** new frame
tear-off-window
#+name: 19e08aef
#+begin_src elisp
(defun gwp::display-current-buffer-other-frame ()
  "在其它 frame 中显式当前 buffer"
  (interactive)
  (switch-to-buffer-other-frame (current-buffer)))
#+end_src

**** clone buffer
clone 出的 buffer 可独立编辑, 视图变化互不影响. 有用.
: clone-indirect-buffer-other-window
: clone-indirect-buffer

**** switch buffer
这几个命令挺有用, 不过在 ivy 框架下使用应更便利. 比如 ivy-switch-buffer 时, 可按
C-o 选取相应的 action, 来操作选定的 buffer.

: switch-to-buffer-other-window
: switch-to-buffer-other-frame
: switch-to-buffer-other-tab
: switch-to-buffer

从以下变量可查看 ivy 默认定义的 actions
: ivy--actions-list

#+name: bf66c13f
#+begin_src elisp
(require 'ivy)
(ivy-set-actions
 ;; 以下会覆盖默认定义的, 所以需要补回
 'ivy-switch-buffer
 '(
   ("f" ivy--find-file-action "find file")
   ("j" switch-to-buffer-other-window "other window")
   ("k" ivy--kill-buffer-action "kill")
   ("r" ivy--rename-buffer-action "rename")
   ("x" counsel-open-buffer-file-externally "open externally")
   ("f" switch-to-buffer-other-frame "other frame") ; 默认没有
   ("t" switch-to-buffer-other-tab "other tab")     ; 默认没有
   ))
#+end_src

*** big font mode
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src elisp
;; HiDPI下可用大字模式: SPC-t-b
(setq doom-font (font-spec :family "Monaco" :size 14))
(setq doom-big-font-increment 4)

;; (add-hook! doom-big-font-mode-hook #'(gwp/set-fonts))
;; 上面的不管用
(setq doom-big-font-mode-hook '(gwp/set-fonts))
(doom-big-font-mode -1)
#+end_src

*** chinese/input method
默认使用 Ctrl-\ 切换输入法
**** rime
- [[https://github.com/DogLooksGood/emacs-rime][DogLooksGood/emacs-rime: RIME ㄓ in Emacs]]

可以用TAB来临时输入英文. 可以用Ctrl-.来临时切换中英文标点. 在输入过程中, 按z键临时拼音模式.
rime-inline-predicates

rime 会根据输入状态, 智能进入英文输入模式. 此时, 可用 C-i 键来强制临时录入(一个)
中文单字, 随后继续英文输入模式. 为了更流畅的中英文状态智能切换, 得记得回归空格分
隔中英文字符这一优秀传统.

***** setup
#+name: 155b72b3
#+begin_src elisp
(use-package! rime
  :custom
  (default-input-method "rime")
  :config
  (setq rime-user-data-dir "~/.local/share/fcitx5/rime")
  ;; 这个设置与rime的一致, 不然emacs中的inline ascii无法生效
  ;;; support shift-l, shift-r, control-l, control-r
  (setq rime-inline-ascii-trigger 'shift-l)
  ;; 临时英文中阻止标点直接上屏
  (setq rime-inline-ascii-holder ?x)      ; Any single character that not trigger auto commit
  ;; 添加C-.快捷键, 方便切换中英文标点(需要在rime输入时有效)
  (setq rime-translate-keybindings
        '("C-f" "C-b" "C-n" "C-p" "C-g" "C-."))
  ;; 在输入且有码上屏的状态下, 可用TAB临时切换英文.
  (map! :map rime-active-mode-map :after ivy [tab] 'rime-inline-ascii)
  ;; NOTE: 以下有时会让emacs crash
  (setq rime-posframe-properties
        (list :background-color "#333333"
              :foreground-color "#dcdccc"
              :internal-border-width 10))
  (setq default-input-method "rime"
        rime-show-candidate 'posframe)

  ;; 自动进入英文录入状态, 相当于直接输入英文
  (setq rime-disable-predicates
        '(
          evil-normal-state-p
          ;; 首字母为是英文字母时进入英文模式
          rime-predicate-after-alphabet-char-p
          ;; 将要输入的为大写字母时
          rime-predicate-current-uppercase-letter-p
          ;; 在 prog-mode 和 conf-mode 中除了注释和引号内字符串之外的区域
          rime-predicate-prog-in-code-p
          ;; 在 (La)TeX 数学环境中或者输入 (La)TeX 命令时
          rime-predicate-tex-math-or-command-p
          ;; 在中文字符且有空格之后
          ;; rime-predicate-space-after-cc-p
          ))
  ;; 进入连续英文状态, 空格或回车键上屏
  (setq rime-inline-predicates
        '(
          rime-predicate-space-after-cc-p
          )))
#+end_src

***** convert string at point
有时没开中文输入, 会误输几个英文, 此时切换中文时自动将误录的英文转成中文
#+name: b254d4bc
#+begin_src elisp
;; https://github.com/jadestrong/dotfiles/blob/master/home/.doom.d/modules/input/chinese2/config.el
(defun gwp::rime-convert-string-at-point (&optional return-cregexp)
  "将光标前的字符串转换为中文."
  (interactive "P")
  (let ((string
         (if mark-active
             (buffer-substring-no-properties
              (region-beginning) (region-end))
           (buffer-substring-no-properties
            (point) (max (line-beginning-position) (- (point) 80)))))
        code
        length)
    (cond ((string-match "\\([a-z]+\\|[[:punct:]]\\) *$" string)
           (setq code (match-string 0 string))
           (setq length (length code))
           (setq code (replace-regexp-in-string " +" "" code))
           (if mark-active
               (delete-region (region-beginning) (region-end))
             (when (> length 0)
               (delete-char (- 0 length))))
           (when (> length 0)
             (setq unread-command-events
                   (append (listify-key-sequence code)
                           unread-command-events))))
          (t (message "`rime-convert-string-at-point' did nothing.")))))
#+end_src

***** toggle
#+name: 37aafacc
#+begin_src elisp
(defun gwp::rime-toggle-input ()
  "切换 rime 中文输入状态."
  (interactive)

  (let ((input-method "rime"))
    (toggle-input-method)
    ;; evil 下, 直接进入 insert 模式
    (when (rime-predicate-evil-mode-p)
      (if (= (+ 1 (point)) (line-end-position))
          (evil-append 1)
        (evil-insert 1)))

    ;; 进入 rime 输入状态后, 把误按的字符转换中文
    (when (string= current-input-method input-method)
      (gwp::rime-convert-string-at-point))

    ;; 提示当前输入状态, 比看图标更醒目
    (if current-input-method
        (message "IME on")
      (message "IME off"))))
#+end_src

***** bindings
#+name: c457613c
#+begin_src elisp
;; 这里需要与fcitx配合: 去掉GTK_IM_MODULE, XMODIFIERS等FCITX输入法设置变量.
(map! :nieg "C-SPC" 'gwp::rime-toggle-input)
;; (map! :nieg "C-SPC" 'gwp::rime-force-enable)
;; NOTE: 因为与ivy的默认绑定有冲突, minibuffer下不能切换
;; ivy-call-and-recenter
;; 2021-10-13: 直接map不太有效, 时灵不灵的
;; (map! :map ivy-minibuffer-map "C-SPC" #'toggle-input-method)
;; NOTE: 可用M-RET来预览选中条目, 而不退出ivy窗口
(map! :after ivy :map ivy-minibuffer-map [remap ivy-call-and-recenter] 'toggle-input-method)

;; 将光标英文字符转化为中文录入
(map! :map rime-mode-map "M-i" #'gwp::rime-convert-string-at-point)
;; 在自动英文模式下强制进入中文状态
(map! :map rime-mode-map "C-i" #'rime-force-enable)
#+end_src

**** pyim
:PROPERTIES:
:header-args: :tangle no
:END:
- [[https://tumashu.github.io/pyim/][A Chinese input method which support quanpin, shuangpin, wubi and cangjie. - pyim]]

#+name: 15078428
#+begin_src elisp
(use-package! pyim
  :config
  ;; (setq default-input-method "pyim")

  ;; 我使用五笔
  (use-package! pyim-wbdict
    :config (pyim-wbdict-v98-enable))
  (setq pyim-default-scheme 'wubi)

  ;; 启用拼音大词库，方便忘词用拼音反查
  (use-package pyim-basedict
    :config (pyim-basedict-enable))
  ;; 如果用户在使用五笔输入法的过程中，忘记了某个字的五笔码，可以按 TAB(F2-TAB)键临时切换到辅助输入法来输入，选词完成之后自动退出。
  (setq pyim-assistant-scheme 'quanpin)

  ;; 全角半角
  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning
                  pyim-probe-punctuation-after-punctuation))

  ;; 不使用中文标点, 如需输入可切换至fcitx.
  ;; (delete '("/" "、")  pyim-punctuation-dict)
  ;; (add-to-list 'pyim-punctuation-dict '("\\" "、"))
  (setq pyim-punctuation-dict nil)
  ;; 2021-10-16 ivy中文拼音搜索. 设置不通
  (setq ivy-re-builders-alist
        '((t . pyim-cregexp-ivy)))

  ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
  ;; 我自己使用的中英文动态切换规则是：
  ;; 1. 光标只有在注释里面时，才可以输入中文。
  ;; 2. 光标前是汉字字符时，才能输入中文。
  ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
  ;; (setq-default pyim-english-input-switch-functions
  ;;               '(
  ;;                 ;; pyim-probe-dynamic-english
  ;;                 pyim-probe-isearch-mode
  ;;                 pyim-probe-program-mode
  ;;                 pyim-probe-org-structure-template
  ;;                 ))

  ;; 与 pyim-probe-dynamic-english 配合，方便切换至中文模式
  :bind
  (
   ;; ("<f2> SPC" . pyim-convert-string-at-point)
   ;; ("M-SPC" . toggle-input-method)
   (:map pyim-mode-map
    ;; ("<f2> TAB" . pyim-toggle-assistant-scheme)
    ("/" . pyim-toggle-assistant-scheme)
    ("_" . pyim-toggle-input-ascii)
    ("\\" . pyim-toggle-input-ascii)
    ))
  )
#+end_src

**** fcitx
自动中英文切换, 解决vim模式下的一大痛点.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package! fcitx
  :after evil
  :config
  (when (executable-find "fcitx-remote")
    ;; (fcitx-prefix-keys-add "M-m")
    ;; 影响搜索界面, 不应该开
    ;; (setq fcitx-use-dbus t)
    (fcitx-aggressive-setup)
    ))
#+END_SRC

*** chinese/fonts setup
最早用cnfonts, 不过这个也比较麻烦. 现在用Sarasa之类的中英文等宽字体, 可较完美解
决中英文表格对齐问题

查看字体:
: describe-char
#+begin_src elisp :comments nil
;; 2021-08-25: 留着, 但暂时用不上
;; https://emacs-china.org/t/doom-emacs/10390
(defun gwp/set-fonts()
  (interactive)
  (if (display-graphic-p)
      (progn
        ;; english font
        ;; (set-face-attribute 'default nil :font (format "%s:pixelsize=%d" "Monaco" 16)) ;; 11 13 17 19 23
        ;; (setq doom-font (font-spec :family "Monaco" :size 16))
        ;; (setq doom-font (font-spec :family "Monaco"))
        ;; chinese font
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
          (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "Adobe Heiti Std")))) ;; 14 16 20 22 28
    ))

;; 2021-08-25: 不需要单独设置了
;; org-mode表格中文混排对齐
;; (after! org
;;   ;; (call-interactively 'gwp/set-fonts)
;;   (custom-set-faces!
;;     `(org-table :family "Ubuntu Mono")
;;     )
;;   )

;; for doom-emacs only
;; https://emacs-china.org/t/emacs/15676/20
;; https://github.com/ztlevi/doom-config/blob/main/%2Bui.el
(when (display-graphic-p)
  (setq user-font
        (cond
         ((find-font (font-spec :name  "Sarasa Fixed SC")) "Sarasa Fixed SC")
         ((find-font (font-spec :name  "Iosevka")) "Iosevka")
         ((find-font (font-spec :name  "Inconsolata Nerd Font")) "Inconsolata Nerd Font")
         ((find-font (font-spec :name  "Ubuntu Mono")) "Ubuntu Mono")))
  ;; (setq resolution-factor (eval (/ (x-display-pixel-height) 1080)))
  (setq resolution-factor 2)
  (setq ideal-font-size (eval (* 15 resolution-factor)))
  (setq big-font-size (eval (* 18 resolution-factor)))
  (setq doom-font (font-spec :family user-font :size ideal-font-size)
        ;; doom-serif-font (font-spec :family user-font)
        doom-variable-pitch-font (font-spec :family user-font)
        ;; doom-unicode-font (font-spec :family user-font)
        doom-big-font (font-spec :family user-font :size big-font-size))
  )
#+end_src

*** theme
#+begin_src elisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-acario-light)
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-material)
(setq doom-theme 'doom-nova)
;; (setq doom-theme 'doom-vibrant)
;; (load-theme 'material t)
(custom-set-faces!
  '(org-todo :foreground "yellow" :weight bold :background "#263238")
  '(org-done :foreground "yellow" :weight bold :background "#263238")
  '(org-table :foreground "#e3f2fd")
  '(hl-line :background "#37474f")
  '(org-level-1 :foreground "#e3f2fd" :height 1.1 :background nil :weight bold :box nil)
  '(org-level-2 :foreground "#e3f2fd" :height 1.0 :background nil :weight normal :box nil)
  '(org-headline-done :foreground "gray" :weight normal)
  )

;; 当前行
(custom-set-faces!
  '(hl-line :background "#37474f")
  '(solaire-hl-line-face :background "#37474f")
  '(region :background "#555555")
  )
#+end_src
*** highlight
- [[https://emacs-china.org/t/package-symbol-overlay-symbol/7706][论坛讨论]]

非常好用. 要点:
- 光标置于symbol左右, symbol-overlay-put 可切换高亮状态. 切n/p可跳转至前后高亮的位置.
- 可同时高亮多组symbols. 每组独立控制.
- 当光标在symbol外时, 可用 symbol-overlay-switch-forward 来跳回到最近那组高亮的
  symbols. 要跳回起跳位置可按e键.
- symbol-overlay没法定义搜索的字符, 这时可用highlight-regexp命令来替代.

#+name: fae9a6ea
#+begin_src elisp
;; symbol-overlay
;;;  a highlight-symbol replacement.
(use-package symbol-overlay
  :config
  ;; 用 transient 不如下面的好. 下面的可以用"."命令来重做上次的操作.
  (general-define-key :prefix-map 'gwp::symbol-overlay-map
                      "h" 'symbol-overlay-put
                      "r" 'symbol-overlay-rename
                      "t" 'symbol-overlay-toggle-in-scope
                      "n" 'symbol-overlay-switch-forward ; 当在高亮的字符外时, 可快速返回.
                      "p" 'symbol-overlay-switch-backward
                      "d" 'symbol-overlay-remove-all
                      "R" 'symbol-overlay-query-replace)
  ;; 等价设置; 备忘
  ;; (setq symbol-overlay-map (make-sparse-keymap))
  ;; (setq gwp::symbol-overlay-map (make-sparse-keymap))
  ;; (define-key gwp::symbol-overlay-map (kbd "h") 'symbol-overlay-put)
  ;; (define-key gwp::symbol-overlay-map (kbd "n") 'symbol-overlay-jump-next)
  ;; (define-key gwp::symbol-overlay-map (kbd "p") 'symbol-overlay-jump-prev)
  ;; (define-key gwp::symbol-overlay-map (kbd "w") 'symbol-overlay-save-symbol)
  ;; (define-key gwp::symbol-overlay-map (kbd "t") 'symbol-overlay-toggle-in-scope)
  ;; (define-key gwp::symbol-overlay-map (kbd "e") 'symbol-overlay-echo-mark)
  ;; (define-key gwp::symbol-overlay-map (kbd "d") 'symbol-overlay-jump-to-definition)
  ;; (define-key gwp::symbol-overlay-map (kbd "s") 'symbol-overlay-isearch-literally)
  ;; (define-key gwp::symbol-overlay-map (kbd "q") 'symbol-overlay-query-replace)
  ;; (define-key gwp::symbol-overlay-map (kbd "r") 'symbol-overlay-rename)
  )
#+end_src

*** misc
#+name: 6013493c
#+begin_src elisp
;; View images inside Emacs
(auto-image-file-mode t)

;; set line space wider than default
(setq-default line-spacing 4)
#+end_src

*** packages.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/modules/gwp/ui/packages.el
:END:
#+name: d6a037d0
#+begin_src elisp
;; (package! fcitx)
(package! rime)
(package! golden-ratio)
; (package! pyim)
;; 五笔输入法
;; (package! pyim-wbdict)

;; pangu-spacing 自动给中英文字加空格, 这严重影响响应速度.
(disable-packages! pangu-spacing)
;; 避免与rime的设置有冲突
(disable-packages! pyim)
#+end_src
** develop
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/modules/gwp/develop/config.el
:END:
*** imenu
- [[https://emacs.stackexchange.com/questions/30673/next-prev-imenu-item-function/33747#33747][motion - next/prev-imenu-item function - Emacs Stack Exchange]]
- 也可以参考这个改(基于 counsel) [[file:redguardtoo-emacs.d/lisp/init-utils.el::defun my-closest-imenu-item-internal][my-closest-imenu-item-internal]]

#+name: f28734ed
#+begin_src elisp
;; https://emacs.stackexchange.com/a/33747
(defun gwp::imenu-goto--closest-dir (direction)
  "Jump to the closest imenu item on the current buffer.
If direction is 1, jump to next imenu item.
If direction is -1, jump to previous imenu item.
See https://emacs.stackexchange.com/questions/30673
Adapted from `which-function' in::
https://github.com/typester/emacs/blob/master/lisp/progmodes/which-func.el"
  ;; Ensure `imenu--index-alist' is populated.
  (imenu--make-index-alist)

  (let ((alist imenu--index-alist)
        (minoffset (point-max))
        offset pair mark imstack destination)
    ;; Elements of alist are either ("name" . marker), or
    ;; ("submenu" ("name" . marker) ... ). The list can be
    ;; Arbitrarily nested.
    (while (or alist imstack)
      (if alist
          (progn
            (setq pair (car-safe alist)
                  alist (cdr-safe alist))
            (cond
             ((atom pair)) ;; Skip anything not a cons.

             ((imenu--subalist-p pair)
              (setq imstack   (cons alist imstack)
                    alist     (cdr pair)))

             ((number-or-marker-p (setq mark (cdr pair)))
              (when (> (setq offset (* (- mark (point)) direction)) 0)
                (when (< offset minoffset) ;; Find the closest item.
                  (setq minoffset offset
                        destination mark))))))

        (setq alist   (car imstack)
              imstack (cdr imstack))))
    (when destination
      (imenu-default-goto-function "" destination ""))))

(defun gwp::imenu-goto-next ()
  (interactive)
  (unless (gwp::imenu-goto--closest-dir 1)
    (goto-char (point-max)))
  (recenter))

(defun gwp::imenu-goto-prev ()
  (interactive)
  (unless (gwp::imenu-goto--closest-dir -1)
    (goto-char (point-min)))
  (recenter))

;; vim里没有Alt修饰, M-x类绑定可以放心用
(map! :n "M-n" #'gwp::imenu-goto-next)
(map! :n "M-p" #'gwp::imenu-goto-prev)
#+end_src

*** vterm
安装 vterm-toggle package. 这个比doom内置的强, 支持tramp buffer.
#+begin_src elisp :tangle pkg/.doom.d/packages.el
(package! vterm-toggle)
#+end_src

*** completion
关于 [[https://github.com/universal-ctags/citre/blob/master/docs/user-manual/citre-peek.md][citre-peek]]
: M-n, M-p: Next/prev line.
: M-N, M-P: Next/prev definition.
: M-l j: Jump to the definition.
: C-g: Close the peek window.

#+name: d28bc89a
#+begin_src elisp
;; Use hippie-expand instead of dabbrev-expand
;; (global-set-key (kbd "M-/") #'dabbrev-expand)
(global-set-key (kbd "M-/") #'hippie-expand)
;; the same behavior as the original `dabbrev-expand'
(setq hippie-expand-dabbrev-skip-space t)

;; adjust the list of functions that hippie-expand will try
(setq hippie-expand-try-functions-list
      '(
        try-expand-dabbrev-visible      ; first try the expansions from the currently visible parts
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-line
        try-expand-dabbrev-from-kill
        ;; try-expand-all-abbrevs
        ;; try-expand-list
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol
        ))

(after! company
  (setq company-idle-delay 1.5
        company-minimum-prefix-length 2))

(use-package! citre
  :defer t
  :init
  ;; This is needed in `:init' block for lazy load to work.
  (require 'citre-config)
  (map! :leader
        (:prefix-map ("j" . "jump")
         (:prefix-map ("c" . "citre")
          :desc "citre jump to definition"                    "d" #'citre-jump
          :desc "citre jump back"                             "b" #'citre-jump-back
          :desc "citre peek"                                  "p" #'citre-peek
          ))))
#+end_src
*** find file in project
- [[https://github.com/redguardtoo/find-file-in-project][redguardtoo/find-file-in-project: Quick access to project files in Emacs]]

#+name: 81cb1ab5
#+begin_src elisp
(use-package find-file-in-project
  :config
  (setq ffip-use-rust-fd t))
#+end_src

*** vc commit
自动更新时间戳
#+name: 3ac9a958
#+BEGIN_SRC emacs-lisp
(use-package vc
  :init
  (add-hook 'vc-before-checkin-hook #'time-stamp))

(use-package vc-hooks
  :init
  ;; Don't ask if I want to visit a sym-linked file under VC. I always want to!
  (setq vc-follow-symlinks t))
#+END_SRC

*** yadm [[https://github.com/TheLocehiliosan/yadm/blob/master/yadm.md][yadm/yadm.md at master · TheLocehiliosan/yadm]]
快捷键 SPC g y
#+name: 0717be82
#+begin_src emacs-lisp
;; (magit-status  "/yadm::")
(after! tramp
  (add-to-list 'tramp-methods
             '("yadm"
               (tramp-login-program "yadm")
               (tramp-login-args (("enter")))
               (tramp-login-env (("SHELL") ("/bin/sh")))
               (tramp-remote-shell "/bin/sh")
               (tramp-remote-shell-args ("-c")))))
#+end_src

*** rust-mode
**** task [0/2]
- [ ] (define-key rust-mode-map (kbd "C-c C-c") 'rust-run)
- [ ] [[https://github.com/ayrat555/cargo-mode][ayrat555/cargo-mode: Emacs minor mode which allows to dynamically select cargo command]]

**** docs
- 关于补全: lsp/rust-analyze太重了, racer更简单一些.
- 解决花括号中 "{|}" 中换行行为, 与spacemacs保持一致.
- https://emacs.stackexchange.com/questions/2837/automatically-formatting-brackets

重要资源
- [[https://github.com/rust-lang/rust-mode][rust-lang/rust-mode]]
- rustic相关 [[https://github.com/brotzeit/rustic][brotzeit/rustic: Rust development environment for Emacs]]
  (rustic-mode以后会是依赖于rust-mode的增强版 [[https://github.com/rust-lang/rust-mode/issues/405][Towards making rustic use rust-mode #405]])

**** edit
#+begin_src emacs-lisp
(after! smartparens
  (sp-local-pair 'rust-mode "{" nil :post-handlers '(:add ("||\n[i]" "RET")))
  ;; Rust closure中使用
  (sp-with-modes '(rust-mode)
    (sp-local-pair "|" "|"))
  )

(add-hook 'rust-mode-hook
          (lambda () (require 'smartparens-rust)))

(after! org-src
  (add-to-list 'org-src-lang-modes '("rust" . rust)))
#+end_src

**** cargo/rust-mode
使用 rust-mode中的cargo
- [[https://github.com/rust-lang/rust-mode/blob/master/rust-compile.el][rust-mode/rust-compile.el]]

基于compilation mode定制
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html][Compilation Mode - GNU Emacs Manual]]

以下自定义cargo命令, 比在term下执行更好一些.
- 使用Alt-n, Alt-p可以快速定位error或warning 或C-j, C-k
- 链接到的src文件可直接打开.

现有如下问题, 导致编译buffer无法基于出错信息跳转到对应文件:
- [[https://github.com/rust-lang/cargo/issues/5895][Error messages use relative paths differently if in a workspace · Issue #5895 · rust-lang/cargo]]

为此, 我们需要cargo.sh, 包装下cargo命令, 在emacs调用前, 切到workspace根目录, 但执行cargo时再换为到原buffer对应目录.
这样, 可仅编译当前包, 无不是所有workspace中的包, 同时还能解决error跳转的问题.

cargo默认输出warning太多, 以下命令调用cargo, 但忽略warnings. 同时编译信息里强制输出文件全路径

#+begin_src shell :tangle ~/.local/bin/cargo.sh :shebang #! /bin/bash
# a wrapper for cargo command to work around a cargo issue:
# https://github.com/rust-lang/cargo/issues/5450#issuecomment-732954248

# goto current workspace memeber directory
cd "$1"
shift

# supress warnings and print full file paths in compilation
export RUSTFLAGS="$RUSTFLAGS -Awarnings"
cargo $@
#+end_src

#+begin_src elisp
(require 'rust-mode)
(require 'cargo)

;; taken from rust-cargo.el
(defun gwp/cargo-compile (args)
  ;; taken from cargo.el
  ;;
  ;; workaround cargo issue: https://github.com/rust-lang/cargo/issues/5895
  ;;
  ;; to make "jump-to-error" work, we need start compilation in workspace root dir
  (let (
        ;; save current directory
        (old-directory default-directory)
        (default-directory (or (cargo-process--workspace-root)
                               default-directory))
        )
    (compile (format "cargo.sh \"%s\" %s" old-directory args))
    ))

(defun gwp/rust-cargo-tangle-watch-check ()
  "Compile using `cargo watch and check`
The org src will be tangled first before compiling.
"
  (interactive)
  (gwp/org-babel-tangle-dwim)
  (gwp/rust-cargo-watch-check))

(defun gwp/rust-cargo-watch-check ()
  "Compile using `cargo watch and check`
"
  (interactive)
  (gwp/cargo-compile "check -q"))

(defun gwp/rust-cargo-tangle-watch-test ()
  "Compile using `cargo watch and test`
The org src will be tangled first before compiling.
"
  (interactive)
  (gwp/org-babel-tangle-dwim)
  (gwp/rust-cargo-watch-test))

(defun gwp/rust-cargo-watch-test ()
  "Compile using `cargo watch and test`
The org src will be tangled first before compiling.
"
  (interactive)
  (gwp/cargo-compile "d"))

(defun gwp/rust-cargo-update ()
  "Execute `cargo update` command"
  (interactive)
  (gwp/cargo-compile "update"))

(defun gwp/rust-cargo-doc-open ()
  "Execute `cargo doc --open` command"
  (interactive)
  (gwp/cargo-compile "doc --open --no-deps"))

(defun gwp/rust-cargo-edit-upgrade ()
  "Execute `cargo upgrade --dry-run` command"
  (interactive)
  (gwp/cargo-compile "upgrade --dry-run"))

;; ;; 修改popup window, 放大一些, 方便查看.
;; (set-popup-rule! "^\\*compilation\\*" :size 0.85 :quit t :select t :ttl nil)
;; gwp/org-babel-tangle-dwim

(require 'transient)
(transient-define-prefix gwp/rust-cargo-transient ()
  "rust development tools"
  [["compile org src:"
    :if org-in-src-block-p
    ("o b" "tangle src only" gwp/org-babel-tangle-dwim)
    ("o c" "tangle src & cargo check" gwp/rust-cargo-tangle-watch-check)
    ("o t" "tangle src & cargo test" gwp/rust-cargo-tangle-watch-test)
    ]]
  [["compile rust project:"
    ("c" "cargo check" gwp/rust-cargo-watch-check)
    ("t" "cargo test" gwp/rust-cargo-watch-test)
    ("d" "cargo doc" gwp/rust-cargo-doc-open)
    ("u" "cargo update" gwp/rust-cargo-update)
    ("U" "cargo upgrade" gwp/rust-cargo-edit-upgrade)
    ]]
  )

(map! :map org-mode-map
      :localleader
      "1" #'gwp/rust-cargo-transient
      )
(map! :map rust-mode-map
      :localleader
      "1" #'gwp/rust-cargo-transient
      )
#+end_src

**** cargo/cargo.el
:PROPERTIES:
:header-args: :tangle no
:END:
- [[https://github.com/kwrooijen/cargo.el][kwrooijen/cargo.el: Emacs Minor Mode for Cargo, Rust's Package Manager.]]

[2021-09-20 Mon] 这里的问题: 执行时会切到workspace root执行, 如果hack后, 就与rust-mode中的功能相当了.

cargo命令如果使用C-u 调用, 可在minibuffer中修改cargo参数.

以下自定义cargo-watch命令, 比在term下执行更好一些.
- p, n来跳转到前一个或下一个error
- 使用Alt-n, Alt-p可以快速定位error或warning 或C-j, C-k
- 链接到的src文件可直接打开.
- 按q退出

使用el-path修改cargo-process调用方式, 不要切换至workspace根目录执行cargo命令, 更
匹配命令行使用习惯.
#+begin_src elisp
(eval-when-compile (require 'el-patch))

(use-package cargo
  :defer t
  :hook (rust-mode . cargo-minor-mode)
  :custom
  (cargo-process--custom-path-to-bin "cargo.sh")
  (cargo-process--command-check "check -q")
  (cargo-process--command-test "test -- --nocapture --test-threads=1")
  ;;   :config/el-patch
  ;;   (defun cargo-process--start (name command &optional last-cmd opens-external)
  ;;     "Start the Cargo process NAME with the cargo command COMMAND.
  ;; OPENS-EXTERNAL is non-nil if the COMMAND is expected to open an external application.
  ;; Returns the created process."
  ;;     (set-rust-backtrace command)
  ;;     (let* ((buffer (concat "*Cargo " name "*"))
  ;;            (project-root (cargo-process--project-root))
  ;;            (cmd
  ;;             (or last-cmd
  ;;                 (cargo-process--maybe-read-command
  ;;                  (cargo-process--augment-cmd-for-os opens-external
  ;;                                                     (mapconcat #'identity (list (shell-quote-argument cargo-process--custom-path-to-bin)
  ;;                                                                                 command
  ;;                                                                                 ;; (manifest-path-argument name)
  ;;                                                                                 cargo-process--command-flags)
  ;;                                                                " ")))))
  ;;            ;; (default-directory (or project-root default-directory))
  ;;            )
  ;;       (save-some-buffers (not compilation-ask-about-save)
  ;;                          (lambda ()
  ;;                            (and project-root
  ;;                                 buffer-file-name
  ;;                                 (string-prefix-p project-root (file-truename buffer-file-name)))))
  ;;       (setq cargo-process-last-command (list name command cmd))
  ;;       ;; (let ((default-directory (or (cargo-process--workspace-root)
  ;;       ;;                              default-directory)))
  ;;       ;;   (compilation-start cmd 'cargo-process-mode (lambda(_) buffer)))
  ;;       (compilation-start cmd 'cargo-process-mode (lambda(_) buffer))
  ;;       (let ((process (get-buffer-process buffer)))
  ;;         (set-process-sentinel process 'cargo-process--finished-sentinel)
  ;;         process)))

  :init
  (add-hook 'conf-toml-mode-hook 'cargo-minor-mode) ; when edit Cargo.toml
  )

(require 'cargo)
(require 'transient)
(transient-define-prefix gwp/rust-cargo-transient ()
  "Search zotero database"
  [["Search zotero items:"
    ("c" "cargo check" cargo-process-check)
    ("t" "cargo test" cargo-process-test)
    ("u" "cargo update" cargo-process-update)
    ("d" "cargo doc" cargo-process-doc-open)
    ]]
  )

(map! :map org-mode-map
      :localleader
      "1" #'gwp/rust-cargo-transient
      )
(map! :map rust-mode-map
      :localleader
      "1" #'gwp/rust-cargo-transient
      )
#+end_src

**** racer
用于自动补全, 比lsp更轻便些.
#+begin_src elisp
(use-package cargo
  :defer t
  :init
  (progn
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (add-hook 'racer-mode-hook #'company-mode)
    ))
#+end_src

**** rust-format
rust版比doom版的更好, 可自动跳转到出错点(c-c c-n)
#+name: 151a16d0
#+begin_src elisp
(map! :map rust-mode-map
      :localleader
      "f" #'rust-format-buffer
      "C-f" #'rust-format-buffer
      "=" #'rust-format-buffer)

(use-package rust-mode
  :hook (rust-mode . gwp/override-doom-format-buffer)
  )

(defun gwp/override-doom-format-buffer ()
  (evil-local-set-key 'normal (kbd "SPC =") 'rust-format-buffer)
  ;; 无效
  ;; (evil-local-set-key 'normal (kbd "SPC c f") 'rust-format-buffer)
  )

(gwp-leader-def
  :keymaps 'rust-mode-map
  "f" 'rust-format-buffer
  )
#+end_src

**** edit
#+name: 72f0d377
#+begin_src elisp
(defun gwp/rust-insert-option (&optional result)
  "Insert the Option type."
  (interactive)

  (when (region-active-p)
    (sp-wrap-with-pair "<")
    (backward-char)
    (insert (or result "Option"))
    ))

(defun gwp/rust-unwrap-option (&optional result)
  "Remove Option type wrapper"
  (interactive)

  (when (region-active-p)
    (when (> (mark) (point))
      (exchange-point-and-mark))
    (sp-unwrap-sexp)
    (when (search-backward (or result "Option") (line-beginning-position) t)
      (delete-region (match-beginning 0) (match-end 0))
      )))


;; https://github.com/Wilfred/.emacs.d/blob/gh-pages/user-lisp/rust-customisations.el
(defun gwp/rust-toggle-pub ()
  "Toggle the public visibility of the function at point."
  (interactive)
  (save-excursion
    ;; If we're already at the beginning of the function definition,
    ;; `beginning-of-defun' moves to the previous function, so move elsewhere.
    (end-of-line)
    (beginning-of-defun)
    (if (looking-at "pub ")
        (delete-char 4)
      (insert "pub "))))

(defun gwp/rust-insert-result ()
  (interactive)
  (gwp/rust-insert-option "Result"))

(defun gwp/rust-unwrap-result ()
  (interactive)
  (gwp/rust-unwrap-option "Result"))

(transient-define-prefix gwp/rust-edit-transient ()
  "rust development tools"
  [["Result"
    ("o" "Wrap in Option" gwp/rust-insert-option)
    ("u" "Unwrap Option" gwp/rust-unwrap-option)
    ]]
  [["Result"
    ("r" "Wrap in Result" gwp/rust-insert-result)
    ("k" "Unwrap Result" gwp/rust-unwrap-result)
    ]]
  [["Pub"
    ("p" "toggle pub at point" gwp/rust-toggle-pub)
    ]]
  )

;; (defhydra gwp/rust-edit-hydra ()
;;   ("o" gwp/rust-insert-option "wrap with Option")
;;   ("u" gwp/rust-unwrap-option "unwrap Option")
;;   ("q" nil "quit")
;;   )

(map! :map rust-mode-map
      :localleader
      "e" #'gwp/rust-edit-transient
      :desc "select inner type" "m" (general-simulate-key "vi<")
      )
#+end_src

xx <=> Option<xx>

*** rustic-mode
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src elisp
(use-package rustic
  :custom
  (rustic-lsp-client nil)
  (rustic-format-on-save nil)
  (rustic-display-spinner nil)
  )
#+end_src

*** python
[[file:doom-emacs/modules/tools/eval/README.org::+TITLE: tools/eval]]

: SPC-o-r 打开repl
: SPC-c-s send-region
默认的挺难用的
#+begin_src elisp :tangle no
(after! python
  (setq python-shell-interpreter "ipython"))
#+end_src

使用tmux/ipython组合来实现

#+name: 44b70ed9
#+begin_src elisp
(defun gwp/tmux-ipython-paste-region (beg end &optional region)
  "Execute \"%paste\" in tmux session"
  (interactive "r")
  (kill-ring-save beg end)
  (+tmux/run "%paste"))
#+end_src

*** packages.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/modules/gwp/develop/packages.el
:END:
需要安装cargo.el等包
#+name: e86dc54d
#+begin_src elisp
(package! magit)
(package! magit-todos)
(package! cargo)
(package! racer)
(package! rust-mode)
(package! citre)
(package! find-file-in-project)
#+end_src

** edit
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/modules/gwp/edit/config.el
:END:
*** duplicate
可用的
- delete-duplicate-lines

#+name: 3eff5fa2
#+begin_src elisp
(defun gwp::duplicate-region (beg end)
  (interactive "r")
  (save-excursion
    (let* ((beg (or beg (region-beginning)))
           (end (or end (region-end)))
           (region (buffer-substring beg end)))
      (goto-char end)
      (insert region))))

(defun gwp::duplicate-line (&optional stay)
  (save-excursion
    (move-end-of-line nil)
    (save-excursion
      (insert (buffer-substring (point-at-bol) (point-at-eol))))
    (newline)))

(defun gwp::duplicate-line-or-region()
  "复制当前行或选定区域"
  (interactive)
  (if (region-active-p)
      (call-interactively #'gwp::duplicate-region)
    (gwp::duplicate-line)))

(map! :leader "C-d" #'delete-duplicate-lines)

;; (use-package move-dup
;;   :config
;;   (map! :iv "M-j" #'move-dup-move-lines-down)
;;   (map! :iv "M-k" #'move-dup-move-lines-up)
;;   (map! :iv "C-M-j" #'move-dup-duplicate-down)
;;   (map! :iv "C-M-k" #'move-dup-duplicate-up))
#+end_src
*** clipboard
#+name: e571c476
#+begin_src elisp
(use-package simpleclip)

;; 从其它程序复制的内容也放至在kill-ring中, 不会因为emacs的操作而覆盖之前的内容
(setq save-interprogram-paste-before-kill t)
#+end_src

*** kill/delete/yank
#+name: b5a74212
#+begin_src elisp
(setq kill-ring-max 999)

;; 粘贴时删除区域中的内容, 不污染clipboard, 方便连续yank.
(defun gwp::yank-dwim (arg)
  "粘贴并覆盖选定区域. 如果以C-u调用则提示从kill-ring中选择"
  (interactive "P")
  (when (region-active-p)
    (call-interactively #'delete-region))
  (if (equal arg '(4))                  ; C-u
      (call-interactively #'counsel-yank-pop)
    (call-interactively #'yank)))
(map! :nv "C-y" #'gwp::yank-dwim)

;; 保持和terminal中的行为一致: 删除选定区域或向后一个单词
(defun gwp::ctrl-w-dwim ()
  (interactive)
  (if (region-active-p)
      (call-interactively #'kill-region)
    (call-interactively #'backward-kill-word)))

(map! :vi "C-w" #'gwp::ctrl-w-dwim); cut, copy: Alt-w
;; 默认为set-face之类的东西
(map! "M-o" #'just-one-space)
;; 删除到行尾
(map! :i "C-k"  #'kill-line)
; 删除多余空行, 仅保留一行
;; C-x C-o
(map! :leader "C-o" #'delete-blank-lines)
#+end_src

删除字符或选定区域, 但不经过kill-ring
: delete-char (C-d, DELETE), delete-backward-char (BACKSPACE)
: delete-region

比如, 希望删除选定内容, 粘贴之前复制的内容. 因为不污染clipboard, 这样就没必要从clipboard中选择内容了.
#+name: 7d5caf69
#+begin_src elisp
(defun gwp::ctrl-d-dwim (prefix)
  "清除区域或复制区域"
  (interactive "P")
  (if prefix                  ; C-u
      (call-interactively #'gwp::duplicate-line-or-region)
    (call-interactively #'gwp::delete-char-or-region)))

(defun gwp::delete-char-or-region()
  "清除光标前字符或选定区域"
  (interactive)
  (if mark-active
      (call-interactively #'delete-region)
    (delete-char 1)))
#+end_src

供参考
[[https://github.com/Wilfred/.emacs.d/blob/gh-pages/init.el][.emacs.d/init.el at gh-pages · Wilfred/.emacs.d]]
#+begin_src elisp :tangle no
;; I sometimes want to simply delete a region, rather than
;; saving it to the kill-ring. I've added a function that allows me to
;; type =C-u C-w= to delete the region, whilst =C-w= works as normal.

(defun gwp::kill-or-delete-region (beg end prefix)
  "Delete the region, storing it in the kill-ring.
If a prefix argument is given, don't change the kill-ring."
  (interactive "r\nP")
  (if prefix
      (delete-region beg end)
    (kill-region beg end)))
#+end_src

*** evil
可以用来定义 leader 的键
- z
- b: evil-backward-word-begin
- w/W
- q/Q
- ,
- \: evil-execute-in-emacs-state
- -: evil-previous-line-first-non-blank
- =: evil-indent
- F5

#+name: 73388047
#+begin_src elisp
;; 默认q为macro键, 我很少用. 改为快速移动类按键.
(map! :n "q" #'evil-forward-paragraph)
(map! :n "Q" #'evil-backward-paragraph)

;; 默认为word-end类移动
(map! :n "e" #'evil-forward-sentence-begin)
(map! :n "E" #'evil-backward-sentence-begin)

;; 下面可以用 M-f/M-b 代替
;; (map! :n "w" #'evil-forward-word-begin)
;; (map! :n "W" #'evil-backward-word-begin)

;; C-v: evil默认为quoted-insert, 可以 ctrl-q代替
(map! :i "C-v" #'yank)
(map! :i "C-y" #'yank)

;; 禁用evil中的ctrl-e, 默认为向上滚动, 不太习惯.
(map! :nvim "C-a" nil)
(map! :nvim "C-e" nil)
(map! :nvim "C-d" #'gwp::ctrl-d-dwim)
(map! :nvim "C-k" nil)
(map! :nvim "C-n" nil)
(map! :nvim "C-p" nil)
(map! :nvim "C-u" nil)                  ; universal argument

(after! evil-org
  (map! :map evil-org-mode-map
        :nvim "C-d" #'gwp::ctrl-d-dwim
        :nvim "C-k" nil
        :i "M-l" nil))

;; insert state下用emacs默认按键
;; 2021-10-13: 设置无效
;; (setq evil-disable-insert-state-bindings t)
#+end_src

*** undo
感觉emacs的undo比evil的强

默认绑定:
C-x u, C-_ C-/

C-u C-/ 如果选中区域, 则仅撤销当前内容.

#+name: 9f41280c
#+begin_src elisp
(defun gwp::undo-dwim ()
  (interactive)
  (if (region-active-p)
      (let ((current-prefix-arg '(4)))     ; C-u
        (call-interactively #'undo))
    (call-interactively #'evil-undo)))

(map! :nv "u" #'gwp::undo-dwim)

;; 默认evil的undo会将多个小操作合并为一个大的, undo时很不适应.
(setq evil-want-fine-undo t)
#+end_src

*** newline
在注释环境下更容易使用, 用ctrl-enter容易误按.
#+name: 1a0721e0
#+begin_src elisp
(map! :ni  "C-j"           #'+default/newline-below)
#+end_src

*** search/replace
emacs默认搜索光标处的字词:
: C-s C-w
按C-c ;后可跳转(avy)

在evil中可用*或/. 感觉evil更方便.
#+name: b23f833f
#+begin_src elisp
(defun gwp::swiper-from-clipboard (prefix)
  "从clipboard取词来搜索"
  (interactive "P")
  (let ((keyword
         (simpleclip-get-contents)))
    (swiper-isearch keyword)))
#+end_src

*** hydra
特别适合需要重复按键来完成的操作, 比如调整窗口大小.
#+name: 356a926a
#+begin_src elisp
(use-package hydra)
#+end_src

*** keyfreq
[[https://github.com/dacap/keyfreq][dacap/keyfreq: Track Emacs commands frequency]]
可用keyfreq-show查看按键统计排序
#+begin_src elisp
(require 'keyfreq)
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+end_src

*** auto-save
开启自动保存
#+begin_src elisp
(setq
 ;; doom里已默认为true
 auto-save-default t
 ;; 默认为5秒. 这里改大一些, 避免编辑时自动保存太快, 光标前的空格被吞掉
 auto-save-visited-interval 30)

;; 自动保存至当前文件名, 而临时文件
(auto-save-visited-mode +1)
#+end_src

*** ctrl-z
默认切换为emacs-state, 经常按错.
#+name: 9edb7f25
#+begin_src elisp
(after! evil
  ;; 如何误入evil-emacs-state, 按ESC返回normal state
  (define-key evil-emacs-state-map [escape] 'evil-normal-state))
#+end_src

*** upcase/downcase
解决大小写, 首字母大写等问题. 在evil visual state中, 也可直接用u/U来实现相同功能.
#+name: b9054953
#+begin_src elisp
(map! :vi "M-u" #'upcase-dwim
      :vi "M-l" #'downcase-dwim
      :vi "M-c" #'capitalize-dwim)
#+end_src

*** smartparens
[2021-10-05 Tue] 基本上没使用过, 禁用之
#+begin_src elisp :tangle no
(map! :leader
      :nvi
      "DEL" #'sp-backward-kill-sexp     ; BACKSPACE
      [deletechar] #'sp-kill-sexp       ; DELETE
      [right] #'sp-forward-slurp-sexp   ; Array right ==>
      [left]  #'sp-backward-slurp-sexp  ; Array left  <==
      "C-k"   #'sp-unwrap-sexp
      )
#+end_src

kill
: (foo |(abc) bar)  -> (foo | bar) ;; nil, defaults to 1
: (1 2 3 |4 5 6)    -> (|)         ;; 0
: (foo |(bar) baz)  -> |           ;; SPC u SPC u
: (1 |2 3 4 5 6)    -> (1|)        ;; SPC u

slurp
: (foo |bar) baz        -> (foo |bar baz)
: [(foo |bar)] baz      -> [(foo |bar) baz]
: ((|foo) bar baz quux) -> ((|foo bar baz quux)) ;; with SPC u

unwrap
: |(foo bar baz)     -> |foo bar baz
: (foo bar| baz)     -> foo bar| baz

*** mark ring
mark-ring用于保存上次标记或选择的位置, 用于跳转很有用.

emacs 的 mark ring [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html#Mark-Ring][doc]]. emacs 会自动记录标记, 称为 mark ring. 鼠标选择, shift 选
择都算C-x C-x: 交换当前光标位置和 mark, 这样会跳转到上前 mark 的位置上, 不过会有
高亮, 按 C-g 取消

: set-mark-command
C-x C-@: 这是轮换全局 mark
C-u C-@: 这是轮换当前的 mark ring

- [[https://github.com/rolandwalker/back-button][rolandwalker/back-button: Visual navigation through mark rings in Emacs]]
- [[https://stackoverflow.com/questions/3393834/how-to-move-forward-and-backward-in-emacs-mark-ring][How to move forward and backward in Emacs' mark ring - Stack Overflow]]
- https://github.com/rolandwalker/back-button/blob/master/back-button.el
- [[https://github.com/slewsys/emacs-extensions/blob/main/mark-navigation.el][emacs-extensions/mark-navigation.el]]
- [[https://github.com/rolandwalker/back-button][rolandwalker/back-button: Visual navigation through mark rings in Emacs]]

**** core
#+name: e4fc036b
#+begin_src elisp
;; 要保证 C-u C-@ 连续调用有效
(setq set-mark-command-repeat-pop nil)

(defun gwp::jump-to-previous-mark ()
  (interactive)
  (let ((current-prefix-arg '(4)))     ; C-u
    (call-interactively #'set-mark-command)))

;; 根据手册: C-SPC C-SPC两次
;; 仅标记当前位置(push to mark ring), 但不选择
(defun gwp::mark-current-position ()
  (interactive)
  (call-interactively #'set-mark-command)
  (deactivate-mark)
  )

(setq global-mark-ring-max 99
      mark-ring-max 99)
#+end_src

**** global mark ring
#+name: e48dc36a
#+begin_src elisp
;; https://stackoverflow.com/a/27661338
(defun marker-is-point-p (marker)
  "test if marker is current point"
  (and (eq (marker-buffer marker) (current-buffer))
       (= (marker-position marker) (point))))

(defun push-mark-maybe ()
  "push mark onto `global-mark-ring' if mark head or tail is not current location"
  (if (not global-mark-ring) (error "global-mark-ring empty")
    (unless (or (marker-is-point-p (car global-mark-ring))
                (marker-is-point-p (car (reverse global-mark-ring))))
      (push-mark))))


(defun backward-global-mark ()
  "use `pop-global-mark', pushing current point if not on ring."
  (interactive)
  (push-mark-maybe)
  (when (marker-is-point-p (car global-mark-ring))
    (call-interactively 'pop-global-mark))
  (call-interactively 'pop-global-mark))

(defun forward-global-mark ()
  "hack `pop-global-mark' to go in reverse, pushing current point if not on ring."
  (interactive)
  (push-mark-maybe)
  (setq global-mark-ring (nreverse global-mark-ring))
  (when (marker-is-point-p (car global-mark-ring))
    (call-interactively 'pop-global-mark))
  (call-interactively 'pop-global-mark)
  (setq global-mark-ring (nreverse global-mark-ring)))
#+end_src

**** marker-visit.el
#+name: ebb32bb1
#+begin_src elisp
;; https://github.com/deestan/emacs/blob/master/emacs-goodies-el/marker-visit.el
;;
;;; marker-visit.el --- navigate through a buffer's marks in order

;; Copyright (C) 2001 Benjamin Rutt
;;
;; Maintainer: Benjamin Rutt <brutt@bloomington.in.us>
;; Version: 1.1

;; This file is not part of GNU Emacs.

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published
;; by the Free Software Foundation; either version 2, or (at your
;; option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, send e-mail to
;; this program's maintainer or write to the Free Software Foundation,
;; Inc., 59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.

;;; Commentary:

;; This file provides a simple way to navigate among marks in a
;; buffer.  C-u C-SPC is similar, but takes you haphazardly around the
;; buffer.  Setting bookmarks is a lot of extra work if you just want
;; to jump around your buffer quickly; plus, you have to come up with
;; a name for every bookmark.

;; All the marks you've left while editing a buffer serve as bread
;; crumb trails of areas in the buffer you've edited.  It is
;; convenient to navigate back and forth among these marks in order.
;; This file provides two methods to do just that, marker-visit-prev
;; and marker-visit-next.  These two functions will take you, from
;; point, to the nearest mark in either direction.  The function
;; marker-visit-truncate-mark-ring will truncate the mark ring.

;; The marks you can visit in a buffer consist of: "the mark" plus the
;; contents of the mark-ring.

;;; Usage:

;; put this file in your load-path and add the line
;;
;; (require 'marker-visit)
;;
;; to your ~/.emacs file.
;;
;; This package is most useful when some easy-to-press keys are bound
;; to the functions marker-visit-prev and marker-visit-next.  See C-h
;; i m Emacs RET m Key Bindings RET for info on emacs key bindings.

;;; History:

;; 1.0 -> 1.1 Incorporated patch from Colin Walters to make the code
;; consistent with elisp code conventions mentioned in
;; (Info-goto-node "(elisp) Coding Conventions").

;;; Code:

;;utility remove-dupes function
(defun marker-visit-remove-dupes (ls)
  (cond
   ((null ls) '())
   ((member (car ls) (cdr ls)) (marker-visit-remove-dupes (cdr ls)))
   (t (cons (car ls) (marker-visit-remove-dupes (cdr ls))))))

;;create a sorted list of marks, including the point as mark, the
;;mark, and the contents of the mark-ring.
(defun marker-visit-get-sorted-mark-set (current-point-mark)
  (marker-visit-remove-dupes
   (sort
    (append (cons current-point-mark
		  (if (mark-marker) (list (mark-marker)) nil))
	    (mapcar (lambda (id) id) mark-ring))
    (lambda (a b) (< a b)))))

(defun marker-visit-no-markers-p ()
  (and (null mark-ring)
       (or (not (mark-marker))
	   (not (marker-position (mark-marker))))))

(defun marker-visit-warn (error-message)
  (message error-message)
  (beep))

;;;###autoload
(defun marker-visit-prev ()
  "From point, visit the nearest mark earlier in the buffer."
  (interactive)
  (if (marker-visit-no-markers-p)
      (marker-visit-warn "Mark does not point anywhere")
    (let* ((current-point-mark (point-marker))
	   (sorted-marks (marker-visit-get-sorted-mark-set current-point-mark))
	   (dest-mark nil))
      (while (not (equal current-point-mark (car sorted-marks)))
	(setq dest-mark (car sorted-marks))
	(setq sorted-marks (cdr sorted-marks)))
      (if dest-mark
	  (goto-char dest-mark)
	(marker-visit-warn "No previous mark to visit")))))

;;;###autoload
(defun marker-visit-next ()
  "From point, visit the nearest mark later in the buffer."
  (interactive)
  (if (marker-visit-no-markers-p)
      (marker-visit-warn "Mark does not point anywhere")
    (let* ((current-point-mark (point-marker))
	   (sorted-marks (marker-visit-get-sorted-mark-set current-point-mark))
	   (dest-mark nil)
	   (done nil))
      (while (not done)
	(if (equal current-point-mark (car sorted-marks))
	    (progn
	      (setq dest-mark (cadr sorted-marks))
	      (setq done t))
	  (setq sorted-marks (cdr sorted-marks))))
      (if dest-mark
	  (goto-char dest-mark)
	(marker-visit-warn "No next mark to visit")))))

;;;###autoload
(defun marker-visit-truncate-mark-ring ()
  "Truncate the `mark-ring'."
  (interactive)
  (setq mark-ring nil))
#+end_src

**** hydra
#+name: 00b43976
#+begin_src elisp
(defhydra gwp::hydra-mark-ring-pop ()
  "goto last location"
  ("SPC" gwp::jump-to-previous-mark "prev mark")          ; 在org中可自动打开折叠的内容
  ("n" marker-visit-next "next mark")
  ("p" marker-visit-prev "prev mark")                     ; NOTE: org折叠的内容不会打开
  ("P" backward-global-mark "prev mark (global)")         ;
  ("N" forward-global-mark "next mark (global)")          ;
  ("o" gwp::org-show-context-at-point "org show context") ; 在org时: 跳转到被折叠的headline中很有用
  ("q" nil "quit"))
#+end_src

*** jump
使用鼠标滚轮来跳转位置
- [[https://github.com/gilbertw1/better-jumper][gilbertw1/better-jumper: A configurable jump list implementation for Emacs]]

还有以两个字符为搜索依据的, 比如avy-goto-char-2
#+name: 6ded2bf1
#+begin_src elisp
(map! :nm
      [M-mouse-4] #'better-jumper-jump-backward
      [M-mouse-5] #'better-jumper-jump-forward)

(map! :leader
      (:prefix-map ("j" . "jump")
       (:prefix-map ("a" . "avy")
        :desc "Search and jump (pinyin)"        "c" #'evil-avy-goto-char-2
        :desc "Search and jump"                 "s" #'evil-avy-goto-char-timer
        :desc "jump to line"                    "l" #'avy-goto-line
        )))
#+end_src

可以用isearch(C-s)时, 调用avy实现侯选项跳转.
#+name: 08a09ddb
#+begin_src elisp
(map! :map isearch-mode-map
      :desc "avy跳转" "C-c ;" #'avy-isearch
      )
#+end_src

也可以在evil用"/"搜索后再jump
#+name: 0ed10c98
#+begin_src elisp
(defun gwp/evil-ex-search-avy-jump ()
  (interactive)
  (when evil-ex-search-pattern
    (let ((regex (car evil-ex-search-pattern)))
      (avy-jump regex)
      (evil-ex-search-stop-session))))

;; (map! :map evil-ex-search-keymap
;;       :desc "avy jump" "C-c ;" #'gwp/evil-ex-search-avy-jump)
;;
#+end_src

*** ivy
swiper搜索中, 如果一行内有多个结果, 得按好几次C-n才能到下一条. 这里用avy来跳转就方便了.

- 可用 ivy-restrict-to-matches进行二次过滤, 默认按键为S-SPC.
- ivy-avy用于快速跳转, 默认按键为C-', 得换个好按一些的.

#+name: dde3ee55
#+begin_src elisp
(map! :map ivy-minibuffer-map
      ;; 修改后的命令会报错, 原按键可以. 原因不明.
      ;; "C-c ;" #'ivy-avy
      :desc "二次过滤" "C-c r" (general-simulate-key "S-SPC")
      :desc "avy跳转" "C-c ;" (general-simulate-key "C-'")
      :desc "上一页" "C-c C-p" #'ivy-scroll-down-command
      :desc "下一页" "C-c C-n" #'ivy-scroll-up-command
      )
#+end_src


*** insert date
#+name: ab440ea2
#+begin_src emacs-lisp
(defun gwp/insert-date (arg)
  "Insert date at point. With prefix argument, insert date and time."
  (interactive "P")
  (insert (format-time-string "%Y-%m-%d"))
  (when arg
    (insert (format-time-string " %H:%M"))))

;; make it easier to update time-stamp
(map! :i "C-c i" #'gwp/insert-date)
#+end_src

*** white space
#+name: f75f80bd
#+begin_src emacs-lisp
(setq show-trailing-whitespace t)
;; 保留时会自动清理, 以下已不必要
;; (global-set-key (kbd "<f5> SPC") 'delete-trailing-whitespace)
;; (global-set-key (kbd "C-x C-o") 'delete-blank-lines)
#+end_src

*** join next line
doom的引入的"改进"导致很诡异的行为, 应禁用掉.

[[https://github.com/hlissner/doom-emacs/commit/40cf6139ed53b635fec37ce623c4b1093c78a11e][Make evil-join remove comment delimiters · hlissner/doom-emacs@40cf613]]

#+name: 2286a7d2
#+begin_src elisp
(after! evil
  (advice-remove #'evil-join #'+evil-join-a))
#+end_src

*** disable mouse
笔记本输入时大拇指容易误碰触控板, 禁用鼠标可避免这一问题.
**** 方案1: disable mouse event
以下代码仍有问题, evil中仍能点击鼠标. 为简易见, 在KDE中禁用touchpad的tap功能.
#+name: 7628d03d
#+begin_src elisp
;; https://endlessparentheses.com/disable-mouse-only-inside-emacs.html
(define-minor-mode disable-mouse-mode
  "A minor-mode that disables all mouse keybinds."
  :global t
  :lighter " 🐭"
  :keymap (make-sparse-keymap)

  (dolist (type '(mouse
                  down-mouse
                  drag-mouse
                  double-mouse
                  triple-mouse))
    (dolist (prefix '("" C- M- S- M-S- C-M- C-S- C-M-S-))
      ;; Yes, I actually HAD to go up to 7 here.
      (dotimes (n 3)
        (let ((k (format "%s%s-%s" prefix type n)))
          (define-key disable-mouse-mode-map
            (vector (intern k)) #'ignore))))))

(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "禁用鼠标" "m" #'disable-mouse-mode
       ))

(defun turn-off-disable-mouse-mode ()
  (disable-mouse-mode -1))

(defun turn-on-disable-mouse-mode ()
  (disable-mouse-mode 1))

;; 在insert状态下禁用鼠标, 避免误碰触控板
(add-hook! 'evil-insert-state-entry-hook #'turn-on-disable-mouse-mode)
(add-hook! 'evil-insert-state-exit-hook #'turn-off-disable-mouse-mode)
#+end_src

**** 方案2: disable-mouse package
:PROPERTIES:
:header-args: :tangle no
:END:
以下代码可彻底禁用鼠标事件, 但evil得重启后才能重新启用, 无法动态切换. 这个问题比
较复杂, 不好解决. [[https://github.com/purcell/disable-mouse/issues/7][requiring restart #7]]
#+name: a791c065
#+begin_src elisp
(defun gwp/disable-mouse ()
  (interactive)
  (require 'disable-mouse)
  (global-disable-mouse-mode)
  (mapc #'disable-mouse-in-keymap
        (list evil-motion-state-map
              evil-normal-state-map
              evil-visual-state-map
              evil-insert-state-map))
  )
#+end_src

**** 方案3: xinput
:PROPERTIES:
:header-args: :tangle no
:END:
[[https://www.reddit.com/r/emacs/comments/38o0tr/i_have_to_share_this_switch_your_touchpad_off/][I have to share this: Switch your touchpad off when emacs gets focus and on again when she loses focus. : emacs]]

需要xinput命令
: pac -S xorg-xinput
: xinput list
: xinput enable "SYNA2393:00 06CB:CD48 Touchpad"
: xinput disable "SYNA2393:00 06CB:CD48 Touchpad"

#+begin_src elisp
(defun gwp/turn-off-touchpad (&optional frame)
  (interactive)
  (let ((inhibit-message t) (default-directory "~"))
    (shell-command "xinput disable \"SYNA2393:00 06CB:CD48 Touchpad\""))
  (message "touchpad disabled.")
  )

(defun gwp/turn-on-touchpad (&optional frame)
  (interactive)
  (let ((inhibit-message t) (default-directory "~"))
    (shell-command "xinput enable \"SYNA2393:00 06CB:CD48 Touchpad\""))
  (message "touchpad enabled.")
  )

(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "禁用鼠标" "m" #'gwp/turn-off-touchpad
       :desc "禁用鼠标" "M" #'gwp/turn-on-touchpad
       ))
#+end_src
*** mark/selection
**** advanced selection
- [[https://stackoverflow.com/questions/18102004/emacs-evil-mode-how-to-create-a-new-text-object-to-select-words-with-any-non-sp][create a new text object in Evil]]

#+name: be09bc09
#+begin_src emacs-lisp
;; expand selection
;; http://xahlee.org/emacs/modernization_mark-word.html
;; by Nikolaj Schumacher, 2008-10-20. Released under GPL.
(defun semnav-up (arg)
  (interactive "p")
  (when (nth 3 (syntax-ppss))
    (if (> arg 0)
        (progn
          (skip-syntax-forward "^\"")
          (goto-char (1+ (point)))
          (decf arg))
      (skip-syntax-backward "^\"")
      (goto-char (1- (point)))
      (incf arg)))
  (up-list arg))

(defun gwp/select-text-in-quote ()
  "Select text between the nearest left and right delimiters.
Delimiters are paired characters: ()[]<>«»“”‘’「」, including \"\"."
  (interactive)
  (let (b1)
    (skip-chars-backward "^<>(“{[「«\"‘")
    (setq b1 (point))
    (skip-chars-forward "^<>)”}]」»\"’")
    (point)
    (set-mark (- b1 1))))

(defun gwp/select-none-blank-text ()
  "选择光标下非空格文字"
  (interactive)
  (let (b1)
    (skip-chars-backward "^ \n")
    (setq b1 (point))
    (skip-chars-forward "^ \n")
    (backward-char 1)
    (point)
    (set-mark b1)))

(defun gwp/select-word-dwim ()
  "选择连续的英文字词(不包括汉字)"
  (interactive)
  (let ((regexp "[\.-_A-Za-z0-9]") b1)
    (when (or (looking-at regexp)
              (er/looking-back-on-line regexp))
      (skip-chars-backward regexp)
      (setq b1 (point))
      (skip-chars-forward regexp)
      (backward-char)
      (point)
      (set-mark b1))))

;; https://github.com/magnars/expand-region.el
;; (require 'expand-region)
;; (global-set-key (kbd "M-4") 'er/expand-region)
#+end_src

#+begin_src elisp
;; https://stackoverflow.com/a/22418983
(defmacro define-and-bind-text-object (key start-regex end-regex)
  (let ((inner-name (make-symbol "inner-name"))
        (outer-name (make-symbol "outer-name")))
    `(progn
       (evil-define-text-object ,inner-name (count &optional beg end type)
         (evil-select-paren ,start-regex ,end-regex beg end type count nil))
       (evil-define-text-object ,outer-name (count &optional beg end type)
         (evil-select-paren ,start-regex ,end-regex beg end type count t))
       (define-key evil-inner-text-objects-map ,key (quote ,inner-name))
       (define-key evil-outer-text-objects-map ,key (quote ,outer-name)))))

; between pipe characters:
(define-and-bind-text-object "|" "|" "|")
(define-and-bind-text-object "d" "\"" "\"")
#+end_src

**** transient key
#+name: 8fac8bf1
#+begin_src elisp
;; (use-package expand-region :after evil :config
;;   (map! :leader :v "v"
;;         (function er/expand-region)))

(require 'transient)
(transient-define-prefix gwp/advanced-selection ()
  "Advanced selection"
  [["常规选择"
    ("p" "select paragraph" er/mark-paragraph)
    ("c" "select comment" er/mark-comment)
    ("b" "select none blank" gwp/select-none-blank-text)
    ("t" "select text in quote" gwp/select-text-in-quote)
    ("w" "select word" gwp/select-word-dwim)
    ]]
  [["特殊选择"
    ("u" "mark url" er/mark-url)
    ("c" "mark org code block" er/mark-org-code-block)
    ("e" "mark email" er/mark-email)
    ]]
  )
#+end_src

*** multiedit
: SPC-v-m-m
进行多点编辑模式, 选中当前symbol或选中的词. 按n/N选择下一个或前一个. 不需
要的可用Enter取消掉. C-n/C-p跳到后一个match或前一个.
: SPC-v-m-i
进入多点编辑模式, 插入一个光标. 或M-i后再插入另一个.

#+name: 4593181c
#+begin_src elisp
(use-package evil-multiedit
  :after evil
  :config
  (setq evil-multiedit-follow-matches t))

(defhydra gwp::hydra-multiedit ()
  "resize-window"
  ("i" evil-multiedit-toggle-marker-here "insert cursor here")
  ("m" evil-multiedit-match-and-next "match symbol at point")
  ("r" evil-multiedit-restore "restore prev matches")
  ("q" nil "quit"))

(map!
 (:after evil-multiedit
  (:map evil-multiedit-state-map
   "n"  #'evil-multiedit-match-and-next
   "N"  #'evil-multiedit-match-and-prev
   "M-i"  #'evil-multiedit-toggle-marker-here
   "C-p"  #'evil-multiedit-prev
   "C-n"  #'evil-multiedit-next
   "RET"    #'evil-multiedit-toggle-or-restrict-region
   [return] #'evil-multiedit-toggle-or-restrict-region)))
#+end_src

*** bibtex
用于搜索zotero导出的bibtex文献. bibtex中keywords对应zotero中的tags
#+begin_src elisp
(setq bibtex-completion-bibliography
      '("~/Data/zotero/my.bib"))
(setq bibtex-completion-pdf-field "file")
(setq bibtex-completion-additional-search-fields '(keywords annotation note))
#+end_src

*** parens
#+name: 9786fedc
#+begin_src elisp
(defhydra gwp/hydra-smartparens (:hint nil)
  ("v" evil-visual-char)
  ("u" evil-undo)
  ("h" evil-backward-char)
  ("l" evil-forward-char)
  ("j" evil-next-line)
  ("k" evil-previous-line)
  ("(" sp-wrap-round "wrap in (round)")
  ("[" sp-wrap-square)
  ("{" sp-wrap-curly)
  ("'"  (lambda (&optional arg) (interactive "P") (sp-wrap-with-pair "'")))
  ("\""  (lambda (&optional arg) (interactive "P") (sp-wrap-with-pair "\"")))
  ("d" sp-unwrap-sexp "unwrap pair")
  ("q" nil "quit")
  )
#+end_src

*** last changes
快速跳转到修改的位置, 非常方便.
#+name: 1c79ba79
#+begin_src elisp
(defhydra gwp::hydra-last-change ()
  ("N" goto-last-change "last change")  ; 用 p 按键容易误操作, 用N 安全些
  ("n" goto-last-change-reverse "previous change")
  ("c" recenter "recenter")
  ("o" gwp::org-show-context-at-point "org show context")
  ("q" nil "quit"))
#+end_src
*** packages
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/modules/gwp/edit/packages.el
:END:
#+name: 1dfc22ab
#+begin_src elisp
(package! symbol-overlay)
(package! move-dup)
(package! simpleclip)
#+end_src

** org
*** config.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/modules/gwp/org/config.el
:END:
#+name: abd5e254
#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Notes/")
(setq org-roam-directory "~/Notes/roam")
(setq org-roam-file-extensions '("note" "org"))

(use-package! org
  :init
  ;; treat .note files as org-mode
  (add-to-list 'auto-mode-alist '("\\.note\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("NOTE" . org-mode))
  :config
  (load! "org"))

;; https://github.com/org-roam/org-roam-ui#doom
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  :hook (org-roam . org-roam-ui-mode)
  :config)

(use-package! evil-org-agenda
  :hook (org-agenda-mode . evil-org-agenda-mode)
  :config
  (evil-org-agenda-set-keys)
  (evil-define-key* 'motion evil-org-agenda-mode-map
    (kbd doom-leader-key) nil))

(use-package! init-note)
#+end_src

*** org.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/modules/gwp/org/org.el
:END:
**** docs
这里放org配置相关的内容, 在config.el中以load!宏来加载.

关于Tab键
- 默认是expand outline. 如果连续按会展开更深层的. 此时可移动下光标, 再回去按TAB就会缩回outline状态.

配置参考:
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
- [[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-org.el][.emacs.d/setup-org.el at master · kaushalmodi/.emacs.d]]

**** 基本设置
#+name: b28b06dc
#+begin_src elisp
(setq org-blank-before-new-entry nil)
(setq org-default-notes-file (concat org-directory "/life.note"))

;; 保留以前的 Alt-Return 键行为, Alt-Return
(org-defkey org-mode-map [(meta return)] 'org-meta-return)

;; 禁用字词检查, 需要了再开
(remove-hook! 'org-mode-hook #'flyspell-mode)
(flyspell-mode 0)

;; https://orgmode.org/manual/Clean-view.html
(setq org-startup-indented t)      ;Enable `org-indent-mode' on Org startup
(with-eval-after-load 'org-indent
  (setq org-indent-indentation-per-level 1)) ;; default = 2

;; 对齐headline中的TAGs
(setq org-tags-column -80)

;; 避免误编辑
(setq org-catch-invisible-edits 'show-and-error)
#+end_src

**** 按键行为
#+name: d3c71916
#+begin_src elisp
;; 经常按错这个键, 禁用之 (Ctrl-c ;)
(put 'org-toggle-comment 'disabled t)
#+end_src

**** view
#+name: 7341aa84
#+begin_src elisp
;; 方便用 property 来控制 image 显示大小
(setq org-image-actual-width nil)

;; 2021-10-13: 现不用doom中的org module了
;; 可以设置 :VISIBILITY: 属性来控制subtree的可视度. doom里修改了startup设置, 起
;; 反作用, 去掉:
;; (remove-hook! 'org-mode-hook #'+org-unfold-to-2nd-level-or-point-h)

;; 2021-10-13: FIXME: 改了也不行
;; org默认设置有些问题: 光标在properties时不能展开
;; See http://emacs.stackexchange.com/a/22540/304
;; (remove-hook 'org-cycle-hook #'org-cycle-hide-drawers)

;; 避免切换时闪烁
;; (setq org-startup-indented nil)
;; (remove-hook! 'org-mode-hook #'org-indent-mode)

;; 避免显示subtree之间多余的空行
(setq org-cycle-separator-lines 0)

;; toggle outline时隐藏properties drawer. 不太管用
;;
;; (setq org-startup-folded nil)
;; (setq org-hide-block-startup t)
;; (after! org
;;   (add-hook 'org-cycle-hook 'org-cycle-hide-drawers)
;;   )

(use-package org-superstar
  :init
  ;; ◉ ○ ◆ » ◇ ▶ ▷
  (setq org-superstar-headline-bullets-list '("☰" "▶" "▷" "»"))
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

;; 显示光标所在处的headline
(defun gwp::org-show-context-at-point ()
  (interactive)
  ;; 从下面的命令看来的
  ;; (call-interactively 'org-mark-ring-goto)
  ;; (org-show-context 'mark-goto)
  (org-show-subtree)
  (when (or (org-invisible-p) (org-invisible-p2)) (org-show-context 'mark-goto))
  (call-interactively 'org-reveal))

(map! :map org-mode-map
      :n "zo" #'gwp::org-show-context-at-point
      :n "zc" #'org-hide-entry)
#+end_src

**** dwim
***** enter-at-point
+org/dwim-at-point, 在org-src环境, 直接编辑代码, 而非执行

#+name: fbbec921
#+begin_src elisp
;; 取自doom org moudle
(defun gwp::org-dwim-at-point (&optional arg)
  "Do-what-I-mean at point.

If on a:
- checkbox list item or todo heading: toggle it.
- clock: update its time.
- footnote reference: jump to the footnote's definition
- footnote definition: jump to the first reference of this footnote
- table-row or a TBLFM: recalculate the table's formulas
- table-cell: clear it and go into insert mode. If this is a formula cell,
  recaluclate it instead.
- babel-call: edit org-src
- statistics-cookie: update it.
- latex fragment: toggle it.
- link: follow it
- otherwise, refresh all inline images in current tree."
  (interactive "P")
  (if (button-at (point))
      (call-interactively #'push-button)
    (let* ((context (org-element-context))
           (type (org-element-type context)))
      ;; skip over unimportant contexts
      (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
        (setq context (org-element-property :parent context)
              type (org-element-type context)))
      (pcase type
        (`clock (org-clock-update-time-maybe))

        (`footnote-reference
         (org-footnote-goto-definition (org-element-property :label context)))

        (`footnote-definition
         (org-footnote-goto-previous-reference (org-element-property :label context)))

        ((or `planning `timestamp)
         (org-follow-timestamp-link))

        (`babel-call
         (org-babel-lob-execute-maybe))

        (`statistics-cookie
         (save-excursion (org-update-statistics-cookies arg)))

        ;; Hacked by ybyygu at 2021-04-13
        ((or `src-block `inline-src-block)
         (org-edit-special arg))

        ((or `latex-fragment `latex-environment)
         (org-latex-preview arg))

        (`link
         (let* ((lineage (org-element-lineage context '(link) t))
                (path (org-element-property :path lineage)))
           (if (or (equal (org-element-property :type lineage) "img")
                   (and path (image-type-from-file-name path)))
               (org-toggle-inline-images)
             ;; 强制在本窗口打开
             (let ((current-prefix-arg '(4)))     ; C-u
               (call-interactively #'gwp::org-open-at-point-dwim)))))

        ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
         (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
           (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

        (_
         (if (or (org-in-regexp org-ts-regexp-both nil t)
                 (org-in-regexp org-tsr-regexp-both nil  t)
                 (org-in-regexp org-link-any-re nil t))
             (call-interactively #'org-open-at-point)
           ;; (+org--toggle-inline-images-in-subtree
           ;;  (org-element-property :begin context)
           ;;  (org-element-property :end context))
           ))))))

(map! :map org-mode-map
      :n [return]   #'gwp::org-dwim-at-point
      :n "RET"      #'gwp::org-dwim-at-point
      )
#+end_src


***** open-at-point
默认在另一窗口打开链接, 如果使用C-u参数, 则强制在本窗口打开.
#+name: 2f61258f
#+begin_src elisp
;; https://stackoverflow.com/questions/17590784/how-to-let-org-mode-open-a-link-like-file-file-org-in-current-window-inste
;; Depending on universal argument try opening link
(defun gwp::org-open-at-point-dwim (&optional arg)
  (interactive "P")
  (if arg (let ((org-link-frame-setup (quote ((file . find-file)))))
            (org-open-at-point))
    (let ((org-link-frame-setup (quote ((file . find-file-other-window)))))
      (org-open-at-point)
      (golden-ratio))))

;; 注释代码时, 在org code block下特殊处理. 不然光标会跳开很远.
(defun gwp/comment-or-uncomment-dwim ()
  (interactive)
  (save-excursion
    (if (org-in-src-block-p)
        (progn
          (org-edit-src-code)
          (call-interactively 'evilnc-comment-or-uncomment-lines)
          (org-edit-src-exit))
      (call-interactively 'evilnc-comment-or-uncomment-lines))))

;; 覆盖默认按键
(map! :map org-mode-map "C-c C-o" #'gwp::org-open-at-point-dwim)
(map! :map org-mode-map
      :localleader
      "o" #'gwp::org-open-at-point-dwim)
#+end_src
**** move/movment
#+name: bbdcd834
#+begin_src elisp
(map! :map org-mode-map
      :n "gh" #'org-up-element
      :n "gl" #'org-down-element ; doom中默认为: evil-lion-left
      :n "gk" #'org-backward-heading-same-level
      :n "gj" #'org-forward-heading-same-level
      :n "M-l" #'org-metaright   ; doom中默认为 demote-subtree
      :n "M-h" #'org-metaleft    ; doom中默认为 promote-subtree
      :n "M-k" #'org-metaup
      :n "M-j" #'org-metadown
      :n "M-p" #'org-backward-element
      :n "M-n" #'org-forward-element
      )
#+end_src

**** screenshot
- org-contrib: [[file:doom-emacs/.local/straight/repos/org-mode/contrib/lisp/org-screenshot.el][org-screenshot.el]]

目前最佳方案: 使用org-download来实现屏幕截图的功能
- 在firefox或screenshot等截图后复制到X11剪贴板.
- 调用org-download-clipboard完成图片插入操作.
  - 图片自动保存到org attachment目录
  - 自动添加图片显示参数, 设定在org中显示的大小
- 可以使用org-download-delete来删除当前image

目前的问题 ([2020-03-06 Fri])
- 第二次执行截图时, 如果clipboard无图, emacs会挂住, 现在无解.

#+begin_src emacs-lisp
(defun gwp/org-image-attributes-default (&optional caption)
  "default image attributes: caption, name label, width ..."
  "Annotate LINK with the time of download."
  (format (concat
           (concat  "#+caption: " (read-string "Caption: " caption) "\n")
           ;; set unique figure name
           (format "#+name: fig:%s\n" (substring (org-id-new) 0 8))
           ;; unit in px; for displaying in org-mode
           "#+attr_org: :width 800\n"
           ;; unit in cm; for exporting as odt
           "#+attr_odt: :width 10\n"
           )))

(defun gwp/org-insert-image-attributes (&optional caption)
  "insert image attributes such as caption and labels"
  (interactive)
  (insert (gwp/org-image-attributes-default caption)))

(defun gwp/org-download-annotate (link)
  "Annotate LINK with the time of download."
  (gwp/org-image-attributes-default))

(use-package! org-download
  :commands
  org-download-delete
  org-download-yank
  org-download-clipboard
  :bind (:map org-mode-map
         ("C-c v" . org-download-clipboard))
  :config
  (progn
    (setq org-download-method 'attach
          org-download-annotate-function 'gwp/org-download-annotate
          ;; org-download-image-html-width 900 ; in px
          ;; org-download-image-latex-width 16 ; in cm
          ;; 2021-09-03: 直接调用org-download-clipboard即可, 以下代码不必要
          ;; org-download-screenshot-method
          ;; (cond ((executable-find "txclip")  "txclip paste --image -o %s")
          ;;       ((executable-find "scrot") "scrot -s %s"))
          )))
#+end_src

安装org-download包
#+begin_src emacs-lisp :tangle pkg/.doom.d/packages.el
(package! org-download)
#+end_src

**** latex preview
默认公式预览图片太小, 改大一些([[https://emacs.stackexchange.com/questions/19880/font-size-control-of-latex-previews-in-org-files][URL]]).
- [[https://emacs.stackexchange.com/questions/30309/latex-preview-on-hidpi-display/30318#30318][LaTeX preview on HiDPI display - Emacs Stack Exchange]]
#+begin_src elisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.5))
#+end_src

**** org-babel
***** docs
参考
- [[https://org-babel.readthedocs.io/en/latest/][Org Babel reference card]]

如何察看noweb展开后的代码:
- C-c C-v v: org-babel-expand-src-block

***** init
#+begin_src emacs-lisp
;; 不缩进org-src块中的代码.
;; 注意: 不直接设置为"org-src-preserve-indentation t",
;; 只设置org-edit-src-content-indentation为0, 这样仅影响编辑的org, 不影响tangle
;; 出的代码. 以前的org文档可以逐步调回来
(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0) ;Default = 2

;; helper functions for literate programming
;; taking from: https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.org
(defun help/set-org-babel-default-header-args (property value)
  "Easily set system header arguments in org mode.

PROPERTY is the system-wide value that you would like to modify.

VALUE is the new value you wish to store.

Attribution: URL `http://orgmode.org/manual/System_002dwide-header-arguments.html#System_002dwide-header-arguments'"
  (setq org-babel-default-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args))))

;; 几个重要的header args:
(help/set-org-babel-default-header-args :padline "yes")
(help/set-org-babel-default-header-args :mkdirp "yes")
(help/set-org-babel-default-header-args :comments "link")
#+end_src
***** load
方便在 org 中直接执行某些脚本操作.
#+name: 0d8e352a
#+begin_src elisp
;; activate languages for evaluation
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (python . t)
   (shell . t)
   (emacs-lisp . t) ;; this is the default
   ))
#+end_src

***** enter
#+begin_src emacs-lisp
;; 禁用代码着色, 影响速度
;; (setq org-src-fontify-natively nil)

;; 编辑代码时在下方新开窗口
;;(setq org-src-window-setup 'split-window-below)
(setq org-src-window-setup 'current-window)
;(setq org-src-window-setup 'reorganize-frame)
;;(setq org-src-window-setup 'other-frame)

;; 进入代码编辑模式, 改成容易按的
(map! :map org-mode-map
      :ni "C-c ;" #'org-edit-special
      :ni "C-c C-;" #'org-edit-special
      :localleader ";" #'org-edit-special
      )
#+end_src

***** toml
方便写Cargo.toml, 指定为toml为conf-toml-mode, 而不用写全 "conf-toml".
#+begin_src elisp
;; Add convenience lang alias for markdown blocks
(add-to-list 'org-src-lang-modes '("toml" . conf-toml))
#+end_src

***** edit
- org-babel-demarcate-block: 可以用来将选中代码分割为不同的代码块.
- org-babel-do-key-sequence-in-edit-buffer: 在当前代码下直接执行src code语境下的命令

#+name: 84623fc4
#+begin_src emacs-lisp
;; 用于激活 localleader
(add-hook 'org-src-mode-hook #'evil-normalize-keymaps)

;; 默认的不太好按. 不能用C-c C-c, 容易与别的模块冲突.
(map! :map org-src-mode-map
      "C-c ;"   #'org-edit-src-exit  ; 保存退出
      "C-c C-;" #'org-edit-src-exit  ; 保存退出
      "C-c C-k" #'org-edit-src-abort ; 放弃修改
      )
(map! :map org-src-mode-map
      :localleader
      ";" #'org-edit-src-exit
      "k" #'org-edit-src-abort
      )
(gwp-leader-def
  :keymaps 'org-src-mode-map
  "q" #'org-edit-src-exit
  )
#+end_src

***** jump to org blocks/links
#+name: 8aa4aca8
#+begin_src elisp
(defhydra gwp/org-jump-block ()
  "jump to org blocks"
  ("n" org-next-block "next block")
  ("p" org-previous-block "prev block")
  ("q" nil "quit")
  )

(defhydra gwp/org-jump-link ()
  "jump to org links"
  ("n" org-next-link "next link")
  ("p" org-previous-link "prev link")
  ("q" nil "quit")
  )
#+end_src

***** jump to file
从org文件跳转到tangled file
- 这个包可用于与compile等跳转配合使用 [[https://github.com/EricCrosson/help-find-org-mode][help-find-org-mode]]

#+name: fa928b1c
#+begin_src elisp
(defun gwp/org-babel-tangle-jump-to-file ()
  "Jump to tangle file for the source block at point."
  (interactive)
  (let ((mid (point))
        (element (org-element-at-point))
        (body-start (save-excursion
                      (progn
                        (org-babel-goto-src-block-head)
                        (next-line)
                        (point)
                        )))
        (tangle-file (cdr (assq :tangle (nth 2 (org-babel-get-src-block-info 'light)))))
        offset)
    (if tangle-file
        (let ((block-name (org-element-property :name element))
              (tangle-file (expand-file-name tangle-file)))
          (if (file-readable-p tangle-file)
              (progn
                ;; open tangled file
                (find-file tangle-file)
                ;; if code block has a name, we jump to that block
                (when block-name
                  (beginning-of-buffer)   ; if point restored, the searching could fail
                  (when (search-forward (format "::%s" block-name) nil t)
                    (next-line)
                    (beginning-of-line)
                    (setq offset (- mid body-start))
                    (forward-char offset)
                    (recenter)
                    )))
            (error "Cannot open tangle file %S" tangle-file)))
      (message "not in source block"))))
#+end_src

以下为网上淘来的代码, 可弃.
#+begin_src elisp :tangle no
;; https://emacs.stackexchange.com/questions/50649/jumping-from-a-source-block-to-the-tangled-file
(defun gwp/org-babel-tangle-jump-to-file ()
  "Jump to tangle file for the source block at point."
  (interactive)
  (let (file org-babel-pre-tangle-hook org-babel-post-tangle-hook)
    (cl-letf (((symbol-function 'write-region) (lambda (start end filename &rest _ignore)
                                                 (setq file filename)))
              ((symbol-function 'delete-file) #'ignore))
      (org-babel-tangle '(4)))
    (when file
      (setq file (expand-file-name file))
      (if (file-readable-p file)
          (find-file file)
        (error "Cannot open tangle file %S" file)))))
#+end_src

跳回来可用(需要配合src block name一起使用):
: org-babel-tangle-jump-to-org

将tangle file中的修改返回给org
: org-babel-detangle

还有一个https://github.com/mtekman/org-tanglesync.el. 但使用上有限制 [[https://github.com/mtekman/org-tanglesync.el/issues/13][issue 13]].
***** jump to org
原版的似有bug, 不能精确复原光标位置.
#+name: 9b40c7cf
#+begin_src elisp
(defun gwp/org-babel-tangle-jump-to-org ()
  "Jump from a tangled code file to the related Org mode file."

  (require 'ol)
  (interactive)
  (let ((mid (point))
	start body-start end target-buffer target-char link block-name body)
    (save-window-excursion
      (save-excursion
    (while (and (re-search-backward org-link-bracket-re nil t)
            (not ; ever wider searches until matching block comments
             (and (setq start (line-beginning-position))
              (setq body-start (line-beginning-position 2))
              (setq link (match-string 0))
              (setq block-name (match-string 2))
              (save-excursion
                (save-match-data
                  (re-search-forward
                   (concat " " (regexp-quote block-name)
                       " ends here")
                   nil t)
                  (setq end (line-beginning-position))))))))
	(unless (and start (< start mid) (< mid end))
	  (error "Not in tangled code"))
        (setq body (buffer-substring body-start end)))
      ;; Go to the beginning of the relative block in Org file.
      (org-link-open-from-string link)
      (message "%s" link)
      (setq target-buffer (current-buffer))
      ;; (search-forward body)
      (if (string-match "[^ \t\n\r]:\\([[:digit:]]+\\)" block-name)
          (let ((n (string-to-number (match-string 1 block-name))))
            (if (org-before-first-heading-p) (goto-char (point-min))
              (org-back-to-heading t))
            ;; Do not skip the first block if it begins at point min.
            (cond ((or (org-at-heading-p)
                       (not (eq (org-element-type (org-element-at-point))
                		'src-block)))
                   (org-babel-next-src-block n))
                  ((= n 1))
                  (t (org-babel-next-src-block (1- n)))))
        (org-babel-goto-named-src-block block-name))
      (goto-char (org-babel-where-is-src-block-head))
      (forward-line 1)
      ;; Try to preserve location of point within the source code in
      ;; tangled code file.
      (let ((offset (- mid body-start)))
        (when (< end (+ offset (point))) ; ybyygu hacked here
          (forward-char offset)))
      (setq target-char (point)))
    (org-src-switch-to-buffer target-buffer t)
    (goto-char target-char)))
#+end_src

***** noweb
org-babel-expand-src-block (可以展开noweb macro)

***** tangle
注意: tangle-subtree时得注意, 可能会以部分内容覆盖总文件.
#+name: f1b57cf1
#+begin_src elisp
;; tangle blocks for current file at point
;; http://stackoverflow.com/questions/28727190/org-babel-tangle-only-one-code-block
;; call org-babel-tangle with C-u C-u
(defun gwp/org-babel-tangle-blocks()
  (interactive)
  ;; tangle blocks only for target file at point
  (let ((current-prefix-arg '(16)))     ; C-u C-u
    (call-interactively 'org-babel-tangle)))

;; narrow to subtree before calling org-babel-tangle
(defun gwp/org-tangle-subtree()
  "Tange src blocks in current subtree"
  (interactive)
  (org-narrow-to-subtree)
  (org-babel-tangle)
  (widen)
  )
#+end_src

如何在代码编辑窗口中tangle?
#+name: 566a6ed9
#+begin_src elisp
(defun gwp/org-edit-save-and-tangle ()
  "When in a sub-editing buffer, swith to the parent buffer and tangle the file blocks"
  (interactive)
  (save-excursion
    (org-edit-src-exit)
    ;; insert an unique code block name
    (gwp/org-src-insert-name)
    (call-interactively 'gwp/org-babel-tangle-blocks)
    (org-edit-src-code)))

(defun gwp/org-babel-tangle-dwim()
  "Tangle current file at point whenever in a sub-editing buffer or not"
  (interactive)
  ;; 标记当前位置
  (gwp::mark-current-position)
  (if (org-src-edit-buffer-p)
      (gwp/org-edit-save-and-tangle)
    (if (eq 'src-block (org-element-type (org-element-at-point)))
        (progn
          ;; insert an unique code block name
          (gwp/org-src-insert-name)
          (call-interactively 'gwp/org-babel-tangle-blocks))
      (message "not in source block"))))
#+end_src

禁用当前代码块或整个headline. 如果再次使用即取消插入的header args. 还可以用
org-delete-property 删除 header-args
#+name: 661f0512
#+begin_src elisp
(defun gwp/org-babel-tangle-no()
  "Turn on or turn off tangling current code block"
  (interactive)
  (if (eq 'src-block (org-element-type (org-element-at-point)))
      (save-excursion
        (org-babel-goto-src-block-head)
        (if (re-search-forward ":tangle no" (line-end-position) t)
            (delete-region (match-beginning 0) (match-end 0))
          (org-babel-insert-header-arg "tangle" "no")))
    (org-set-property "header-args" ":tangle no")))
#+end_src

插入一个唯一的block name, 方便跳转
#+name: 1a4b128e
#+begin_src elisp
(defun gwp/org-src-insert-name ()
  "If it doesn't have a NAME property then assign it an unique name."
  (interactive)
  (let ((element (org-element-at-point)))
    (if (eq 'src-block (org-element-type element))
        (if (not (org-element-property :name element))
            (save-excursion
              (goto-char (org-babel-where-is-src-block-head))
              (let ((i (current-indentation)))
                (save-excursion (insert "#+name: " (substring (org-id-new) 0 8) "\n"))
                (indent-to i)))
          (message "source block alread named"))
      (message "not in source block"))))
#+end_src

***** template
- http://orgmode.org/manual/Languages.html

#+name: e9fca5dc
#+begin_src emacs-lisp
(with-eval-after-load 'ob
  (setq org-structure-template-alist
        '(
          ("py" . "src python :results output")
          ("rs" . "src rust")
          ("el" . "src emacs-lisp")
          ("sh" . "src sh")
          ))

  (defun gwp/org-babel-edit-structure-in-place (arg)
    "Insert source strcture and edit the source"
    (interactive "P")
    (call-interactively 'org-insert-structure-template)
    (call-interactively 'org-edit-src-code)
    ))
#+end_src

***** auto time-stamp
格式设置为类org-mode, 方便插入和修改. 参考: [[http://nullman.net/emacs/files/init-emacs.org][URL]]

#+begin_src emacs-lisp
(with-eval-after-load "ob-tangle"
  ;; update timestamps on tangled files
  (setq time-stamp-pattern "100/UPDATED:[ \t]+\\\\?[\"<]+%:y-%02m-%02d %3a %02H:%02M\\\\?[\">]")
  (defun org-babel-post-tangle-hook--time-stamp ()
    "Update timestamps on tangled files."
    (time-stamp)
    (save-buffer))
  (add-hook 'org-babel-post-tangle-hook 'org-babel-post-tangle-hook--time-stamp))
#+end_src

**** org-noter/pdf-view
pdf-view-fit-width-to-window
#+name: 37fef008
#+begin_src elisp
(use-package! org-noter
  :custom
  (org-noter-default-notes-file-names '("annotation.note")))

(use-package! pdf-tools
  :custom
  ;; 一页页看更方便
  (pdf-view-continuous nil)
  :config
  ;; 容易被doom的pdf module中的设置覆盖, 以下直接在pdf/config.el中修改
  ;; (setq-default pdf-view-display-size 'fit-width)

  (map! :map pdf-view-mode-map
        ;; 鼠标操作
        [C-mouse-5] (cmd! (pdf-view-shrink 1.10))
        [C-mouse-5] (cmd! (pdf-view-shrink 1.10))
        [mouse-9] (cmd! (pdf-view-previous-page-command))
        [mouse-8] (cmd! (pdf-view-next-page-command))
        ;; 方便标注, 按d直接高亮选中文本
        :v "d" #'pdf-annot-add-highlight-markup-annotation
        ;; 方便单手操作
        :n "d" #'pdf-view-scroll-up-or-next-page
        :n "a" #'pdf-view-scroll-down-or-previous-page
        ;; org-noter很好用
        :localleader
        (:prefix ("n" . "org-noter")
         "n" #'org-noter
         "i" #'org-noter-insert-note
         "I" #'org-noter-insert-precise-note
         )))
#+end_src

**** pairs
doom加了很多没用的pair, 比如 /, ~, *等. [2020-03-13 Fri] 折腾了一晚上才试好.
#+begin_src elisp :tangle pkg/.doom.d/packages.el
(package! smartparens-org :ignore t)
#+end_src

[2020-05-16 Sat] doom更新后没这些问题了
#+begin_src elisp :tangle no
(after! smartparens-org
  (sp-with-modes '(org-mode)
    (sp-local-pair "/" nil :actions :rem)
    (sp-local-pair "=" nil :actions :rem)
    (sp-local-pair "~" nil :actions :rem)
    (sp-local-pair "*" nil :actions :rem)
    (sp-local-pair "_" nil :actions :rem)))
#+end_src

**** narrow
[2021-10-02 Sat] 和org-tree-to-indirect-buffer相比, 以下代码功能类似, 但是先生成
整个indirect buffer再narrow, kill-buffer时不影响原buffer.

[[https://www.reddit.com/r/orgmode/comments/dbsngi/finally_solving_the_lack_of_a_treeview_navigation/][Finally solving the lack of a tree-view navigation window in Org : orgmode]]

#+begin_src elisp
(defun ap/org-tree-to-indirect-buffer (&optional arg)
  "Create indirect buffer and narrow it to current subtree.
The buffer is named after the subtree heading, with the filename
appended.  If a buffer by that name already exists, it is
selected instead of creating a new buffer."
  (interactive "P")
  (let* ((new-buffer-p)
         (pos (point))
         (buffer-name (let* ((heading (org-get-heading t t))
                             (level (org-outline-level))
                             (face (intern (concat "outline-" (number-to-string level))))
                             (heading-string (propertize (org-link-display-format heading)
                                                         'face face)))
                        (concat heading-string "::" (buffer-name))))
         (new-buffer (or (get-buffer buffer-name)
                         (prog1 (condition-case nil
                                    (make-indirect-buffer (current-buffer) buffer-name 'clone)
                                  (error (make-indirect-buffer (current-buffer) buffer-name)))
                           (setq new-buffer-p t)))))
    (switch-to-buffer new-buffer)
    (when new-buffer-p
      ;; I don't understand why setting the point again is necessary, but it is.
      (goto-char pos)
      (rename-buffer buffer-name)
      (org-narrow-to-subtree))))

(advice-add 'org-tree-to-indirect-buffer :override 'ap/org-tree-to-indirect-buffer)
#+end_src

narrow 到当前代码块对应的 tangle 文件所在的层级. 专注编辑, 也不用担心 tangle 出的代码不全的问题.
#+name: ab0515d6
#+begin_src elisp
;;;###autoload
(defun gwp::org-babel-narrow-to-tangle-heading ()
  "narrow至当前代码块对应的 tangle 文件所在级别"
  (interactive)
  (let ((tangle-file (cdr (assq :tangle (nth 2 (org-babel-get-src-block-info 'light)))))
        (start-position (point))
        offset)
    ;; :tangle no 不能算
    (if (and tangle-file (not (string= tangle-file "no")))
        (save-excursion
          (if (search-backward (format ":tangle %s" tangle-file) nil t)
              (progn
                (setq offset (- start-position (point)))
                (ap/org-tree-to-indirect-buffer)
                (forward-char offset)
                (message "narrowed to heading: %s" tangle-file))
            (message "no root headline found")))
      (message "narrowed to headline at point")
      (ap/org-tree-to-indirect-buffer))))
#+end_src

**** zotero/ui                                                          :ATTACH:
:PROPERTIES:
:ID:       0cbea3c4-ceef-44b4-9d07-250080801511
:END:
[[file:rust-modules/rust-modules.note][rust-module.note]]

使用space-m-z-z打开zotero搜索界面
流程:
- 搜索文献
- 选中文献, 右键或Ctrl-o, 打开ivy actions界面
- 选择打开附件, ctrl-o, 打开action界面, 选择标注

#+caption: 文献PDF注解界面
#+name: fig:3381b8ba
#+attr_org: :width 800
#+attr_odt: :width 10
[[attachment:2021-08-25_16-19-20_screenshot.png]]

#+begin_src elisp
;; rust-modules
(add-to-list 'load-path "/home/ybyygu/Workspace/Programming/emacs/rust-modules")
(require 'zotero)

(defun gwp/zotero-search-by-tag (name)
  "Search Zotero entries by tag using ivy."
  (interactive "sTag: ")

  (let* ((candidates (zotero-search-items-by-tag name)))
    (ivy-read (format "Zotero entries: ")
              candidates
              :action '(2               ; set the default action to open attachments
                        ("o" gwp--ivy-action-open-link "Open link")
                        ("O" gwp--ivy-action-open-attachments "Open attachments")
                        ("r" gwp--ivy-action-show-related-items "Show Related Items")
                        ("i" gwp--ivy-action-insert-link "Insert link")))))

(defun gwp/zotero-search-by-collection (name)
  "Search Zotero entries by collection name using ivy."
  (interactive "sCollection: ")

  (let* ((candidates (zotero-search-items-by-collection name)))
    (ivy-read (format "Zotero entries: ")
              candidates
              :action '(2               ; set the default action to open attachments
                        ("o" gwp--ivy-action-open-link "Open link")
                        ("O" gwp--ivy-action-open-attachments "Open attachments")
                        ("r" gwp--ivy-action-show-related-items "Show Related Items")
                        ("i" gwp--ivy-action-insert-link "Insert link")))))

(defun gwp--ivy-action-show-related-items (x)
  "show related items from selection"
  (let* ((candidates (zotero-get-related-items x)))
    (ivy-read (format "Related: ")
              candidates
              :action '(2               ; set the default action to open attachments
                        ("o" gwp--ivy-action-open-link "Open link")
                        ("O" gwp--ivy-action-open-attachments "Open attachments")
                        ("r" gwp--ivy-action-show-related-items "Show Related Items")
                        ("i" gwp--ivy-action-insert-link "Insert link")))))

(defun gwp--ivy-action-annotate-attachment (pdf-file)
  "Annotate the attachment with org-noter."
  (let ((annotation-file (expand-file-name (car org-noter-default-notes-file-names) (file-name-directory pdf-file))))
    (progn
      ;; create an empty annotation file if not exists
      (unless (file-exists-p annotation-file) (write-region "" nil annotation-file))
      (org-open-file pdf-file)
      (org-noter))))

(defun gwp--ivy-action-open-attachments (x)
  "ivy completion for zotero attachments."
  (let* ((candidates (zotero-get-selected-item-attachment-paths x)))
    (ivy-read (format "Open attachment: ")
              candidates
              :action '(1               ; set the default action to open link
                        ("o" org-open-file "Open")
                        ("n" gwp--ivy-action-annotate-attachment "Annotate")))))

(defun gwp--ivy-action-insert-link (x)
  (let ((uri (zotero-get-selected-item-link x)))
    (if uri
        (progn
          (message "%s!" x)
          (insert "[[" uri "][" "zotero-item" "]]"))
      (error "No link extracted from: %s" x))))

(defun gwp--ivy-action-open-link (x)
  (let ((uri (zotero-get-selected-item-link x)))
    (if uri
        (progn
          (message "%s!" x)
          (org-link-open-from-string (format "[[%s]]" uri)))
      (error "No link extracted from: %s" x))))

(defun gwp/org-open-zotero-attachments-at-point (arg)
  "Handle zotero attachments in org-mode"
  (interactive "P")
  (let ((ct (org-element-context)))
    (if (eq 'link (org-element-type ct))
        (let ((link (org-element-property :raw-link ct)))
          (when link
            (let ((key (zotero-get-item-key-from-link link)))
              (if key
                  (gwp--ivy-action-open-attachments key)
                (error "Invalid zotero link!"))))))))

(defun gwp/org-open-zotero-related-at-point (arg)
  "Open related zotero items for zotero link at point"
  (interactive "P")
  (let ((ct (org-element-context)))
    (if (eq 'link (org-element-type ct))
        (let ((link (org-element-property :raw-link ct)))
          (when link
            (let ((key (zotero-get-item-key-from-link link)))
              (if key
                  (gwp--ivy-action-show-related-items key)
                (error "Invalid zotero link!"))))))))

(defun gwp/insert-new-zotero-item (arg)
  "Create a new zotero item (report)"
  (interactive "P")

  (let ((uri (zotero-create-new-note)))
    (if uri
        (progn
          (message "%s!" uri)
          (insert "[[" uri "][" "zotero-note" "]]"))
      (error "create zotero item failed!"))))

;; https://www.reddit.com/r/emacs/comments/f3o0v8/anyone_have_good_examples_for_transient/
(require 'transient)
(transient-define-prefix gwp/zotero-search-transient ()
  "Search zotero database"
  [["Search zotero items:"
    ("t" "search by tag" gwp/zotero-search-by-tag)
    ("c" "search by collection" gwp/zotero-search-by-collection)
    ("o" "open attachments at point" gwp/org-open-zotero-attachments-at-point)
    ("r" "open related items at point" gwp/org-open-zotero-related-at-point)
    ]]
  )
;; key bindings
(map! :map org-mode-map
      :localleader
      "z" #'gwp/zotero-search-transient
      "O" #'gwp/org-open-zotero-attachments-at-point)
#+end_src

**** zotero/link
#+begin_src elisp
;; since org 9
(org-link-set-parameters "zotero" :follow #'gwp/org-zotero-open :export #'gwp/org-zotero-export)

(defun gwp/org-zotero-open (path)
  (setq url (format "zotero:%s" path))
  (browse-url url))
#+end_src

**** zotero/export
支持 "zotero" 链接的点击行为及odt导出.

bibtex更新了item link的格式.
之前的:
: zotero://select/items/1_WZKAZKJG
新的
: zotero://select/items/6974

[[zotero://select/items/1_IIAJ9MX2][@Cao2011JMCC]]

#+begin_src emacs-lisp
(with-eval-after-load 'org-compat
  (defun gwp/org-zotero-export (path desc format)
    "Create the export version of zotero link specified by PATH and
DESC. FORMATs understood are 'odt','latex and 'html."
    (cond
     ((eq format 'html)
      (format "<a href=\"zotero:%s\">%s</a>" path desc))
     ((eq format 'latex)
      (format "\\href{zotero:%s}{%s}" path desc))
     ((eq format 'odt)
      ;; (format "<text:a xlink:type=\"simple\" xlink:href=\"zotero:%s\">%s</text:a>" path desc)
      (gwp/org-zotero-export-odt path desc)
      )
     (t desc)
     )
    )
  )

;;;; The magic string of zitem:
;; ZOTERO_ITEM CSL_CITATION
;; {
;; "properties": {
;; "formattedCitation": "[1]",
;; "plainCitation": "[1]"
;; },
;; "citationItems": [
;;                   {
;;                   "uri": [
;;                           "http://zotero.org/users/15074/items/S5JM4V35"
;;                           ]
;;                   }
;;                   ],
;; "schema": "https://github.com/citation-style-language/schema/raw/master/csl-citation.json"
;; } %s-rnd

;; adopted from https://www.mail-archive.com/emacs-orgmode@gnu.org/msg48905.html
(defun gwp/org-zotero-export-odt (path desc)
  (let
      ((refmark "<text:reference-mark-start text:name=\"%s\"/>%s<text:reference-mark-end text:name=\"%s\"/>")
       (zitem "ZOTERO_ITEM CSL_CITATION {
    &quot;properties&quot;: {
        &quot;formattedCitation&quot;: &quot;%s&quot;,
        &quot;plainCitation&quot;: &quot;%s&quot;
    },
    &quot;citationItems&quot;: [
        {
            &quot;uri&quot;: [
                &quot;http://zotero.org/users/15074/items/%s&quot;
            ]
        }
    ],
    &quot;schema&quot;: &quot;https://github.com/citation-style-language/schema/raw/master/csl-citation.json&quot;
} %s ")

       (item-key (car (cdr (split-string path "_"))))
       (rnd (concat "RND" (substring (org-id-new) -10))))
    (setq zitem
          (format zitem
                  desc
                  desc
                  item-key
                  rnd)
          )
    (setq desc (format "%s" desc))
    (format refmark zitem desc zitem))
  )

#+end_src

**** odt export
odt导出时, 图表默认以大纲级别来编号. 对于中文文档, 如果章节以中文一二三编号时,
图表编号默认为一.1, 二.3. 这很古怪, 还是取消的好.

odt使用dvipng导出公式时生成的图片分辨率太低, 这里放大3倍, 然后通过设置odt dpi为
300(默认为96), 将image缩小为原始大小.

注意latex公式图片对应的目录ltxpng在ox-odt.el代码里写死了, 没法修改为其它的.

#+begin_src emacs-lisp
(use-package ox-odt
  :config
  (progn
    ;; continually numbering captions without outline level
    (setq org-odt-display-outline-level 0)

    ;; useful for odt export using dvipng
    (setq org-format-latex-options (plist-put org-format-latex-options :html-scale 3.0))
    (setq org-odt-pixels-per-inch 300.0)
    )
  )
#+end_src

由于手动换行的原因, odt导出时, 中文字符间会有多余的空格. 下面的设置用于解决这个问题:
#+begin_src emacs-lisp
;; adopted from https://github.com/tumashu/emacs-helper/blob/master/eh-org.el
(defun gwp/clear-unwanted-space (text)
  "clear unwanted space when exporting org-mode to other formats"
  (let ((regexp "[[:multibyte:]]")
        (string text))
    ;; org-mode 默认将一个换行符转换为空格，但中文不需要这个空格，删除。
    (setq string
          (replace-regexp-in-string
           (format "\\(%s\\) *\n *\\(%s\\)" regexp regexp)
           "\\1\\2" string))
    ;; 删除粗体之后的空格
    (dolist (str '("</b>" "</code>" "</del>" "</i>"))
      (setq string
            (replace-regexp-in-string
             (format "\\(%s\\)\\(%s\\)[ ]+\\(%s\\)" regexp str regexp)
             "\\1\\2\\3" string)))
    ;; 删除粗体之前的空格
    (dolist (str '("<b>" "<code>" "<del>" "<i>" "<span class=\"underline\">"))
      (setq string
            (replace-regexp-in-string
             (format "\\(%s\\)[ ]+\\(%s\\)\\(%s\\)" regexp str regexp)
             "\\1\\2\\3" string)))
    string)
  )

(defun gwp/ox-odt-wash-text (text backend info)
  "导出 org file 时，删除中文之间不必要的空格。"
  (when (org-export-derived-backend-p backend 'odt 'html 'latex)
    (gwp/clear-unwanted-space text)
    )
  )

(add-hook 'org-export-filter-headline-functions #'gwp/ox-odt-wash-text)
(add-hook 'org-export-filter-paragraph-functions #'gwp/ox-odt-wash-text)
#+end_src

**** encryption
#+begin_src emacs-lisp
(require 'org-crypt)
(require 'epa-file)
(epa-file-enable)

;; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-crypt-tag-matcher "crypt")
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
                                        ; GPG key to use for encryption
(setq org-crypt-key "38D95BC6411A87E7") ; ybyygu@gmail.com
(setq org-crypt-disable-auto-save nil)
#+end_src

**** org-attach
***** setup
#+begin_src emacs-lisp
(require 'org-attach)
#+end_src

***** copy & paste attachments
#+begin_src emacs-lisp
(setq org-attach-store-link-p 'attached)

;; 1. store the ataach files into clipboard
(defun gwp/org-attach-copy (&optional force)
  "store org attachment directory of current enetry"
  (interactive "P")
  ;; make a temporary symlink to store the attachment path
  (if-let (attach-files (counsel-org-files))
      (let ((current-dir (if buffer-file-name (file-name-directory buffer-file-name) default-directory)))
        (zotero-attach-txclip-copy-files attach-files current-dir))
    (message "No attachment found")))

;; 2. paste the stored files to new location
(defun gwp/org-attach-paste (&optional force)
  "move stored attachments to current entry"
  (interactive "P")
  (let ((current-dir (file-name-directory buffer-file-name)))
    (zotero-attach-txclip-paste-files current-dir)))
#+end_src

****** old
:PROPERTIES:
:header-args: :tangle no
:END:
添加附件时生成指向附件的路径, 方便org-insert-link添加.

使用软链接保存当前entry的附件目录. 注意make-symbolic-link的特殊性:
- 如果dest是个目录, 会在目录下建立目录
- 如果dest是个文件或symlink, 会报错

file-exists-p函数对symlink的特殊性:
- 如果测试目标是个boken symlink, 该函数返回nil
- 此外后续再symlink, 仍然会报错.

#+begin_src emacs-lisp
;; 1. store the directory
(defun gwp/org-attach-copy (&optional force)
  "store org attachment directory of current enetry"
  (interactive "P")
  ;; make a temporary symlink to store the attachment path
  (setq file-attach-tmp (concat spacemacs-cache-directory ".gwp-attach-tmp"))
  (let ((attach-dir (org-attach-dir)))
    (when attach-dir
      (progn
        ;; remove existing directory
        (when (file-directory-p file-attach-tmp) (delete-directory file-attach-tmp t))
        ;; remove existing file and symlink
        (when (file-exists-p file-attach-tmp) (delete-file file-attach-tmp))
        ;; remove broken symlink
        (when (file-symlink-p file-attach-tmp) (delete-file file-attach-tmp))
        (make-symbolic-link attach-dir file-attach-tmp)
        (message (format "stored to: %s" file-attach-tmp))
        )
      )
    )
  )
#+end_src

从存储的软链接中读取之前的entry的附件, 并移动到当前entry的附件目录里.
#+begin_src emacs-lisp
;; 2. move the stored directory to new location
(defun gwp/org-attach-paste (&optional force)
  "move stored attachments to current entry"
  (interactive "P")
  ;; ~/.emacs.d/.cache/.gwp-attach-tmp
  (setq file-attach-tmp (concat spacemacs-cache-directory ".gwp-attach-tmp"))

  (if (file-exists-p file-attach-tmp)
      ;; create attachment directory if not exists using org-attach-dir function
      (let ((attach-dir (org-attach-dir t)))
        (progn
          ;; read old attach directory from previous stored symlink
          (setq attach-dir-old (file-chase-links file-attach-tmp))
          ;; sanity check
          (if (y-or-n-p (format "%s/* ==> %s ?" attach-dir-old attach-dir))
              (progn
                (shell-command (format "mv %s/* %s" attach-dir-old attach-dir))
                ;; remove stale tmp-link
                (delete-file file-attach-tmp)
                )
            (message "cancelled")
            )
          )
        )
    (message (format "no stored symbolic link found: %s" file-attach-tmp))
    )
  )
#+end_src

***** take file link as attachment
[2020-03-21 Sat] org里有对应的功能: [[file:doom-emacs/.local/straight/repos/org-mode/contrib/lisp/org-attach-embedded-images.el][org-attach-embedded-images.el]]
****** 从当前位置文件链接提取文件名.
#+begin_src emacs-lisp
(defun gwp/org-file-link-p (&optional element)
  (let ((el (or element (org-element-context))))
    (and (eq (org-element-type el) 'link)
         (or
          (string= (org-element-property :type el) "file")
          (string= (org-element-property :type el) "attachment")
          ))))

(defun gwp/org-file-path-at-point()
  "get file path from link at point"
  (let ((el (org-element-context)))
    (when (eq (org-element-type el) 'link)
      (cond
       ((string= (org-element-property :type el) "file") (org-element-property :path el))
       ((string= (org-element-property :type el) "attachment") (org-attach-expand (org-element-property :path el)))
       (t nil)
       ))))
#+end_src

****** 使用org-attach将文件move到当到附录中并更新文件链接
#+begin_src emacs-lisp
;; (require 'org-download)

(defun gwp/org-store-link-without-desc (file)
  "store file link without the description part -- a tweak to make odt image exporting correct."
  (setq org-stored-links
        (cons (list (org-attach-expand-link (file-name-nondirectory file)) "")
              org-stored-links)))

(defun gwp/org-take-as-local-attachment ()
  "move file link at point as local attachment"
  (interactive)
  (let ((file (gwp/org-file-path-at-point)))
    (if file
        (progn
          ;; 1. store the file using copy
          ;; or we can use the mv method: (org-attach-attach file nil 'mv)
          ;; do not store file link since it will corrupt odt image exporting
          (let ((org-attach-store-link-p nil))
            (org-attach-attach file))
          ;; 2. remove the old
          (call-interactively 'org-download-delete)
          ;; 3. insert the new
          ;; use file name as the default caption
          (gwp/org-insert-image-attributes (file-name-sans-extension (file-name-nondirectory file)))
          (insert "\n")
          (gwp/org-store-link-without-desc file)
          (call-interactively 'org-insert-last-stored-link)
          ;; refresh the image if possbile
          (org-display-inline-images))
      (user-error "Point is not on a link"))))
#+end_src

***** delete link file
删除当前所在链接对应的文件. org-download-delete现在不可用(attachment link).
#+begin_src elisp
(defun gwp/org-delete-link-file (arg)
  "Delete the file that link points to."
  (interactive "P")

  (let ((file (gwp/org-file-path-at-point)))
    (if file
        (if (file-exists-p file)
            (when (yes-or-no-p (format "Delete link file: %s?" file))
              (progn (delete-file file)
                     (message "File deleted"))
              )
          (error "No such attachment: %s" file))
      (user-error "Point is not on a file link"))))
#+end_src
**** protocol
#+name: d3403c99
#+begin_src elisp
(require 'org-protocol)
#+end_src

**** capture
占位符:
| %:link                            | URL of the web-page                                  |
| %:description                     | The title of the web-page                            |
| %:initial / %i                    | Selected text.                                       |
| %x                                | Content of the X clipboard.                          |
| %(org-get-x-clipboard 'CLIPBOARD) | 强制使用X clipboard复制的内容, 而非primary clipboard |

#+begin_src emacs-lisp
(setq org-capture-templates
      '(
        ("n" "Note" entry (file "~/Notes/refile.note")
         "* %u %? %(org-get-x-clipboard 'CLIPBOARD)\n  %:initial\n" :prepend t)
        ("t" "Task" entry (file+headline "~/Notes/life.note" "Tasks")
         "* TODO %^T %? %(org-get-x-clipboard 'CLIPBOARD)\n  %i" :prepend t)
        ("r" "Research Memo" entry (file+headline "~/Notes/research.note" "Memo")
         "* %u %? %(org-get-x-clipboard 'CLIPBOARD)\n  %i\n" :prepend t)
        ("p" "Paper" entry (file+headline "~/Notes/research.note" "Literature")
         "* TODO %u %? %(org-get-x-clipboard 'CLIPBOARD)\n  %i\n" :prepend t)
        ("j" "Life Journal" entry (file+headline "~/Notes/life.note" "Journals")
         "* %u %? %(org-get-x-clipboard 'CLIPBOARD)\n  %i\n" :prepend t)
        ("N" "Note from protocol" entry (file "~/Notes/refile.note")
         "* %u %? [[%:link][%:description]]\n  %:initial\n" :prepend t)))
#+end_src

**** refile
refile流程:
- 打开refile.note
- 检查其中的条目, 找到可能的合适的归档.note文件, 打开之.
- SPC-m-r-r, org-refile
- SPC-u SPC-m-r-r: 跳转至refile targets

#+name: 568eea25
#+BEGIN_SRC emacs-lisp
(defun gwp/org-get-refile-targets ()
  "Return the list of files currently opened in emacs"
  (delq nil
        (mapcar (lambda (x)
                  (if (and (buffer-file-name x)
                           (string-match "\\.note$"
                                         (buffer-file-name x)))
                      (buffer-file-name x)))
                (buffer-list))))

;;(setq org-refile-targets '((gwp/org-get-refile-targets :tag . "Incoming")))
(setq org-refile-targets '((gwp/org-get-refile-targets :regexp . "^* Memo")))
(setq org-refile-use-outline-path nil)

(setq org-reverse-note-order t)
(defun gwp/get-org-file-link-path ()
  (save-excursion
    (beginning-of-line)
    (search-forward "[[file:" (line-end-position))
    (if (org-in-regexp org-bracket-link-regexp 1)
        (org-link-unescape (match-string-no-properties 1)))))
#+END_SRC

**** read/done
:PROPERTIES:
:header-args: :tangle no
:END:
基本弃用. 有待改进.
#+begin_src elisp
(defun gwp/enter-to-read-state()
  "evoke external shell script when entering READ state"
  (when (equal org-state "READ")
    (setq file (gwp/get-org-file-link-path))
    (if file
        (progn
          (setq cmd (concat "org-to-read.sh " (shell-quote-argument file)))
          (message cmd)
          (shell-command cmd))))
  (when (equal org-last-state "READ")
    (message "try to remove READ state")
    (setq file (gwp/get-org-file-link-path))
    (if file
        (progn
          (setq cmd (concat "org-read-done.sh " (shell-quote-argument file)))
          (message cmd)
          (shell-command cmd)))))
(add-hook 'org-after-todo-state-change-hook 'gwp/enter-to-read-state)

;; show a sparse-tree in READ keyword
(defun gwp/org-show-read-tree ()
  "show a sparse-tree in READ keyword"
  (interactive)

  (let ((base-vector [?\C-u ?\M-x ?o ?r ?g ?- ?s ?h ?o ?w ?- ?t ?o ?d ?o ?- ?t ?r ?e ?e return ?R ?E ?A ?D return]))
    ;; create new macro of the form
    ;; C-u M-x org-show-todo-tree RET READ RET
    (execute-kbd-macro (vconcat base-vector
                                (vector 'return)))))
#+end_src

**** agenda
基本设置
#+name: 43fd72e2
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org-agenda
  ;; 2013-01-20: less is more
  ;; (setq org-agenda-files (append (file-expand-wildcards "~/Notes/*.note") (file-expand-wildcards "~/Notes/*/*.note")))
  (setq org-agenda-files "~/Notes/.agenda_files")

  ;; the default is todo-start
  (setq org-icalendar-use-scheduled (quote (event-if-not-todo event-if-todo todo-start)))
  (setq org-icalendar-alarm-time 5)

  ;; Show all future entries for repeating tasks
  (setq org-agenda-repeating-timestamp-show-all t)

  ;; do not show agenda dates if they are empty
  (setq org-agenda-show-all-dates nil)

  ;; Sorting order for tasks on the agenda
  (setq org-agenda-sorting-strategy
        (quote ((agenda time-up priority-down category-up)
                (todo priority-down)
                (tags priority-down))))

  ;; Start the weekly agenda today
  (setq org-agenda-start-on-weekday nil)

  ;; do not include todo items
  (setq org-agenda-include-all-todo nil))
#+END_SRC

忽略已经完成的任务
#+begin_src emacs-lisp
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-scheduled-if-done t)
#+end_src

自定义agenda命令
#+begin_src emacs-lisp
(with-eval-after-load 'org-agenda
  (setq org-agenda-custom-commands
               '(
                 ("g" . "GTD contexts") ; description for "g" prefix
                 )
               )
  ;; project overview
  (add-to-list 'org-agenda-custom-commands
               '("gp" "Project"
                 (
                  (tags "Project+Action+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "Project\n------------------")
                         (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                         )
                        )
                  (tags "Action+Study+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "Topics\n------------------")
                         (org-agenda-files '("~/Notes/research.note"))
                         (org-agenda-sorting-strategy '(priority-down timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )
                  (tags "Action+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "生活琐事\n------------------")
                         (org-agenda-files '("~/Notes/life.note"))
                         (org-agenda-sorting-strategy '(priority-down timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )
                  ;; (tags "Computer+TODO=\"TODO\""
                  ;;       (
                  ;;        (org-agenda-overriding-header "电脑调优\n------------------")
                  ;;        (org-agenda-sorting-strategy '(priority-down timestamp-up))
                  ;;        (org-agenda-max-entries 5)
                  ;;        )
                  ;;       )
                  )
                 ;; options set here apply to the entire block
                 (
                  (org-tags-match-list-sublevels nil)
                  (org-agenda-prefix-format "%-20c ")
                  (org-agenda-todo-keyword-format "")
                  (org-agenda-remove-tags t)
                  (org-agenda-compact-blocks t)
                  )
                 )
               )

  (add-to-list 'org-agenda-custom-commands
               '("gr" "Reading"
                 (
                  (tags-todo "Reading|Read"
                             (
                              (org-agenda-overriding-header "待读列表\n------------------")
                              (org-agenda-sorting-strategy '(category-keep priority-down))
                              (org-agenda-remove-tags t)
                              (org-agenda-compact-blocks t)
                              )
                             )
                  (tags "REFILE"
                        (
                         (org-agenda-overriding-header "Tasks to Refile\n------------------")
                         (org-tags-match-list-sublevels nil)
                         )
                        )
                  )
                 ;; options set here apply to the entire block
                 ((org-agenda-compact-blocks t))
                 )
               )

  (add-to-list 'org-agenda-custom-commands
               '("gt" "Tasks"
                 (
                  (agenda ""
                          (
                           ;; (org-agenda-entry-types '(:deadline :scheduled))
                           (org-agenda-span (quote month)) ;; or (org-agenda-span 90)
                           (org-agenda-include-diary nil)
                           (org-agenda-overriding-header "Agenda\n------------------")
                           )
                          )
                  ;; (tags "ASAP+TODO=\"TODO\""
                  (tags-todo "ASAP"
                        (
                         (org-agenda-entry-types '(:timestamp))
                         (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                         (org-agenda-overriding-header "\nASAP\n------------------")
                         (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                         (org-agenda-max-entries 20)
                         (org-agenda-prefix-format "%-12c ")
                         (org-agenda-compact-blocks t)
                         )
                        )
                  )
                 ;; options set here apply to the entire block
                 (
                  (org-tags-match-list-sublevels nil)
                  ;; (org-agenda-files '("~/Notes/research.note" "~/Notes/life.note"))
                  (org-agenda-todo-keyword-format "")
                  (org-agenda-remove-tags t)
                  )
                 ;; agenda view exported with: Ctrl-C a e
                 ("~/Notes/agenda.html" "~/Notes/agenda.txt")
                 )
               )
  )
#+end_src

后台自动导出日程. 暂时禁用
#+BEGIN_SRC emacs-lisp :tangle no
;; disabled for upgrading to org-9.0
;; auto export agenda
(defun gwp/run-agenda-store ()
  ""
  (message "Exporting agenda... ")
  (org-batch-store-agenda-views)
  (message "Agenda exported."))

;; export agenda if I am away for 2 minutes
(run-with-idle-timer 600 t 'gwp/run-agenda-store)
#+END_SRC

闲时显示日程. 有兼容性问题, 暂时禁用.
#+begin_src emacs-lisp :tangle no
(use-package idle-org-agenda
  :after org-agenda
  :ensure t
  :config (idle-org-agenda-mode))

(custom-set-variables
 '(idle-org-agenda-interval 600) ;; 10 x 60 seconds
 '(idle-org-agenda-key "gt")     ;; Choose your specific agenda
 '(idle-org-agenda-mode t)
 )
#+end_src

**** org-file-apps
org-open-file调用pdf-tools打开PDF文件
#+begin_src elisp
(add-to-list 'org-file-apps
             '("\\.pdf\\'" . (lambda (file link)
                               (org-pdftools-open link))))
#+end_src

**** fix tab
解决按tab键乱窜的问题
#+begin_src elisp
(add-hook 'org-mode-hook #'evil-normalize-keymaps)
#+end_src

**** my .note files
***** search all notes
搜索所有~/.cache/notes目录下所有.notes文件. 为了避免symlink文件不存在导致ivy报错,
我们使用自定义脚本ripgrep, 强制命令退出码为0. 注意~/.local/bin应在PATH变量中.

#+begin_src shell :tangle ~/.local/bin/ripgrep :shebang #! /bin/bash
/usr/bin/rg $@

exit 0
#+end_src

#+name: 4971b464
#+begin_src emacs-lisp
;;;###autoload
(defun gwp/search-all-notes ()
  "search all notes in ~/.cache/notes"
  (interactive)
  ;; (defun counsel-rg (&optional initial-input initial-directory extra-rg-args rg-prompt)
  (let ((counsel-rg-base-command (list "ripgrep" "--follow" "-M" "240" "--with-filename" "--no-heading" "--line-number" "--color" "never" "%s")))
    (counsel-rg "" "~/.cache/notes")))
#+end_src

deadgrep与doom有冲突, 不能用了.
#+begin_src emacs-lisp :tangle no
(defun gwp/return-default-notes-dir ()
  "~/.cache/notes"
  )
(use-package! deadgrep
              :config
              (setq deadgrep-project-root-function #'gwp/return-default-notes-dir)
              )
#+end_src

***** find notes
#+name: 05419467
#+begin_src elisp
(defun gwp/find-file-in-notes ()
  "Find a file under `~/.cache/notes', recursively."
  (interactive) (doom-project-find-file "~/.cache/notes"))
#+end_src

**** misc
Org links to Unix man pages [[http://orgmode.org/manual/Adding-hyperlink-types.html][doc]]
#+begin_src emacs-lisp
;; (require 'org-man)
#+end_src

禁用*bold*等标注的字体效果. 写代码时容易弄花显示. 比如__init__.
#+begin_src emacs-lisp
(setq org-fontify-emphasized-text nil)
#+end_src

#+begin_src emacs-lisp :tangle no
(defun gwp/org-confirm-babel-evaluate (lang body)
  (not (string= lang "python")))  ; don't ask for python
(setq org-confirm-babel-evaluate 'gwp/org-confirm-babel-evaluate)
#+end_src

自动保存编辑的代码. [2018-12-17 Mon] will cause timerp error
#+begin_src emacs-lisp :tangle no
;; saving a source code buffer back into its base buffer
(setq org-edit-src-auto-save-idle-delay 1)
#+end_src

**** bindings
***** core
#+name: 917381e9
#+begin_src elisp
;; 2021-10-20: 可用 gwp-leader-def 来代替
;; 定义一些特别常用的命令, 仅在org-mode中显示
;; (defun gwp/org-mode-keys-hook ()
;;   ;; (evil-local-set-key 'normal (kbd "SPC RET") '+org/dwim-at-point)
;;   ;; (evil-local-set-key 'normal (kbd "SPC j t") 'gwp/org-babel-tangle-jump-to-file)
;;   ;; (evil-local-set-key 'normal (kbd "SPC d d") 'gwp/org-babel-tangle-dwim)
;; )
;; (add-hook 'org-mode-hook 'gwp/org-mode-keys-hook)
;; (defun gwp/org-src-mode-keys-hook ()
;;   (evil-local-set-key 'normal (kbd "SPC d d") 'gwp/org-babel-tangle-dwim))
;; (add-hook 'org-src-mode-hook 'gwp/org-mode-keys-hook)

;; [2021-10-04 Mon] leader map是全局性的, 不能动态加载和卸载
;; (map! :mode org-mode
;;       :leader
;;       ;; :when (equal major-mode 'org-mode)
;;       :desc "tangle blocks at point"      "o b" #'gwp/org-babel-tangle-dwim
;;       ;; :desc "execute in edit buffer"      "SPC" #'org-babel-do-key-sequence-in-edit-buffer
;;       ;; :desc "org-babel"                   "a"   org-babel-map;  换个容易按的键位
;;       :desc "Enter-dwim"                  "RET" #'+org/dwim-at-point
;;       )
#+end_src

***** edit
#+name: bfe4f470
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      "-" #'org-ctrl-c-minus            ; toggle item (-)
      "*" #'org-ctrl-c-star             ; toggle headline (*)
      )
#+end_src

***** attach/agenda
#+name: c09b236a
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      (:prefix ("a" . "attach/agenda")
       :desc "attachment" "a" #'org-attach
       :desc "agenda (next)"     "n" #'org-agenda
       ))
#+end_src

***** babel
#+name: 21ae7ae2
#+begin_src elisp
;; 更多的命令定义在org-babel-map
(map! :map org-mode-map
      :localleader
      :desc "previous block" "M-p" #'org-previous-block
      :desc "next block" "M-n" #'org-next-block
      (:prefix ("b" . "babel/buffer")
       :desc "check src block headers"    "c" #'org-babel-check-src-block
       :desc "insert header argument"     "i" #'org-babel-insert-header-arg
       :desc "view header arguments"      "I" #'org-babel-view-src-block-info
       :desc "demarcate block"            "d" #'org-babel-demarcate-block
       :desc "edit src codes in place"    "s" #'gwp/org-babel-edit-structure-in-place
       :desc "jump to tangled file"       "j" #'gwp/org-babel-tangle-jump-to-file
       :desc "insert header tangle no"    "n" #'gwp/org-babel-tangle-no
       :desc "execute in edit buffer"     "x" #'org-babel-do-key-sequence-in-edit-buffer
       :desc "tangle blocks in subtree"   "t" #'gwp/org-tangle-subtree
       :desc "name code block at point"   "SPC" #'gwp/org-src-insert-name
       :desc "tangle blocks in buffer"    "T" #'org-babel-tangle
       :desc "switch org buffer"          "b" #'org-switchb ; 仿SPC-b-b
       ))
#+end_src
***** edit
#+name: 8d8e9273
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      (:prefix ("d" . "do")
       :desc "sort list" "s" #'org-sort-list ; 可用于给列表排序, 默认为C-c ^
       ))
#+end_src

***** goto
#+name: a02d9b1f
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      (:prefix ("g" . "goto")
       :desc "previous position"  "p" #'org-mark-ring-goto
       :desc "标记位置"  "m" #'org-mark-ring-push
       :desc "Jump to org heading"  "g" #'counsel-org-goto
       ))
#+end_src
***** jump
#+name: 3bbc773a
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      (:prefix-map ("j" . "org jump")
       :desc "跳转至代码块"              "b"   #'gwp/org-jump-block/body
       :desc "跳转至链接"                "l"   #'gwp/org-jump-link/body
       :desc "跳转至 tangled 代码文件"   "t"   #'gwp/org-babel-tangle-jump-to-file
       ))
#+end_src

***** link
#+name: 32a3b56a
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      :desc "next link"           [tab]   #'org-next-link
      :desc "prev link"           [backtab]   #'org-previous-link
      (:prefix ("l" . "links")
       "l" #'org-insert-link
       "D" #'gwp/org-delete-link-file
       ))
#+end_src
***** note
#+name: ac0d3d18
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      (:prefix ("n" . "note/noter")
       "o" #'gwp::org-note::open-pdf
       "i" #'gwp::org-note::new-note
       ))

(map! :map dired-mode-map
      :localleader
      (:prefix ("n" . "note/noter")
       "n" #'gwp::org-note::dired-annotate-file-at-point
       ))
#+end_src

***** subtree/search
#+name: a393f96d
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      (:prefix-map ("s" . "subtree/search")
       :desc "Demote" "l" #'org-demote-subtree
       :desc "Promote" "h" #'org-promote-subtree
       :desc "Archive" "A" #'org-archive-subtree
       :desc "Narrow" "n" #'ap/org-tree-to-indirect-buffer
       ;; 仿SPC-s-s
       :desc "Goto" "s" #'counsel-org-goto
       :desc "Goto (all)" "S" #'counsel-org-goto-all
       :desc "Toggle org-sidebar-tree" "t" #'org-sidebar-tree-toggle
       ))
#+end_src

***** todo/toggle
#+name: ebc6075d
#+begin_src elisp
(defun gwp::org-toggle-checkbox ()
  (interactive)
  (unless (org-at-item-p)
    (call-interactively #'org-toggle-item)
    )
  (let ((current-prefix-arg '(4)))     ; C-u
    (call-interactively #'org-toggle-checkbox)))

(map! :map org-mode-map
      :localleader
      :desc "TODO" "C-t" #'org-todo
      (:prefix ("t" . "todo/toggle/tag")
       :desc "TODO" "t" #'org-todo
       :desc "heading" "h" #'org-toggle-heading
       :desc "item" "i" #'org-toggle-item
       :desc "tag" "s" #'counsel-org-tag
       :desc "fixed-width markup (:)" ":" #'org-toggle-fixed-width
       "c" #'gwp::org-toggle-checkbox))
#+end_src

***** refile
#+name: f4447dfb
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      (:prefix ("r" . "refile")
       :desc "refile entry" "r" #'org-refile
       :desc "refile but preserve subtree" "c" #'org-refile-copy))
#+end_src

***** export
#+name: d7c4714d
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      (:prefix ("e" . "export")
       :desc "export dispatch" "e" #'org-export-dispatch
       ))
#+end_src

***** insert
#+name: 3d7188a4
#+begin_src elisp
(defun gwp::new-memo-time-stamp (arg)
  "Insert a new org-mode memo entry under heading at point."
  (interactive "P")
  (unless (org-at-heading-p)
    (org-up-element))
  (call-interactively 'evil-open-below)
  (call-interactively 'org-insert-todo-subheading)
  (call-interactively 'org-time-stamp-inactive)
  (insert " "))

(defun gwp::new-item-time-stamp (arg)
  (interactive "P")
  (evil-first-non-blank)
  (call-interactively 'org-insert-item)
  (call-interactively 'org-time-stamp-inactive)
  (insert " "))

(map! :map org-mode-map
      :localleader
      (:prefix ("i" . "insert")
       :desc "new memo entry" "m" #'gwp::new-memo-time-stamp ; 简化操作
       :desc "new item" "i" #'gwp::new-item-time-stamp
       :desc "inactive time-stamp" "t" #'org-time-stamp-inactive
       :desc "active time-stamp" "." #'org-time-stamp
       :desc "stored link" "l" #'org-insert-last-stored-link
       :desc "schedule" "s" #'org-schedule
       :desc "deadline" "d" #'org-deadline
       :desc "note" "n" #'org-add-note
       ))
#+end_src

***** toggle
#+name: 1e605e7a
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      :desc "preview inline images"       "I"     #'org-toggle-inline-images
      :desc "preview latex fragments"     "L"     #'org-latex-preview
      :desc "Paste image from clipboard"  "C-v"   #'org-download-clipboard
      )
#+end_src

***** org-sidebar
用的不多
#+name: 1a561e81
#+begin_src elisp :tangle no
(map! :map org-sidebar-tree-map
      :localleader
      :n "RET" #'org-sidebar-tree-jump
      :n [return] #'org-sidebar-tree-jump
      )
#+end_src

***** gwp leader key
最常用的按键
#+name: fdd56fa5
#+begin_src elisp
(gwp-leader-def
  :keymaps 'org-mode-map
  "g" 'counsel-org-goto                        ; goto
  "t" 'org-todo                                ; todo
  "b" 'gwp/org-babel-tangle-dwim               ; babel
  "e" 'org-edit-special                        ; edit
  "a" 'org-attach                              ; attach
  "n" 'gwp::org-babel-narrow-to-tangle-heading ; narrow
  )

(gwp-leader-def
  :keymaps 'org-src-mode-map
  "b" 'gwp/org-babel-tangle-dwim
  )
#+end_src

*** packages.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/modules/gwp/org/packages.el
:END:
#+name: c98fa262
#+begin_src elisp
(package! org)
(package! websocket)
(package! evil-org)
(package! org-roam)
(package! org-roam-ui)
(package! org-superstar)
(package! org-pdftools)
(package! org-download)
(package! org-noter)
(package! orgit)
(package! ob-ipython)
(package! org-sidebar)

(package! org-contrib
  :recipe (:host nil :repo "https://git.sr.ht/~bzg/org-contrib"))
#+end_src

** bindings
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/modules/gwp/bindings/config.el
:END:
还是自定义更舒服些. 以后hack下default +evil-bindings.el仅用于取消某些不习惯的按
键. 注意的键位变量为 doom-leader-<xx>-map, 其中xx为"prefix-map"后所定义的内容,
比如 "doom-leader-workspace-map".

常用命令
- regexp-builder
- apropos-value

*** core
保存文件同时标记当前位置, 方便随后跳回.
#+name: 2d76b8e4
#+begin_src elisp
(defun gwp::mark-and-save-buffer()
  "标记光标所在位置, 并保存buffer"
  (interactive)
  (call-interactively #'gwp::mark-current-position)
  (save-buffer))

(map! :leader
      :desc "Save buffer" "SPC"         #'gwp::mark-and-save-buffer
      :desc "Universal argument"    "u" #'universal-argument
      :desc "Pop up scratch buffer" "x" #'doom/open-scratch-buffer
      :desc "Jump to previous mark" "," #'gwp::jump-to-previous-mark
      :desc "Switch to last buffer" "`" #'evil-switch-to-windows-last-buffer)

(map!
 "C-`"                             #'+popup/toggle
 "C-~"                             #'+popup/raise
 "C-x p"                           #'+popup/other)
#+end_src

*** a: ??
*** b: buffer
#+name: 19c9e88c
#+begin_src elisp
;; https://stackoverflow.com/a/10395406/173271
(require 'cl-lib)
(require 'recentf)

(defun gwp::find-last-killed-file ()
  (interactive)
  (let ((active-files (cl-loop for buf in (buffer-list)
                            when (buffer-file-name buf) collect it)))
    (cl-loop for file in recentf-list
          unless (member file active-files) return (find-file file))))

(map! :leader
      (:prefix-map ("b" . "buffer/bookmark")
       :desc "Switch workspace buffer"     "b"   #'persp-switch-to-buffer
       :desc "Switch buffer"               "B"   #'switch-to-buffer
       :desc "Kill buffer"                 "d"   #'kill-current-buffer
       :desc "delete buffer file"          "D"   #'doom/delete-this-file
       :desc "Kill buffer"                 "k"   #'kill-current-buffer
       :desc "Kill all buffers"            "K"   #'doom/kill-all-buffers
       :desc "Revert buffer"               "r"   #'revert-buffer
       :desc "Previous buffer"             "p"   #'previous-buffer
       :desc "Next buffer"                 "n"   #'next-buffer
       :desc "Save buffer"                 "s"   #'basic-save-buffer
       :desc "Save file as..."             "S"   #'write-file
       :desc "Clone indirect buffer"       "c"   #'clone-indirect-buffer-other-window
       :desc "Toggle narrowing"            "-"   #'doom/toggle-narrow-buffer
       :desc "Switch to last buffer"       "l"   #'evil-switch-to-windows-last-buffer
       :desc "New empty buffer"            "N"   #'evil-buffer-new
       :desc "ibuffer"                     "i"   #'ibuffer
       :desc "Open in new frame"           "o"   #'gwp::display-current-buffer-other-frame
       :desc "Kill other buffers"          "O"   #'doom/kill-other-buffers
       :desc "reopen killed file"          "u"   #'gwp::find-last-killed-file
       :desc "copy file path"              "y"   #'+default/yank-buffer-path
       :desc "Bury buffer"                 "z"   #'bury-buffer
       :desc "Kill buried buffers"         "Z"   #'doom/kill-buried-buffers
       :desc "Set bookmark"                "m"   #'bookmark-set
       :desc "Delete bookmark"             "M"   #'bookmark-delete
       ))
#+end_src

*** c: code
#+name: e78a01dd
#+begin_src elisp
(map! :leader
      (:prefix-map ("c" . "code/compile")
       :desc "Align the current region regexp"       "a"   #'align-regexp
       :desc "Comment or uncomment lines"            "l"   #'gwp/comment-or-uncomment-dwim
       :desc "Copy & comment"                        "y"   #'evilnc-copy-and-comment-lines
       :desc "将TAB转为空格"                         "SPC" #'untabify
       :desc "indent region"                         "TAB" #'indent-region ; 有用
       :desc "indent region"                         [tab] #'indent-region ; 有用
       :desc "Compile"                               "c"   #'compile
       :desc "Recompile"                             "C"   #'recompile
       :desc "highlight"                             "h"   gwp::symbol-overlay-map
       :desc "Jump to definition"                    "d"   #'+lookup/definition
       :desc "Jump to references"                    "D"   #'+lookup/references
       :desc "Evaluate buffer/region"                "e"   #'+eval/buffer-or-region
       :desc "Evaluate & replace region"             "E"   #'+eval:replace-region
       :desc "Format buffer/region"                  "f"   #'+format/region-or-buffer
       :desc "Find implementations"                  "i"   #'+lookup/implementations
       :desc "Jump to documentation"                 "k"   #'+lookup/documentation
       :desc "Send to repl"                          "s"   #'gwp/tmux-ipython-paste-region ; 和tmux配合
       :desc "Find type definition"                  "t"   #'+lookup/type-definition
       :desc "Delete trailing whitespace"            "w"   #'delete-trailing-whitespace
       :desc "Delete trailing newlines"              "W"   #'doom/delete-trailing-newlines
       :desc "List errors"                           "x"   #'+default/diagnostics
       ))
#+end_src

*** d: dodo
#+name: 5e265fdb
#+begin_src elisp
(map! :leader
      (:prefix-map ("d" . "dodo")
       :desc "select text"   "s" #'gwp/advanced-selection
       :desc "resize window" "w" #'gwp/adjust-window-size/body
       :desc "smart parents" "p" #'gwp/hydra-smartparens/body
       ))
#+end_src

*** e: external
#+name: 6c75cff0
#+begin_src elisp
(map! :leader
      (:prefix-map ("e" . "external")
       :desc "程序窗口管理" "w" #'counsel-wmctrl
       :desc "启动桌面程序" "a" #'counsel-linux-app
       ))
#+end_src

*** f: file/find
#+name: 9ef458a0
#+begin_src elisp
(map! :leader
      ;; 注意 "file/find"特意与+evil-bindings.el中定义的不同, 用于覆盖原按键
      (:prefix-map ("f" . "file/find")
       :desc "Open bookmarks"              "b"   #'counsel-bookmark ; 有用
       :desc "Jump to Dired buffer"        "j"   #'dired-jump ; 有用
       :desc "Find .note files"            "n"   #'gwp/find-file-in-notes
       :desc "Find directory"              "d"   #'+default/dired
       :desc "Delete this file"            "D"   #'doom/delete-this-file
       :desc "Find file in emacs.d"        "e"   #'doom/find-file-in-emacsd
       :desc "Browse emacs.d"              "E"   #'doom/browse-in-emacsd
       :desc "Find file"                   "f"   #'find-file
       :desc "Find file from here"         "F"   #'+default/find-file-under-here
       :desc "Locate file"                 "l"   #'locate
       :desc "Open file/dir externally"    "o"   #'spacemacs/open-file-or-directory-in-external-app
       :desc "Find file in private config" "p"   #'doom/find-file-in-private-config
       :desc "Browse private config"       "P"   #'doom/open-private-config
       :desc "Recent files"                "r"   #'recentf-open-files
       :desc "Copy this file"              "C"   #'doom/copy-this-file
       :desc "Rename/move file"            "R"   #'doom/move-this-file
       :desc "Save file"                   "s"   #'save-buffer
       :desc "Save file as..."             "S"   #'write-file
       :desc "Sudo find file"              "u"   #'doom/sudo-find-file
       :desc "Sudo this file"              "U"   #'doom/sudo-this-file
       :desc "Yank file path"              "y"   #'+default/yank-buffer-path
       :desc "Yank file path from project" "Y"   #'+default/yank-buffer-path-relative-to-project)
      )
#+end_src
*** g: git
#+name: ac7488a5
#+begin_src elisp
(map! :leader
      (:prefix-map ("g" . "git")
       :desc "Revert file"                 "R"   #'vc-revert
       :desc "Copy link to remote"         "y"   #'+vc/browse-at-remote-kill
       :desc "Copy link to homepage"       "Y"   #'+vc/browse-at-remote-kill-homepage
       (:when (featurep! :ui hydra)
        :desc "SMerge"                    "m"   #'+vc/smerge-hydra/body)
       (:when (featurep! :ui vc-gutter)
        (:when (featurep! :ui hydra)
         :desc "VCGutter"                "."   #'+vc/gutter-hydra/body)
        :desc "Revert hunk"               "r"   #'git-gutter:revert-hunk
        :desc "Git stage hunk"            "s"   #'git-gutter:stage-hunk
        :desc "Git time machine"          "t"   #'git-timemachine-toggle
        :desc "Jump to next hunk"         "]"   #'git-gutter:next-hunk
        :desc "Jump to previous hunk"     "["   #'git-gutter:previous-hunk)
       (:when (featurep! :gwp magit) ; 改用自定义版
        :desc "Manage dotfiles (yadm)"    "y"   (cmd! (magit-status "/yadm::"))
        :desc "Magit dispatch"            "/"   #'magit-dispatch
        :desc "Magit file dispatch"       "."   #'magit-file-dispatch
        :desc "Forge dispatch"            "'"   #'forge-dispatch
        :desc "Magit switch branch"       "b"   #'magit-branch-checkout
        :desc "Magit status"              "g"   #'magit-status
        :desc "Magit status here"         "G"   #'magit-status-here
        :desc "Magit file delete"         "D"   #'magit-file-delete
        :desc "Magit blame"               "B"   #'magit-blame-addition
        :desc "Magit clone"               "C"   #'magit-clone
        :desc "Magit fetch"               "F"   #'magit-fetch
        :desc "Magit buffer log"          "L"   #'magit-log-buffer-file
        :desc "Git stage file"            "S"   #'magit-stage-file
        :desc "Git unstage file"          "U"   #'magit-unstage-file
        (:prefix ("f" . "find")
         :desc "Find file"                 "f"   #'magit-find-file
         :desc "Find gitconfig file"       "g"   #'magit-find-git-config-file
         :desc "Find commit"               "c"   #'magit-show-commit
         :desc "Find issue"                "i"   #'forge-visit-issue
         :desc "Find pull request"         "p"   #'forge-visit-pullreq)
        (:prefix ("o" . "open in browser")
         :desc "Browse file or region"     "o"   #'+vc/browse-at-remote
         :desc "Browse homepage"           "h"   #'+vc/browse-at-remote-homepage
         :desc "Browse remote"             "r"   #'forge-browse-remote
         :desc "Browse commit"             "c"   #'forge-browse-commit
         :desc "Browse an issue"           "i"   #'forge-browse-issue
         :desc "Browse a pull request"     "p"   #'forge-browse-pullreq
         :desc "Browse issues"             "I"   #'forge-browse-issues
         :desc "Browse pull requests"      "P"   #'forge-browse-pullreqs)
        (:prefix ("l" . "list")
         (:when (featurep! :tools gist)
          :desc "List gists"              "g"   #'+gist:list)
         :desc "List repositories"         "r"   #'magit-list-repositories
         :desc "List submodules"           "s"   #'magit-list-submodules
         :desc "List issues"               "i"   #'forge-list-issues
         :desc "List pull requests"        "p"   #'forge-list-pullreqs
         :desc "List notifications"        "n"   #'forge-list-notifications)
        (:prefix ("c" . "create")
         :desc "Initialize repo"           "r"   #'magit-init
         :desc "Clone repo"                "R"   #'magit-clone
         :desc "Commit"                    "c"   #'magit-commit-create
         :desc "Fixup"                     "f"   #'magit-commit-fixup
         :desc "Branch"                    "b"   #'magit-branch-and-checkout
         :desc "Issue"                     "i"   #'forge-create-issue
         :desc "Pull request"              "p"   #'forge-create-pullreq)))
      )
#+end_src

*** h: help
帮助系统
- apropos-value

#+name: e7792733
#+begin_src elisp
(map! :leader
      :desc "help"                  "h"    help-map
      )
#+end_src

*** i: insert
#+name: 4a4573c2
#+begin_src elisp
(map! :leader
      (:prefix-map ("i" . "insert")
       :desc "Snippet"                       "s"   #'yas-insert-snippet
       :desc "From clipboard"                "y"   #'+default/yank-pop
       :desc "Current file name"             "f"   #'+default/insert-file-path
       :desc "Current file path"             "F"   (cmd!! #'+default/insert-file-path t)
       :desc "Evil ex path"                  "p"   (cmd! (evil-ex "R!echo "))
       :desc "From evil register"            "r"   #'evil-ex-registers
       :desc "Unicode"                       "u"   #'insert-char
       ))
#+end_src

*** j: jump
#+name: 6ea0d271
#+begin_src elisp
(map! :leader
      (:prefix ("j" . "jump")
       :desc "org src"                "o" #'gwp/org-babel-tangle-jump-to-org
       :desc "search occurrence"      "j" #'gwp/evil-ex-search-avy-jump
       :desc "avy line"               "l" #'evil-avy-goto-line
       :desc "emacs mark ring"        "m" #'gwp::hydra-mark-ring-pop/body
       ))
#+end_src

*** l: load/workspace
#+name: 2598d642
#+begin_src elisp
(map! :leader
      (:prefix-map ("l" . "load/workspace") ;; 用tab不方便
       :desc "Load or witch workspace"   "l"   #'gwp/workspace/load-or-switch
       :desc "Switch workspace"          "TAB" #'+workspace/switch-to ; 调整下
       :desc "Switch to last workspace"  "b"   #'+workspace/other ; 换个好按的
       :desc "Next workspace"            "n"   #'+workspace/switch-right
       :desc "Previous workspace"        "p"   #'+workspace/switch-left
       :desc "Display tab bar"           "."   #'+workspace/display
       :desc "Switch to last workspace"  "`"   #'+workspace/other
       :desc "New named workspace"       "N"   #'+workspace/new-named
       :desc "Save workspace to file"    "s"   #'+workspace/save
       :desc "Delete session"            "x"   #'+workspace/kill-session
       :desc "Delete this workspace"     "d"   #'+workspace/delete
       :desc "Rename workspace"          "r"   #'+workspace/rename
       :desc "Restore last session"      "R"   #'+workspace/restore-last-session
       :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
       :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
       :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
       :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
       :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4
       :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5
       :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6
       :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7
       :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8
       :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final
       ))
#+end_src

*** m: my? memo?

*** n: note/next
#+name: 1ad72c87
#+begin_src elisp
(map! :leader
      (:prefix-map ("n" . "note/next")
       :desc "Search notes for symbol"      "*" #'+default/search-notes-for-symbol-at-point
       :desc "Org agenda"                   "a" #'org-agenda
       :desc "Find .note files"             "f" #'gwp/find-file-in-notes
       :desc "Browse notes"                 "F" #'+default/browse-notes
       :desc "Org store link"               "l" #'org-store-link
       :desc "Tags search"                  "m" #'org-tags-view
       :desc "Org capture"                  "c" #'org-capture
       :desc "org-agenda"                   "n" (cmd! (org-agenda nil "gt"))
       :desc "Goto capture"                 "N" #'org-capture-goto-target
       :desc "Todo list"                    "t" #'org-todo-list
       :desc "Search notes"                 "s" #'+default/org-notes-search
       :desc "Search org agenda headlines"  "S" #'+default/org-notes-headlines
       :desc "View search"                  "v" #'org-search-view
       ))
#+end_src

*** o: org/open
#+name: fc304196
#+begin_src elisp
(map! :leader
      (:prefix-map ("o" . "org/open")
       :desc "Org attachment"        "a" #'org-attach
       :desc "org-agenda (GTD)"      "n" (cmd! (org-agenda nil "gt"))
       :desc "org-capture"           "c" #'org-capture
       :desc "Tags search"           "m" #'org-tags-view
       :desc "View search"           "v" #'org-search-view
       :desc "New frame"             "f" #'make-frame
       :desc "Select frame"          "F" #'select-frame-by-name
       :desc "REPL"                  "r" #'+eval/open-repl-other-window
       :desc "REPL (same window)"    "R" #'+eval/open-repl-same-window
       :desc "Toggle vterm popup"    "t" #'+vterm/toggle
       :desc "Open termerinal here"  "T" #'gwp/open-terminal-here ; 打开外部terminal
       ))
#+end_src

*** p: quit/session
#+name: 1f0c2364
#+begin_src elisp
(map! :leader
      (:prefix-map ("q" . "quit/session")
       :desc "Quit Emacs"                   "q" #'save-buffers-kill-terminal
       :desc "Restart & restore Emacs"      "r" #'doom/restart-and-restore
       :desc "Restart Emacs"                "R" #'doom/restart
       :desc "Delete frame"                 "f" #'delete-frame
       :desc "Clear current frame"          "F" #'doom/kill-all-buffers
       :desc "Kill Emacs (and daemon)"      "K" #'save-buffers-kill-emacs
       :desc "Quit Emacs without saving"    "Q" #'evil-quit-all-with-error-code
       :desc "Quick save current session"   "s" #'doom/quicksave-session
       :desc "Restore last session"         "l" #'doom/quickload-session
       :desc "Save session to file"         "S" #'doom/save-session
       :desc "Restore session from file"    "L" #'doom/load-session
       ))
#+end_src

*** r: resume/rings
emacs可以记录所有mark操作的位置(mark-ring), 也可以用m命令(evil-set-marke)手动设置位置记录, 然后随时跳转回来.

#+name: 1c637dc8
#+begin_src elisp
(map! :leader
      (:prefix-map ("r" . "resume/rings")
       :desc "Open bookmarks"        "b" #'counsel-bookmark
       :desc "Resume last search"    "l" #'ivy-resume
       :desc "Evil registers"        "e" #'counsel-register
       :desc "Evil mark ring"        "r" #'counsel-mark-ring
       :desc "Evil markers"          "m" #'counsel-evil-marks
       :desc "Restore selection"     "v" #'evil-visual-restore
       :desc "Restore insert point"  "i" #'evil-insert-resume
       :desc "Last change"           "c" #'gwp::hydra-last-change/body
       :desc "Jump list"             "j" #'+ivy/jump-list
       ))
#+end_src

*** s: search
SPC-s-s和SPC-s-b有什么区别?
#+name: 321efaf0
#+begin_src elisp
(map! :leader
      :desc "Search buffer at point"        "*" #'swiper-isearch-thing-at-point
      (:prefix-map ("s" . "search")
       :desc "Search all notes"             "n" #'gwp/search-all-notes ; 全局搜索.note文件
       :desc "Search buffer"                "s" #'+default/search-buffer ; 走isearch路线, 可一行多个匹配
       :desc "Search buffer at point"       "S" #'swiper-isearch-thing-at-point
       :desc "Search buffer"                "b" #'swiper ; 一行仅一个匹配?
       :desc "Search buffer from clipboard" "y" #'gwp::swiper-from-clipboard
       :desc "Search all open buffers"      "B" #'swiper-all
       :desc "Jump to search occurrence"    ";" #'gwp/evil-ex-search-avy-jump
       :desc "Search current directory"     "d" #'+default/search-cwd
       :desc "Search other directory"       "D" #'+default/search-other-cwd
       :desc "Search .emacs.d"              "e" #'+default/search-emacsd
       :desc "fd in current dir"            "f" #'find-file-in-project-by-selected ; 搜索文件名
       :desc "Jump to symbol"               "i" #'imenu
       :desc "Locate file"                  "l" #'counsel-locate
       :desc "Jump list"                    "j" #'evil-show-jumps
       :desc "Jump to bookmark"             "m" #'bookmark-jump
       :desc "Look up online"               "o" #'+lookup/online
       :desc "Look up online (select)"      "O" #'+lookup/online-select
       :desc "Search project"               "p" #'+default/search-project
       :desc "Search other project"         "P" #'+default/search-other-project
       :desc "Jump to mark"                 "r" #'evil-show-marks
       (:prefix-map ("h" . "highlight")
        :desc "highlight symbol at point"         "." #'highlight-symbol-at-point
        :desc "highlight REGEXP"                  "h" #'highlight-regexp
        :desc "unhighlight regexp"                "u" #'unhighlight-regexp)))
#+end_src

*** t: toggle
#+name: 95d4be8a
#+begin_src elisp
(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "切换终端(vterm)"            "t" #'vterm-toggle
       :desc "Big mode"                   "b" #'doom-big-font-mode
       :desc "Debug on error"             "d" #'toggle-debug-on-error
       :desc "Flycheck"                   "f" #'flycheck-mode
       :desc "Frame fullscreen"           "F" #'toggle-frame-fullscreen
       :desc "Indent style"               "I" #'doom/toggle-indent-style
       :desc "Line numbers"               "l" #'gwp::toggle-line-numbers
       :desc "Read-only mode"             "r" #'read-only-mode
       ;; :desc "Spell checker"              "s" #'spell-fu-mode
       :desc "Spell checker"              "s" #'flyspell-mode
       :desc "Socks proxy"                "p" #'proxy-socks-toggle
       :desc "Soft line wrapping"         "w" #'visual-line-mode
       :desc "Zen mode"                   "z" #'+zen/toggle
       :desc "Zen mode (fullscreen)"      "Z" #'+zen/toggle-fullscreen
       ))
#+end_src

*** v: visual selection
#+name: d2dc925d
#+begin_src elisp
(map! :leader
      (:prefix-map ("v" . "visual")
       :desc "expand region"            "v" #'er/expand-region
       :desc "select text"              "s" #'gwp/advanced-selection
       :desc "jump to emacs mark ring"  "j" #'gwp::hydra-mark-ring-pop/body
       :desc "multi-cursor mode"        "m" #'gwp::hydra-multiedit/body))
#+end_src

*** w/W: window/frame
#+name: 011dce65
#+begin_src elisp
(map! :leader
      :desc "window"                "w"    evil-window-map ; 默认为C-w
      :desc "frame"                 "W"    ctl-x-5-map     ; 换个容易按的键位
      )
#+end_src

*** y: Yank/paste
#+name: bc190292
#+begin_src elisp
(map! :leader
      (:prefix-map ("y" . "yank")
       :desc "Snippet"                       "s"   #'yas-insert-snippet
       :desc "From clipboard"                "y"   #'gwp::yank-dwim
       :desc "Current file name"             "f"   #'+default/insert-file-path
       :desc "Current file path"             "F"   (cmd!! #'+default/insert-file-path t)
       :desc "Evil ex path"                  "p"   (cmd! (evil-ex "R!echo "))
       :desc "From evil register"            "r"   #'evil-ex-registers
       :desc "Unicode"                       "u"   #'insert-char
       ))
#+end_src

*** z: ???
** misc
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/modules/gwp/misc/config.el
:END:
*** packages.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/modules/gwp/misc/packages.el
:END:

* modules/hack
新思路:
- fork doom-emacs, 仅做必要的修改. 将其中的org module更名后, 放到pkg下载入. 这样易于跟踪官方进度.
- 新的gwp/org会覆盖lang/org中的设置
- 注意修改文件首行的路径, 特别是autoloads, 否则不能正常加载([2021-10-03 Sun] 似乎已不需要?):
  : -;;; lang/org/autoload/org-link.el -*- lexical-binding: t; -*-
  : +;;; ~/.doom.d/modules/gwp/org/autoload/org-link.el -*- lexical-binding: t; -*-
- 注意修改makefile中的stow相关内容, 以将对应的module安装至 ~/.doom.d/modules/gwp

修改的模块:
** [[file:doom-hacks/modules/lang/org/config.el][org/config.el]]
** [[file:doom-hacks/modules/lang/rust/config.el][rust/config.el]]
** [[file:doom-hacks/modules/tools/pdf][pdf]]
** [[file:doom-hacks/modules/tools/magit/][magit/]]
** [[file:doom-hacks/modules/config/default][default]]

* snippets
:PROPERTIES:
:header-args: :comments nil
:END:
TAB自动补全很可怕, 无意按键, 补出很多没用的东西. doom系统下private snippets目录
为 ~/.doom.d/snippets.

- [[https://github.com/hlissner/doom-snippets][hlissner/doom-snippets: The Doom Emacs snippets library]] [[file:doom-snippets][visit]]

** org-mode
*** begin_src
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src
# -*- mode: snippet -*-
# name: #+begin_src
# key: <s
# --
,#+begin_src $1
$0
,#+end_src
#+END_SRC

*** begin_src shell
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_sh
# -*- mode: snippet -*-
# name: #+begin_src shell
# key: <sh
# --
,#+begin_src shell
$0
,#+end_src
#+END_SRC

*** begin_src elisp
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_elisp
# -*- mode: snippet -*-
# name: #+begin_src elisp
# key: <el
# --
,#+begin_src elisp
$0
,#+end_src
#+END_SRC

*** begin_src python
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_python
# -*- mode: snippet -*-
# name: #+begin_src python
# key: <p
# --
,#+begin_src python
$0
,#+end_src
#+END_SRC

*** begin_src rust
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_rust
# -*- mode: snippet -*-
# name: #+begin_src rust
# key: <r
# --
,#+begin_src rust
$0
,#+end_src
#+END_SRC

** rust-mode
*** cfg
: pkg/.doom.d/snippets/rust-mode/cfg
*** impl Default
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/impl_default
# -*- mode: snippet -*-
# name: impl Default
# key: Default
# --
impl Default for ${1:Type} {
    fn default() -> Self {
        ${0:Self::new()}
    }
}
#+END_SRC

*** structopt
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/structopt
# -*- mode: snippet -*-
# name: #[derive(StructOpt)]
# key: structopt
# --
#[derive(StructOpt, Debug, Clone)]
struct ${1:Cli} {
    #[structopt(long, short)]
    ${2:n}: ${0:usize}
}
#+END_SRC

*** if let
: pkg/.doom.d/snippets/rust-mode/if_let
*** deprecated
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/deprecated
# -*- mode: snippet -*-
# name: #deprecated(note=X);
# key: #dep
# --
#[deprecated(note = "$1")]
#+END_SRC

*** for
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/for
# -*- mode: snippet -*-
# name: for var in iterable { ... }
# key: for
# --
for ${1:var} in ${2:iterable} {
    $0
}
#+END_SRC

*** print
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/print
# -*- mode: snippet -*-
# name: print!("{}", value);
# key: print
# --
print!("${1:{}}", $2);
#+END_SRC

*** println
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/println
# -*- mode: snippet -*-
# name: println!("{}", value);
# key: println
# --
println!("${1:{}}", $2);
#+END_SRC

*** eprintln
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/eprintln
# -*- mode: snippet -*-
# name: eprintln!("{}", value);
# key: eprintln
# --
eprintln!("${1:{}}", $2);
#+END_SRC

*** fn
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/fn
# -*- mode: snippet -*-
# name: fn name() { ... }
# key: fn
# --
fn ${1:name}($2) {
   ${0:todo!()}
}
#+END_SRC

*** fnr
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/fnr
# -*- mode: snippet -*-
# name: fn name() -> Type { ... }
# key: fnr
# --
fn ${1:name}($2) -> ${3:Result<${4:()}>} {
     ${0:todo!()}
}
#+END_SRC

*** fnw
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/fnw
# -*- mode: snippet -*-
# name: fn name<T>(x: T) where T: Clone { ... }
# key: fnw
# --
fn ${1:name}<${2:T}>(${3:x: T}) where ${4:T: Clone} {
     $0
}
#+END_SRC

*** test
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/test
# -*- mode: snippet -*-
# name: #[test] fn test_name() { .. }
# key: #test
# --
#[test]
fn ${1:test_name}() {
   $0
}
#+END_SRC

*** result
: pkg/.doom.d/snippets/rust-mode/result

*** todo!
: pkg/.doom.d/snippets/rust-mode/todo

*** derive
: pkg/.doom.d/snippets/rust-mode/derive

*** main
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/main
# -*- mode: snippet -*-
# name: fn main() { ... }
# key: main
# --
fn main() {
   $0
}
#+END_SRC

** prog-mode
*** fixme
: pkg/.doom.d/snippets/prog-mode/fixme

*** todo
: pkg/.doom.d/snippets/prog-mode/todo

** elisp
: pkg/.doom.d/snippets/emacs-lisp-mode

* theme
[[file:emacs-material-theme/][file:~/Workspace/Programming/emacs/emacs-material-theme/]]

* Local variables
# Emacs:
# Local Variables:
# mode: org
# end:
