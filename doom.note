#+TITLE: org-mode config for doom-emacs
#+SETUPFILE: ~/Notes/common.org

spacemacs设置 [[file:~/Install/configs/spacemacs/config.note]]

doom配置参考
- https://github.com/gilbertw1/bmacs/blob/master/bmacs.org
- https://github.com/utrack/dotfiles/tree/master/doomemacs/.doom.d

* Memo [5/11]
** TODO [2020-03-05 Thu] 截图新方式: org-capture + org-download?
- 参考: [[https://emacs.stackexchange.com/questions/41016/how-can-i-yank-images-from-emacs][osx - How can I yank images from Emacs? - Emacs Stack Exchange]]
- [2020-03-06 Fri] org-download-delete有问题, 不能用了.
- 使用下面的脚本, 从X11 clipboard复制截图, 这样避免了截图时emacs窗口如何最小化的
  问题. [2020-03-06 Fri] 不太好用, 用rust重写了.
  #+begin_src shell :tangle no
    set -e
    if [ "x$1" = "x" ]; then
        echo "Usage: [options] $0 file..." >&2
        exit 1
    fi

    xclip -selection clipboard -t image/png -o > "$1"

    # remove zero sized file
    [ ! -s "$1" ] && rm "$1"
  #+end_src

** TODO [2020-03-01 Sun] 各种emacs distribution
- [[https://github.com/emacs-tw/awesome-emacs][emacs-tw/awesome-emacs: A community driven list of useful Emacs packages, libraries and others.]]

** TODO [2020-03-01 Sun] doom evil学习
- 这个和regex-align有点像 https://github.com/edkolev/evil-lion
- [[https://noelwelsh.com/posts/2019-01-10-doom-emacs.html][Noel Welsh: Doom Emacs Workflows]]
- [[https://github.com/hlissner/doom-emacs/blob/develop/modules/editor/evil/README.org][doom-emacs/README.org at develop · hlissner/doom-emacs]]
- 位置跳转: better-jumper-jump-backward. 先按ctrl-o, 跳回之前的位置, 按TAB返回.
- [X] 各种注释相关操作: [[https://github.com/redguardtoo/evil-nerd-commenter][redguardtoo/evil-nerd-commenter: Comment/uncomment lines efficiently. Like Nerd Commenter in Vim]]
- [X] gd: 跳转到函数定义位置. 并不总是灵光.
- Ctrl-h b: 显示所有按键 which-key-show-keymap Ctrl-h b m

** TODO [2020-02-29 Sat] 改进literate rust编程体验
- [X] rust中"{|}" 中回车行为. 原来是spacemacs中有特别配置. [[https://emacs.stackexchange.com/questions/2837/automatically-formatting-brackets][stackexchange]]
- [X] Tab键自动使用yas展开代码. 禁用init.el中snippets.
- [X] 还原在normal/insert state下, Ctrl-k的行为: org-kill-line
- [X] rustic新加的功能虽多, 但用处都不大. 还是用rust-mode好了.
- [X] org-edit-src-exit: 不能定义为Ctrl-C Ctrl-C, 因为org-src里的主模式很多会用
  到这个键.
- [X] 全局禁有flyspell-mode
- [X] ctrl-d又不管用了, alt-l
- [X] evil-org: 在source code中的enter行为. 改为进入代码.
- [ ] visual state下Tab键应该indent代码
- [ ] use structopt::*中, 输出*会出现两个, 按/会出现两个.

** TODO [2020-02-28 Fri] 太多需要修改的地方了, 只能一点点改进, 慢慢搭
- [ ] 添加re-open当前文件功能?
- [X] dired-copy-filename-as-kill 复制文件路径, 可以 spc-m y
- [X] 将spc-o-T改成和spacemacs一样. vterm也就是图方便, 功能上还是不如gnome-terminal之类顺手.
- [X] [[https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/window-select/README.org][window-select]] 可以用C-w C-w, 比spacemacs下更方便.
- [X] 看来还是得用evil-org. 比如dd命令在hide状态下应该为 delete subtree
- [X] o: evil-org-open-below +org/insert-item-below, 可以用ctrl-enter, ctrl-shift-enter
- [X] (spacemacs/open-file-or-directory-in-external-app ARG)
- [X] insert-mode下 Ctrl-h 应为help
- [X] insert-mode: ctrl-d evil-shift-left
- [X] SPC-c l, comment line
- [X] 检查单词: z=, flyspell-correct-at-point (启用spell module即可)
- [X] flyspell错字提示 (可以手动关掉, flyspell-mode, SPC-t s)
- [X] insert-mode下 Ctrl-y 键应为粘贴
- [X] org-metaright, org-demote-subtree
- [X] helm-resume => SPC r l
- [X] deadgrep notes

** DONE [2020-03-02 Mon] 完成ripgrep搜索notes功能
CLOSED: [2020-03-02 Mon 14:49]
- State "DONE"       from              [2020-03-02 Mon 14:49]
需要修改ripgrep配置, 使之能follow symlinks. [[https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#configuration-file][ripgrep/GUIDE.md at master · BurntSushi/ripgrep]]

相关文件:
: ~/.ripgreprc
: ~/.zshrc

** DONE [2020-03-01 Sun] 关于ispell的问题
CLOSED: [2020-03-01 Sun 19:35]
- State "DONE"       from "TODO"       [2020-03-01 Sun 19:35]
以前常用 ispell-word 来查词, 现在发现得开启ispell-mode后才正常, 不然会报错.

** DONE [2020-02-28 Fri] 解决org-mode中怪异的Tab键行为问题
CLOSED: [2020-02-28 Fri 15:42]
- State "DONE"       from "TODO"       [2020-02-28 Fri 15:42]
- [[https://github.com/hlissner/doom-emacs/issues/1897][[BUG] org-mode TAB key mapped to different command when emacs running as daemon · Issue #1897 · hlissner/doom-emacs]]

去掉:config中的 +bindings 开关正常了.

** DONE [2020-02-28 Fri] 可用的主题
CLOSED: [2020-02-29 Sat 18:12]
- State "DONE"       from "TODO"       [2020-02-29 Sat 18:12]
[[*theme][theme]]
: doom-acario-light
: doom-material
: doom-moonlight
: doom-nord-light x
: doom-nord
: doom-oceanic-next
: doom-one-light x
: doom-opera-light x
: doom-palenight
: doom-peacock x
: doom-snazzy
: doom-tomorrow-day x
: doom-vibrant

** DONE [2020-02-27 Thu] 解决 org-mode 插入时间戳快捷键被占用的问题
CLOSED: [2020-02-28 Fri 15:42]
- State "DONE"       from "TODO"       [2020-02-28 Fri 15:42]
: C-c ! (org-time-stamp-inactive)

禁用:checkers组中的modules即可.

** TODO [2020-02-27 Thu] doom尝鲜
doom的优点:
1. 较spacemacs轻量, 启动快, 架构简单, 后续易维护
2. 和spacemacs使用类似的key-bindings
3. 社区质量高, 作者维护热情高

修改配置时注意:
1. 不要使用emacs中内置的custom机制
2. 不用使用use-package中的包安装机制(:ensure)
3. 不要使用org-babel中的rg-babel-do-load-languages机制

- config中的flags: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#flags][doom-emacs/getting_started.org at develop · hlissner/doom-emacs]]
- doom api: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#map][doom-emacs/api.org at develop · hlissner/doom-emacs]]

https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/rest/README.org

https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/zen/README.org

https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/workspaces/README.org

https://github.com/hlissner/doom-emacs/issues/2483

doom clean && doom sync && doom build

https://github.com/emacs-tw/awesome-emacs

git clone https://code.orgmode.org/bzg/org-mode.git

doom要clone很多github上的repo, 很容易被RESET, 导致安装失败.

git使用v2ray proxy
https://gist.github.com/evantoli/f8c23a37eb3558ab8765

https://segmentfault.com/q/1010000000118837


* 常用按键
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#map][doom-emacs/api: map!]]

** dired-jump
| SPC-f-j |

** org-edit-special
| C-c '   | hard to press |
| SPC-m ; |               |

** doom
spc h m d: doom-help-module

* Literate Programming in Rust
- 使用 "Ctrl-c Ctrl-d" 可以自动添加或删除dbg!
- 使用 "Ctrl-c Ctrl-f" rustfmt格式化buffer

* 配置安装
** stow配置管理思路
- tangle时仅导出到当目录下或子目录下, 方便git管理.
- stow再 "install" 到主目录下.

** 使用chemacs做emacs双启动
- 进入chemacsk目录, 执行install.sh即可.
- 修改 ~/.emacs-profiles.el

** 安装doom-emacs
- 进入doom-emacs目录, 执行:
  : bin/doom install

doom会根据~/.doom.d中的配置, 更新doom-emacs/.local目录中的内容. 如果doom-emacs目
录位置发生变化, 需要删除.local/straints/build目录, 再重建:
: doom-emacs/bin/doom build
* 调试步骤
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#testing-in-dooms-sandbox][doom-emacs/getting_started.org at develop · hlissner/doom-emacs]]

** How to extract a backtrace from an error
If you encounter an error while using Doom Emacs, you’re probably about to head
off and file a bug report (or request help on our Discord server). Before you
do, please generate a backtrace to include with it.

To do so you must enable debug-on-error then recreate the error.

** Enabling debug-on-error
There are three ways to enable debug-on-error:

Start Emacs with emacs --debug-init. Use this for errors that occur at startup.
Evil users can press SPC h d d and non-evil users can press C-h d d. If the
above don’t work, there’s always: M-x toggle-debug-on-error

Now that debug-on-error is on, recreate the error. A window should pop up with a
backtrace.


* install
** Makefile
使用gnu stow来将pkg目录下的文件安装symlink到$HOME下对应的目录

#+header: :tangle Makefile
#+BEGIN_SRC makefile -i
default: doom-sync

install: stow
	stow --verbose --adopt --no-folding --target ~/ pkg
uninstall:
	stow --verbose --target ~/ --delete pkg

# doom 相关操作
doom-sync: pkg/.doom.d/init.el pkg/.doom.d/packages.el	# 修改doom配置后执行
	doom-emacs/bin/doom sync
doom-build:											                        # 重建.local下build目录
	doom-emacs/bin/doom build
doom-clean:											                        # 清理过期的.elc文件
	doom-emacs/bin/doom clean
doom-upgrade:										                        # 升级doom及packages
	doom-emacs/bin/doom upgrade
start:
	emacs --with-profile doom
stow:
	which stow
#+END_SRC

** doom commands
#+begin_src text
  1. Whenever you edit your doom! block in ~/.doom.d/init.el or modify your
     modules, run:

       bin/doom refresh

     This will ensure all needed packages are installed, all orphaned packages are
     removed, and your autoloads files are up to date. This is important! If you
     forget to do this you will get errors!

  2. If something inexplicably goes wrong, try `bin/doom doctor`

     This will diagnose common issues with your environment and setup, and may
     give you clues about what is wrong.

  3. Use `bin/doom upgrade` to update Doom. Doing it any other way may require
     additional work. When in doubt, run `bin/doom sync`.

  4. Check out `bin/doom help` to see what else `bin/doom` can do (and it is
     recommended you add ~/.emacs.d/bin to your PATH).

  5. You can find Doom's documentation via `M-x doom/help` or `SPC h D`.
#+end_src

#+begin_src shell :tangle no
  ./doom-emacs/bin/doom clean
  ./doom-emacs/bin/doom refresh
#+end_src


* doom/config
共三个配置文件, tangle到pkg/.doom.d目录下, 再由stow软链到$HOME.
** init.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/init.el :comments nil
:END:
*** docs
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/modules.org][doom-emacs/modules.org at develop · hlissner/doom-emacs]]

*** modules
#+begin_src elisp
  ;;; init.el -*- lexical-binding: t; -*-

  ;; This file controls what Doom modules are enabled and what order they load in.
  ;; Remember to run 'doom sync' after modifying it!

  ;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
  ;;      documentation. There you'll find information about all of Doom's modules
  ;;      and what flags they support.

  ;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
  ;;      'C-c g k' for non-vim users) to view its documentation. This works on
  ;;      flags as well (those symbols that start with a plus).
  ;;
  ;;      Alternatively, press 'gd' (or 'C-c g d') on a module to browse its
  ;;      directory (for easy access to its source code).

  (doom! :input
         chinese
         ;;japanese

         :completion
         company           ; the ultimate code completion backend
         ;;helm              ; the *other* search engine for love and life
         ;;ido               ; the other *other* search engine...
         ivy               ; a search engine for love and life

         :ui
         ;;deft              ; notational velocity for Emacs
         doom              ; what makes DOOM look the way it does
         doom-dashboard    ; a nifty splash screen for Emacs
         ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
         ;;fill-column       ; a `fill-column' indicator
         hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
         ;;hydra
         ;;indent-guides     ; highlighted indent columns
         modeline          ; snazzy, Atom-inspired modeline, plus API
         nav-flash         ; blink the current line after jumping
         ;;neotree           ; a project drawer, like NERDTree for vim
         ;;ophints           ; highlight the region an operation acts on
         (popup            ; tame sudden yet inevitable temporary windows
          +all             ; catch all popups that start with an asterix
          +defaults)       ; default popup rules
         ;;pretty-code       ; replace bits of code with pretty symbols
         ;;tabs              ; an tab bar for Emacs
         ;;treemacs          ; a project drawer, like neotree but cooler
         ;;unicode           ; extended unicode support for various languages
         vc-gutter         ; vcs diff in the fringe
         vi-tilde-fringe   ; fringe tildes to mark beyond EOB
         window-select     ; visually switch windows
         workspaces        ; tab emulation, persistence & separate workspaces
         zen               ; distraction-free coding or writing

         :editor
         (evil +everywhere); come to the dark side, we have cookies
                                          ;(evil); come to the dark side, we have cookies
         ;file-templates    ; auto-snippets for empty files
         fold              ; (nigh) universal code folding
         ;;(format +onsave)  ; automated prettiness
         ;;god               ; run Emacs commands without modifier keys
         ;;lispy             ; vim for lisp, for people who don't like vim
         multiple-cursors  ; editing in many places at once
         ;;objed             ; text object editing for the innocent
         ;;parinfer          ; turn lisp into python, sort of
         rotate-text       ; cycle region at point between text candidates
         snippets          ; my elves. They type so I don't have to
         ;;word-wrap         ; soft wrapping with language-aware indent

         :emacs
         (dired +icons)             ; making dired pretty [functional]
         electric          ; smarter, keyword-based electric-indent
         ibuffer           ; interactive buffer management
         vc                ; version-control and Emacs, sitting in a tree

         :term
         ;;eshell            ; a consistent, cross-platform shell (WIP)
         ;;shell             ; a terminal REPL for Emacs
         ;;term              ; terminals in Emacs
         vterm             ; another terminals in Emacs

         :checkers
         ;;syntax              ; tasing you for every semicolon you forget
         spell             ; tasing you for misspelling mispelling
         ;;grammar           ; tasing grammar mistake every you make

         :tools
         ;;ansible
         ;;debugger          ; FIXME stepping through code, to help you add bugs
         ;;direnv
         ;;docker
         ;;editorconfig      ; let someone else argue about tabs vs spaces
         ;;ein               ; tame Jupyter notebooks with emacs
         (eval +overlay)     ; run code, run (also, repls)
         ;;gist              ; interacting with github gists
         (lookup           ; helps you navigate your code and documentation
          +docsets)        ; ...or in Dash docsets locally
         ;;lsp
         ;;macos             ; MacOS-specific commands
         magit             ; a git porcelain for Emacs
         ;;make              ; run make tasks from Emacs
         ;;pass              ; password manager for nerds
         pdf               ; pdf enhancements
         ;;prodigy           ; FIXME managing external services & code builders
         ;;rgb               ; creating color strings
         ;;terraform         ; infrastructure as code
         tmux              ; an API for interacting with tmux
         ;;upload            ; map local to remote projects via ssh/ftp

         :lang
         ;;agda              ; types of types of types of types...
         ;;assembly          ; assembly for fun or debugging
         ;;cc                ; C/C++/Obj-C madness
         ;;clojure           ; java with a lisp
         ;;common-lisp       ; if you've seen one lisp, you've seen them all
         ;;coq               ; proofs-as-programs
         ;;crystal           ; ruby at the speed of c
         ;;csharp            ; unity, .NET, and mono shenanigans
         data              ; config/data formats
         ;;elixir            ; erlang done right
         ;;elm               ; care for a cup of TEA?
         emacs-lisp        ; drown in parentheses
         ;;erlang            ; an elegant language for a more civilized age
         ;;ess               ; emacs speaks statistics
         ;;faust             ; dsp, but you get to keep your soul
         ;;fsharp           ; ML stands for Microsoft's Language
         ;;fstar             ; (dependent) types and (monadic) effects and Z3
         ;;go                ; the hipster dialect
         ;;(haskell +dante)  ; a language that's lazier than I am
         ;;hy                ; readability of scheme w/ speed of python
         ;;idris             ;
         ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
         ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
         ;;julia             ; a better, faster MATLAB
         ;;kotlin            ; a better, slicker Java(Script)
         ;;latex             ; writing papers in Emacs has never been so fun
         ;;lean
         ;;factor
         ;;ledger            ; an accounting system in Emacs
         ;;lua               ; one-based indices? one-based indices
         markdown          ; writing docs for people to ignore
         ;;nim               ; python + lisp at the speed of c
         ;;nix               ; I hereby declare "nix geht mehr!"
         ;;ocaml             ; an objective camel
         ;;perl              ; write code no one else can comprehend
         ;;php               ; perl's insecure younger brother
         ;;plantuml          ; diagrams for confusing people more
         ;;purescript        ; javascript, but functional
         python            ; beautiful is better than ugly
         ;;qt                ; the 'cutest' gui framework ever
         ;;racket            ; a DSL for DSLs
         ;;rest              ; Emacs as a REST client
         ;;rst               ; ReST in peace
         ;;ruby              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
         rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
         ;;scala             ; java, but good
         ;;scheme            ; a fully conniving family of lisps
         sh                ; she sells {ba,z,fi}sh shells on the C xor
         ;;solidity          ; do you need a blockchain? No.
         ;;swift             ; who asked for emoji variables?
         ;;terra             ; Earth and Moon in alignment for performance.
         ;;web               ; the tubes
         org

         :email
         ;;(mu4e +gmail)
         ;;notmuch
         ;;(wanderlust +gmail)

         :app
         ;;calendar
         ;;irc               ; how neckbeards socialize
         ;;(rss +org)        ; emacs as an RSS reader
         ;;twitter           ; twitter client https://twitter.com/vnought

         :gwp                ; 自定义模块
         org

         :config
         ;;literate
         ;;(default +bindings +smartparens)
         (default +smartparents)
         )
#+end_src

** config.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/config.el
:END:
*** orign
#+BEGIN_SRC emacs-lisp
  ;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

  ;; Place your private configuration here! Remember, you do not need to run 'doom
  ;; sync' after modifying this file!


  ;; Some functionality uses this to identify you, e.g. GPG configuration, email
  ;; clients, file templates and snippets.
  (setq user-full-name "Wenping Guo"
        user-mail-address "ybyygu@gmail.com")

  ;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
  ;; are the three important ones:
  ;;
  ;; + `doom-font'
  ;; + `doom-variable-pitch-font'
  ;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
  ;;   presentations or streaming.
  ;;
  ;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
  ;; font string. You generally only need these two:
  (setq doom-font (font-spec :family "Monaco" :size 14))

  ;; This determines the style of line numbers in effect. If set to `nil', line
  ;; numbers are disabled. For relative line numbers, set this to `relative'.
  (setq display-line-numbers-type t)

  ;; Here are some additional functions/macros that could help you configure Doom:
  ;;
  ;; - `load!' for loading external *.el files relative to this one
  ;; - `use-package' for configuring packages
  ;; - `after!' for running code after a package has loaded
  ;; - `add-load-path!' for adding directories to the `load-path', relative to
  ;;   this file. Emacs searches the `load-path' when you load packages with
  ;;   `require' or `use-package'.
  ;; - `map!' for binding new keys
  ;;
  ;; To get information about any of these functions/macros, move the cursor over
  ;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
  ;; This will open documentation for it, including demos of how they are used.
  ;;
  ;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
  ;; they are implemented.
#+END_SRC

*** 字符编辑
默认evil的undo会将多个小操作合并为一个大的, undo时很不适应.
#+begin_src emacs-lisp
  (setq evil-want-fine-undo t)
#+end_src

*** 界面设置
**** ui
#+begin_src emacs-lisp :tangle no
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (global-font-lock-mode t)

  ;; force a syntax-highlighting refresh
  (global-set-key (kbd "<f5> <f5>") 'font-lock-fontify-buffer)
  (auto-image-file-mode t)              ; View images inside Emacs

  ;; set line space wider than default
  (setq-default line-spacing 4)

  ;; 修改 frame 标题 方便 gnome-shell 桌面切换
  (setq frame-title-format '("" "%b: " buffer-file-name))
#+end_src

**** chinese fonts setup
#+begin_src elisp
  (use-package! cnfonts
    :config
    (progn
      (setq cnfonts-profiles
            '("program" "org-mode" "read-book"))
      (setq cnfonts-use-face-font-rescale t)
      )
    (cnfonts-enable)
    )
#+end_src

**** theme
#+begin_src elisp
  ;; There are two ways to load a theme. Both assume the theme is installed and
  ;; available. You can either set `doom-theme' or manually load a theme with the
  ;; `load-theme' function. This is the default:
  ;;(setq doom-theme 'doom-acario-light)
  ;; (setq doom-theme 'doom-one)
  (load-theme 'material t)
#+end_src

**** window
自动放大当前窗口. 注意, 这类工具通过和doom的popup window有冲突. 需要的时候用zoom
命令手动开启.

对应命令: SPC-w z
#+begin_src emacs-lisp
  (use-package! zoom
                ;; :after-call pre-command-hook
                :config
                (custom-set-variables
                 '(zoom-size '(0.618 . 0.618)))
                (map! :map evil-window-map
                      "z" #'zoom)
                )
#+end_src

用avy在多个窗口下跳转也很方便.
#+BEGIN_SRC elisp
  (use-package! avy
                :config
                (setq avy-all-windows t)
                )
#+END_SRC

打开doom popup窗口, 默认仅在normal state下可用.
#+begin_src emacs-lisp
  (map! :i "C-`" #'+popup/toggle)
#+end_src


golden-ratio有点问题
https://github.com/hlissner/doom-emacs/issues/2225
#+begin_src elisp :tangle no
  (use-package! golden-ratio
                :after-call pre-command-hook
                :config
                (golden-ratio-mode +1)
                ;; Using this hook for resizing windows is less precise than
                ;; `doom-switch-window-hook'.
                (remove-hook 'window-configuration-change-hook #'golden-ratio)
                (add-hook 'doom-switch-window-hook #'golden-ratio))
#+end_src
**** line number
默认不显示行号
#+begin_src emacs-lisp
  (setq display-line-numbers-type nil)
#+end_src
*** dired hacks
用于在dired中复制当前文件的全路径.
#+begin_src emacs-lisp
  (defun gwp/dired-copy-file-path()
    (interactive)
    (let ((current-prefix-arg '(0)))
      (call-interactively 'dired-copy-filename-as-kill)
      )
    )

  (map! :map dired-mode-map
        :localleader
        :n "y" #'gwp/dired-copy-file-path
        )
#+end_src

*** org
#+begin_src emacs-lisp
  ;; If you use `org' and don't want your org files in the default location below,
  ;; change `org-directory'. It must be set before org loads!
  (setq org-directory "~/Notes/")

  ;; treat .note files as org-mode
  (add-to-list 'auto-mode-alist '("\\.note\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("NOTE" . org-mode))

  (after! org (load! "org"))
#+end_src

*** open-file-externally
从spacemacs中改过来的
#+begin_src emacs-lisp
  (defun spacemacs/open-in-external-app (file-path)
    "Open `file-path' in external application."
    (let ((process-connection-type nil))
      (start-process "" nil "xdg-open" file-path)
      )
     )

  (defun spacemacs/open-file-or-directory-in-external-app (arg)
    "Open current file in external application.
  If the universal prefix argument is used then open the folder
  containing the current file by the default explorer."
    (interactive "P")
    (if arg
        (spacemacs/open-in-external-app (expand-file-name default-directory))
      (let ((file-path (if (derived-mode-p 'dired-mode)
                           (dired-get-file-for-visit)
                         buffer-file-name)))
        (if file-path
            (spacemacs/open-in-external-app file-path)
          (message "No file associated to this buffer.")))
      )
    )
#+end_src

*** open in terminal
emacs版的 "Open in Terminal": 在gnome-terminal中打开当前目录.

#+begin_src emacs-lisp
  (defun gwp/open-in-gnome-terminal (the-directory)
    "Open `the-directory' in external gnome-terminal."
    (let ((process-connection-type nil))
      ;; (start-process "" nil "gnome-terminal" (concat "--working-directory=" the-directory))
      (start-process "" nil "alacritty" (concat "--working-directory=" the-directory) "-e" "tmux")
      )
    )

  (defun gwp/open-terminal-here ()
    "Open the current dir in a new terminal window"
    (interactive)
    (let ((default-directory (or (and (eq major-mode 'dired-mode)
                                      (dired-current-directory))
                                 default-directory)))
      (gwp/open-in-gnome-terminal (expand-file-name default-directory))
      )
    )
#+end_src

*** deadgrep
search org note files
#+begin_src emacs-lisp
  ;;;###autoload
  (defun gwp/search-all-notes (arg)
    "search all notes in ~/.cache/notes"
    (interactive "P")

    (let ((default-directory "~/.cache/notes"))
      (call-interactively '+ivy/project-search-from-cwd)
      )
    )
#+end_src

deadgrep与doom有冲突, 不能用了.
#+begin_src emacs-lisp :tangle no
  (defun gwp/return-default-notes-dir ()
    "~/.cache/notes"
    )
  (use-package! deadgrep
                :config
                (setq deadgrep-project-root-function #'gwp/return-default-notes-dir)
                )
#+end_src

*** rust
解决花括号中 "{|}" 中换行行为, 与spacemacs保持一致.
- https://emacs.stackexchange.com/questions/2837/automatically-formatting-brackets
#+begin_src emacs-lisp
  (after! smartparens
          (sp-local-pair 'rust-mode "{" nil :post-handlers '(:add ("||\n[i]" "RET"))))
#+end_src

*** magit
spacemacs中的习惯, 加回来, 避免忙中出错
#+begin_src elisp
  (after! magit
          (map! :map doom-leader-git-map "s" #'magit-status)
          )
#+end_src

*** 中文问题相关 [[https://github.com/hick/emacs-chinese][URL]]
#+begin_src emacs-lisp :tangle no
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (global-font-lock-mode t)

  ;; force a syntax-highlighting refresh
  (global-set-key (kbd "<f5> <f5>") 'font-lock-fontify-buffer)

  (auto-image-file-mode t)              ; View images inside Emacs

  ;; set line space wider than default
  (setq-default line-spacing 4)

  ;; 修改 frame 标题 方便 gnome-shell 桌面切换
  (setq frame-title-format '("" "%b: " buffer-file-name))
#+end_src

*** 常用按键
[[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#map][map!用法]]

#+begin_src elisp
  (map! :nvim "C-a" nil)
  ;; 禁用evil中的ctrl-e, 默认为向上滚动, 不太习惯.
  (map! :nvim "C-e" nil)
  (map! :nvim "C-d" nil)
  (map! :nvim "C-k" nil)
  (map! :nvim "C-n" nil)
  (map! :nvim "C-p" nil)

  ;; evil默认为quoted-insert, 可以 ctrl-q代替
  (map! :i "C-v" #'yank)
  (map! :i "C-y" nil)

  ;; evil里也得设置, 不然无效
  (after! evil-org
          (map! :map evil-org-mode-map
                :nivm "C-d" nil
                :nivm "C-k" nil
                :i "M-l" nil
                )
          )
#+end_src

默认config module中的+bindings flag有问题, 导至org-mode中TAB键异常. 这里摘取其中
重要代码. 载入doom中的默认按键绑定: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#load][load!用法]]
#+begin_src elisp
  ;; Make M-x harder to miss
  (define-key! 'override
    "M-x" #'execute-extended-command
    "A-x" #'execute-extended-command)

  ;; A Doom convention where C-s on popups and interactive searches will invoke
  ;; ivy/helm for their superior filtering.
  (define-key! :keymaps +default-minibuffer-maps
    "C-s" (if (featurep! :completion ivy)
              #'counsel-minibuffer-history
            #'helm-minibuffer-history))

  ;; Smarter C-a/C-e for both Emacs and Evil. C-a will jump to indentation.
  ;; Pressing it again will send you to the true bol. Same goes for C-e, except
  ;; it will ignore comments+trailing whitespace before jumping to eol.
  (map! :gi "C-a" #'doom/backward-to-bol-or-indent
        :gi "C-e" #'doom/forward-to-last-non-comment-or-eol
        ;; Standardizes the behavior of modified RET to match the behavior of
        ;; other editors, particularly Atom, textedit, textmate, and vscode, in
        ;; which ctrl+RET will add a new "item" below the current one
        :gn [C-return]    #'+default/newline-below
        :gn [C-S-return]  #'+default/newline-above
        )

  (load! "bindings")
#+end_src

** packages.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/packages.el :comments nil
:END:
*** orig
#+begin_src elisp
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here, run 'doom sync' on
;; the command line, then restart Emacs for the changes to take effect.
;; Alternatively, use M-x doom/reload.
;;
;; WARNING: Disabling core packages listed in ~/.emacs.d/core/packages.el may
;; have nasty side-effects and is not recommended.


;; All of Doom's packages are pinned to a specific commit, and updated from
;; release to release. To un-pin all packages and live on the edge, do:
;(unpin! t)

;; ...but to unpin a single package:
;(unpin! pinned-package)
;; Use it to unpin multiple packages
;(unpin! pinned-package another-pinned-package)


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a particular repo, you'll need to specify
;; a `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, for whatever reason,
;; you can do so here with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))
#+end_src

*** 需要安装的包
- chfonts: 中文显示
- golden-ratio: 自动放大当前window
- 修改版material-theme
  - 改小org-heading字体的scaling系数
  - 调整TODO, DONE的调色, 别那么刺眼

#+begin_src elisp
  (package! cnfonts)
  (package! berrys-theme)
  ;; (package! material-theme)
  (package! material-theme
            :recipe (:host github :repo "ybyygu/emacs-material-theme"))
#+end_src

- 窗口大小自动调整:
#+begin_src emacs-lisp
  (package! golden-ratio)
  (package! zoom)
#+end_src

org-download, 主要用于截图
#+begin_src emacs-lisp
  (package! org-download)
#+end_src

- 使用deadgrep搜索 .note 笔记
- 与doom的popup有冲突, 不能用
#+begin_src emacs-lisp :tangle no
  (package! deadgrep
            :recipe (:host github :repo "ybyygu/deadgrep"))
#+end_src


*** 需要禁用的包
pangu-spacing 自动给中英文字加空格, 这严重影响响应速度.
org-bullets由于字体原因, 显示不佳.

#+begin_src elisp
  (disable-packages! org-bullets pangu-spacing)
#+end_src

- TAB自动补全很可怕, 无意按键, 补出很多没用的东西, 禁用自带的模板.
#+begin_src emacs-lisp
  (package! doom-snippets :ignore t)
#+end_src

* org.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/org.el
:END:
** docs
这里放org配置相关的内容, 在config.el中以load!宏来加载.

** 基本设置
#+begin_src elisp
  (setq org-blank-before-new-entry nil)
  (setq org-default-notes-file (concat org-directory "/life.note"))

  ;; 保留以前的 Alt-Return 键行为, Alt-Return
  (org-defkey org-mode-map [(meta return)] 'org-meta-return)

  ;; doom 默认 src 中不保留缩进.
  (setq org-src-preserve-indentation nil)

  ;; 禁用字词检查, 需要了再开
  (remove-hook! 'org-mode-hook #'flyspell-mode)
  (flyspell-mode 0)
#+end_src

** 按键行为
#+begin_src elisp
  (defun gwp/new-memo (arg)
    "Insert a new org-mode memo entry under heading at point."

    (interactive "P")

    (call-interactively 'evil-open-below)
    (insert "** ")
    (call-interactively 'org-time-stamp-inactive)
    (insert " ")
    )

  ;; 经常按错这个键, 禁用之 (Ctrl-c ;)
  (put 'org-toggle-comment 'disabled t)

  (map! :map org-mode-map
        :n "gh" #'org-up-element
        :n "gl" #'org-down-element ; doom中默认为: evil-lion-left
        :n "gk" #'org-previous-visible-heading
        :n "gj" #'org-next-visible-heading
        :n "M-l" #'org-metaright   ; doom中默认为 demote-subtree
        :n "M-h" #'org-metaleft    ; doom中默认为 promote-subtree
        )

  (map! :map org-mode-map
        :localleader
        ;; FIXME: 与doom/org定义有冲突
        (:prefix ("s" . "Subtree")
                 :desc "Demote" "l" #'org-demote-subtree
                 :desc "Promote" "h" #'org-promote-subtree
                 :desc "Archive" "A" #'org-archive-subtree
                 :desc "Narrow" "n" #'org-toggle-narrow-to-subtree
                 )
        (:prefix ("SPC" . "Special")
                 :desc "org-ctrl-c-star" "s" #'org-ctrl-c-star ; 方便盲按
                 :desc "Insert new memo entry" "m" #'gwp/new-memo ; 简化操作
                 )
        )
  (map! :map org-mode-map
        :localleader
        (:prefix ("g" . "Goto")
                 :desc "Goto the previous position"  "p" #'org-mark-ring-goto
                 :desc "Jump to org heading"  "j" #'counsel-org-goto
                 :desc "Goto named src block" "b" #'org-babel-goto-named-src-block
                 )
        )
#+end_src

** dwim-at-point
从doom中的org module中摘出来, 略作修改.
#+begin_src emacs-lisp
  (defun gwp/dwim-at-point ()
    "Do-what-I-mean at point.

  If on a:
  - checkbox list item or todo heading: toggle it.
  - clock: update its time.
  - headline: toggle latex fragments and inline images underneath.
  - footnote reference: jump to the footnote's definition
  - footnote definition: jump to the first reference of this footnote
  - table-row or a TBLFM: recalculate the table's formulas
  - table-cell: clear it and go into insert mode. If this is a formula cell,
    recaluclate it instead.
  - babel-call: 改为编辑代码, edit-special
  - statistics-cookie: update it.
  - latex fragment: toggle it.
  - link: follow it
  - otherwise, refresh all inline images in current tree."
    (interactive)
    (let* ((context (org-element-context))
           (type (org-element-type context)))
      ;; skip over unimportant contexts
      (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
        (setq context (org-element-property :parent context)
              type (org-element-type context)))
      (pcase type
        (`headline
         (cond ((and (fboundp 'toc-org-insert-toc)
                     (member "TOC" (org-get-tags)))
                (toc-org-insert-toc)
                (message "Updating table of contents"))
               ((string= "ARCHIVE" (car-safe (org-get-tags)))
                (org-force-cycle-archived))
               ((or (org-element-property :todo-type context)
                    (org-element-property :scheduled context))
                (org-todo
                 (if (eq (org-element-property :todo-type context) 'done)
                     (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))
                         'todo)
                   'done)))
               (t
                (+org--refresh-inline-images-in-subtree)
                (org-clear-latex-preview)
                (org-latex-preview '(4)))))

        (`clock (org-clock-update-time-maybe))

        (`footnote-reference
         (org-footnote-goto-definition (org-element-property :label context)))

        (`footnote-definition
         (org-footnote-goto-previous-reference (org-element-property :label context)))

        ((or `planning `timestamp)
         (org-follow-timestamp-link))

        ((or `table `table-row)
         (if (org-at-TBLFM-p)
             (org-table-calc-current-TBLFM)
           (ignore-errors
             (save-excursion
               (goto-char (org-element-property :contents-begin context))
               (org-call-with-arg 'org-table-recalculate (or arg t))))))

        (`table-cell
         (org-table-blank-field)
         (org-table-recalculate)
         (when (and (string-empty-p (string-trim (org-table-get-field)))
                    (bound-and-true-p evil-local-mode))
           (evil-change-state 'insert)))

        (`babel-call
         (org-babel-lob-execute-maybe))

        (`statistics-cookie
         (save-excursion (org-update-statistics-cookies nil)))

        ((or `src-block `inline-src-block)
         ;; 还是挺方便的
         (org-edit-special))

        ((or `latex-fragment `latex-environment)
         (org-latex-preview))

        (`link
         (let* ((lineage (org-element-lineage context '(link) t))
                (path (org-element-property :path lineage)))
           (if (or (equal (org-element-property :type lineage) "img")
                   (and path (image-type-from-file-name path)))
               (+org--refresh-inline-images-in-subtree)
             (org-open-at-point))))

        ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
         (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
           (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

        (_ (+org--refresh-inline-images-in-subtree)))))
#+end_src

** screenshot
目前最佳方案: 使用org-download来实现屏幕截图的功能
- 在firefox或deepin-screenshot等截图后复制到X11剪贴板.
- 使用org-screenshot-dwim.sh为org-download的截图工具, 将剪贴板里的图片下载到
  org-download指定的临时文件.
- 调用org-download-screenshot完成后续操作.
  - 图片自动保存到org attachment目录
  - 自动添加图片显示参数, 设定在org中显示的大小
  - 可以使用org-download-delete来删除当前image

目前的问题 ([2020-03-06 Fri])
- 第二次执行截图时, 如果clipboard无图, emacs会挂住, 原因不明, 现在无解.

#+begin_src emacs-lisp
  (defun gwp/org-image-attributes-default (&optional caption)
    "default image attributes: caption, name label, width ..."
      "Annotate LINK with the time of download."
      (format (concat
               (format "#+DOWNLOADED: %s @ %s\n"
                       (if (equal link org-download-screenshot-file)
                           "screenshot"
                         link)
                       (format-time-string "%Y-%m-%d %H:%M:%S"))
               (concat  "#+caption: " (read-string "Caption: " caption) "\n")
               ;; set unique figure name
               (format "#+name: fig:%s\n" (substring (org-id-new) 0 8))
               ;; unit in px; for displaying in org-mode
               "#+attr_org: :width 800\n"
               ;; unit in cm; for exporting as odt
               "#+attr_odt: :width 10\n"
               )
              )

    )

  (defun gwp/org-insert-image-attributes (&optional caption)
    "insert image attributes such as caption and labels"
    (interactive)
    (insert (gwp/org-image-attributes-default caption))
    )

  (defun gwp/org-download-annotate (link)
    "Annotate LINK with the time of download."
    (gwp/org-image-attributes-default)
    )

  (use-package! org-download
                :commands
                org-download-delete
                org-download-yank
                org-download-screenshot
                :config
                (progn
                  (setq org-download-method 'attach
                        org-download-annotate-function 'gwp/org-download-annotate
                        ;; org-download-image-html-width 900 ; in px
                        ;; org-download-image-latex-width 16 ; in cm
                        org-download-screenshot-method
                        (cond ((executable-find "txclip")  "txclip paste --image -o %s")
                              ((executable-find "deepin-screenshot")  "deepin-screenshot -s %s")
                              ((executable-find "scrot") "scrot -s %s"))
                        )))
#+end_src

** org-babel
*** init
几个重要的header args:
#+begin_src emacs-lisp
  ;; helper functions for literate programming
  ;; taking from: https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.org
  (defun help/set-org-babel-default-header-args (property value)
    "Easily set system header arguments in org mode.

  PROPERTY is the system-wide value that you would like to modify.

  VALUE is the new value you wish to store.

  Attribution: URL `http://orgmode.org/manual/System_002dwide-header-arguments.html#System_002dwide-header-arguments'"
    (setq org-babel-default-header-args
          (cons (cons property value)
                (assq-delete-all property org-babel-default-header-args))))

  (help/set-org-babel-default-header-args :padline "yes")
  (help/set-org-babel-default-header-args :mkdirp "yes")
  (help/set-org-babel-default-header-args :comments "link")
#+end_src

*** enter
#+begin_src emacs-lisp
  ;; 禁用代码着色, 影响速度
  (setq org-src-fontify-natively nil)

  ;; 编辑代码时在下方新开窗口
  ;;(setq org-src-window-setup 'split-window-below)
  (setq org-src-window-setup 'current-window)
  ;;(setq org-src-window-setup 'reorganize-frame)
  ;;(setq org-src-window-setup 'other-frame)

  ;; 进入代码编辑模式, 改成容易按的
  (map! :map org-mode-map
        :ni "C-c ;" #'org-edit-special
        :ni "C-c C-;" #'org-edit-special
        :localleader ";" #'org-edit-special
        )
#+end_src

*** edit
#+begin_src emacs-lisp
  ;; 用于激活 localleader
  (add-hook 'org-src-mode-hook #'evil-normalize-keymaps)

  ;; 默认的不太好按. 不能用C-c C-c, 容易与别的模块冲突.
  (map! :map org-src-mode-map
        "C-c ;"   #'org-edit-src-exit  ; 保存退出
        "C-c C-;" #'org-edit-src-exit  ; 保存退出
        "C-c C-k" #'org-edit-src-abort ; 放弃修改
        )
  (map! :map org-src-mode-map
        :localleader
        ";" #'org-edit-src-exit
        "c" #'org-edit-src-exit
        "k" #'org-edit-src-abort
        )
  (map! :map rust-mode-map
        :localleader
        "=" #'rust-format-buffer
        )
#+end_src

*** tangle
注意: tangle-subtree时得注意, 可能会以部分内容覆盖总文件.
#+begin_src elisp
  (map! :map org-mode-map
        :localleader
        (:prefix ("b" . "org-babel")
          :desc "insert header argument" "i" #'org-babel-insert-header-arg
          :desc "tangle blocks at point" "b" #'gwp/org-babel-tangle-blocks
          :desc "tangle blocks in subtree" "t" #'gwp/org-tangle-subtree
          :desc "tangle blocks in buffer" "T" #'org-babel-tangle
          )
        ;; 为了顺应spacemacs中的设置, 保留spc-ob 按键
        :leader
        :desc "tangle blocks at point" "o b" #'gwp/org-babel-tangle-blocks
        )

  ;; tangle blocks for current file at point
  ;; http://stackoverflow.com/questions/28727190/org-babel-tangle-only-one-code-block
  ;; call org-babel-tangle with C-u C-u
  (defun gwp/org-babel-tangle-blocks()
    (interactive)
    (let ((current-prefix-arg '(16)))
      (call-interactively 'org-babel-tangle)
      )
    )

  ;; narrow to subtree before calling org-babel-tangle
  (defun gwp/org-tangle-subtree ()
    "tange src blocks in current subtree"
    (interactive)
    (org-narrow-to-subtree)
    (org-babel-tangle)
    (widen)
    )
#+end_src

如何在代码编辑窗口中tangle? 下面的代码不太可靠, 禁用
#+begin_src elisp :tangle no
  (defun gwp/org-edit-save-and-tangle ()
    "when in a sub-editing buffer, swith to the parent buffer and tangle the file blocks"
    (interactive)
    (when (buffer-modified-p) (org-edit-src-save))
    (org-edit-src-exit)
    (call-interactively 'gwp/org-babel-tangle-blocks)
    (org-edit-src-code)
    )

  (defun gwp/org-babel-tangle-dwim()
    "tangle current file blocks whenever in a sub-editing buffer or not"
    (interactive)
    (if (org-src-edit-buffer-p) (call-interactively 'gwp/org-edit-save-and-tangle)
      (call-interactively 'gwp/org-babel-tangle-blocks)
      )
    )
#+end_src


* bindings.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/bindings.el :comments nil
:END:
** docs
从doom config module中取出, 禁用Tab键相关设置, 修复按键Bug.

此文件在config.el中使用load!宏来加载

: /home/ybyygu/Workspace/Programming/emacs/doom-emacs/modules/config/default/packages.el

** new/template
#+begin_src emacs-lisp :tangle no
  (map! :leader
      )
#+end_src

** header
#+begin_src emacs-lisp
  ;;; config/default/+bindings.el -*- lexical-binding: t; -*-
  ;;
  ;;; Global keybindings
  ;;
#+end_src

** leader/main
#+begin_src elisp
  (map! :leader
        :desc "Eval expression"       ";"    #'pp-eval-expression
        :desc "M-x"                   ":"    #'execute-extended-command
        :desc "Pop up scratch buffer" "x"    #'doom/open-scratch-buffer
        :desc "Org Capture"           "X"    #'org-capture

        ;; C-u is used by evil
        :desc "Universal argument"    "u"    #'universal-argument
        :desc "window"                "w"    evil-window-map
        :desc "help"                  "h"    help-map

        (:when (featurep! :ui popup)
          :desc "Toggle last popup"     "~"    #'+popup/toggle)
        :desc "Find file"             "."    #'find-file

        :desc "Switch buffer"         ","    #'switch-to-buffer
        (:when (featurep! :ui workspaces)
          :desc "Switch workspace buffer" "," #'persp-switch-to-buffer
          :desc "Switch buffer"           "<" #'switch-to-buffer)

        :desc "Switch to last buffer" "`"    #'evil-switch-to-windows-last-buffer

        :desc "Search for symbol in project" "*" #'+default/search-project-for-symbol-at-point

        :desc "Find file in project"  "SPC"  #'projectile-find-file
        :desc "Jump to bookmark"      "RET"  #'bookmark-jump
        )
#+end_src

** leader/workspace
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> l --- workspace
        (:when (featurep! :ui workspaces)
          (:prefix-map ("l" . "workspace")
            :desc "Load workspace from file"  "l"   #'+workspace/load
            :desc "Save workspace to file"    "s"   #'+workspace/save
            :desc "Delete this workspace"     "d"   #'+workspace/delete
            :desc "Next workspace"            "n"   #'+workspace/switch-right
            :desc "Previous workspace"        "p"   #'+workspace/switch-left
            :desc "Switch to last workspace"  "b"   #'+workspace/other
            :desc "Display tab bar"           "."   #'+workspace/display
            :desc "Switch workspace"          "TAB" #'+workspace/switch-to
            :desc "New workspace"             "N"   #'+workspace/new
            :desc "Delete session"            "x"   #'+workspace/kill-session
            :desc "Rename workspace"          "r"   #'+workspace/rename
            :desc "Restore last session"      "R"   #'+workspace/restore-last-session
            :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
            :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
            :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
            :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
            ))
        )
#+end_src

** leader/notes
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> n --- notes
        (:prefix-map ("n" . "notes")
          :desc "Search notes for symbol"      "*" #'+default/search-notes-for-symbol-at-point
          :desc "Org agenda"                   "a" #'org-agenda
          :desc "Toggle org-clock"             "c" #'+org/toggle-clock
          :desc "Cancel org-clock"             "C" #'org-clock-cancel
          :desc "Open deft"                    "d" #'deft
          :desc "Find file in notes"           "f" #'+default/find-in-notes
          :desc "Browse notes"                 "F" #'+default/browse-notes
          :desc "Org store link"               "l" #'org-store-link
          :desc "Tags search"                  "m" #'org-tags-view
          :desc "Org capture"                  "n" #'org-capture
          :desc "Active org-clock"             "o" #'org-clock-goto
          :desc "Todo list"                    "t" #'org-todo-list
          ;; :desc "Search notes"                 "s" #'+default/org-notes-search
          :desc "Search all notes"             "s" #'gwp/search-all-notes
          :desc "Search org agenda headlines"  "S" #'+default/org-notes-headlines
          :desc "View search"                  "v" #'org-search-view
          :desc "Org export to clipboard"        "y" #'+org/export-to-clipboard
          :desc "Org export to clipboard as RTF" "Y" #'+org/export-to-clipboard-as-rich-text

          (:when (featurep! :lang org +journal)
            (:prefix ("j" . "journal")
              :desc "New Entry"      "j" #'org-journal-new-entry
              :desc "Search Forever" "s" #'org-journal-search-forever)))
        )
#+end_src

** leader/buffer
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> b --- buffer
        (:prefix-map ("b" . "buffer")
          :desc "Toggle narrowing"            "-"   #'doom/toggle-narrow-buffer
          :desc "Previous buffer"             "["   #'previous-buffer
          :desc "Next buffer"                 "]"   #'next-buffer
          (:when (featurep! :ui workspaces)
            :desc "Switch workspace buffer" "b" #'persp-switch-to-buffer
            :desc "Switch buffer"           "B" #'switch-to-buffer)
          (:unless (featurep! :ui workspaces)
            :desc "Switch buffer"           "b" #'switch-to-buffer)
          :desc "Kill buffer"                 "d"   #'kill-current-buffer
          :desc "ibuffer"                     "i"   #'ibuffer
          :desc "Kill buffer"                 "k"   #'kill-current-buffer
          :desc "Kill all buffers"            "K"   #'doom/kill-all-buffers
          :desc "Switch to last buffer"       "l"   #'evil-switch-to-windows-last-buffer
          :desc "Set bookmark"                "m"   #'bookmark-set
          :desc "Delete bookmark"             "M"   #'bookmark-delete
          :desc "Next buffer"                 "n"   #'next-buffer
          :desc "New empty buffer"            "N"   #'evil-buffer-new
          :desc "Kill other buffers"          "O"   #'doom/kill-other-buffers
          :desc "Previous buffer"             "p"   #'previous-buffer
          :desc "Revert buffer"               "r"   #'revert-buffer
          :desc "Save buffer"                 "s"   #'basic-save-buffer
          :desc "Save all buffers"            "S"   #'evil-write-all
          :desc "Save buffer as root"         "u"   #'doom/sudo-save-buffer
          :desc "Pop up scratch buffer"       "x"   #'doom/open-scratch-buffer
          :desc "Switch to scratch buffer"    "X"   #'doom/switch-to-scratch-buffer
          :desc "Bury buffer"                 "z"   #'bury-buffer
          :desc "Kill buried buffers"         "Z"   #'doom/kill-buried-buffers)
      )
#+end_src

** leader/code
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> c --- code
        (:prefix-map ("c" . "code")
          :desc "indent region"                         "TAB" #'indent-region
          :desc "indent region"                         [tab] #'indent-region
          :desc "LSP Execute code action"               "a"   #'lsp-execute-code-action
          :desc "Compile"                               "c"   #'compile
          :desc "Recompile"                             "C"   #'recompile
          :desc "Jump to definition"                    "d"   #'+lookup/definition
          :desc "Jump to references"                    "D"   #'+lookup/references
          :desc "Evaluate buffer/region"                "e"   #'+eval/buffer-or-region
          :desc "Evaluate & replace region"             "E"   #'+eval:replace-region
          :desc "Format buffer/region"                  "f"   #'+format/region-or-buffer
          :desc "Comment or uncomment lines"            "l"   #'evilnc-comment-or-uncomment-lines
          :desc "复制并注释"                              "y"   #'evilnc-copy-and-comment-lines
          :desc "LSP Format buffer/region"              "F"   #'+default/lsp-format-region-or-buffer
          :desc "LSP Organize imports"                  "i"   #'lsp-organize-imports
          (:when (featurep! :completion ivy)
            :desc "Jump to symbol in current workspace" "j"   #'lsp-ivy-workspace-symbol
            :desc "Jump to symbol in any workspace"     "J"   #'lsp-ivy-global-workspace-symbol)
          (:when (featurep! :completion helm)
            :desc "Jump to symbol in current workspace" "j"   #'helm-lsp-workspace-symbol
            :desc "Jump to symbol in any workspace"     "J"   #'helm-lsp-global-workspace-symbol)
          :desc "Jump to documentation"                 "k"   #'+lookup/documentation
          :desc "LSP Rename"                            "r"   #'lsp-rename
          :desc "Send to repl"                          "s"   #'+eval/send-region-to-repl
          :desc "Delete trailing whitespace"            "w"   #'delete-trailing-whitespace
          :desc "Delete trailing newlines"              "W"   #'doom/delete-trailing-newlines
          :desc "List errors"                           "x"   #'flymake-show-diagnostics-buffer
          (:when (featurep! :checkers syntax)
            :desc "List errors"                         "x"   #'flycheck-list-errors))
      )
#+end_src

** leader/file
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> f --- file
        (:prefix-map ("f" . "file")
          :desc "Open project editorconfig"   "c"   #'editorconfig-find-current-editorconfig
          :desc "Copy this file"              "C"   #'doom/copy-this-file
          :desc "Find directory"              "d"   #'dired
          :desc "Delete this file"            "D"   #'doom/delete-this-file
          :desc "Find file in emacs.d"        "e"   #'+default/find-in-emacsd
          :desc "Browse emacs.d"              "E"   #'+default/browse-emacsd
          :desc "Find file"                   "f"   #'find-file
          :desc "Find file from here"         "F"   #'+default/find-file-under-here
          :desc "Jump to Dired buffer"        "j"   #'dired-jump
          :desc "Locate file"                 "l"   #'locate
          :desc "Open file/dir externally"    "o"   #'spacemacs/open-file-or-directory-in-external-app
          :desc "Find file in private config" "p"   #'doom/find-file-in-private-config
          :desc "Browse private config"       "P"   #'doom/open-private-config
          :desc "Recent files"                "r"   #'recentf-open-files
          :desc "Rename/move file"            "R"   #'doom/move-this-file
          :desc "Save file"                   "s"   #'save-buffer
          :desc "Save file as..."             "S"   #'write-file
          :desc "Sudo find file"              "u"   #'doom/sudo-find-file
          :desc "Sudo this file"              "U"   #'doom/sudo-this-file
          :desc "Yank filename"               "y"   #'+default/yank-buffer-filename)

      )
#+end_src

** leader/git
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> g --- git
        (:prefix-map ("g" . "git")
          :desc "Git revert file"             "R"   #'vc-revert
          :desc "Copy link to remote"         "y"   #'+vc/browse-at-remote-kill-file-or-region
          :desc "Copy link to homepage"       "Y"   #'+vc/browse-at-remote-kill-homepage
          (:when (featurep! :ui hydra)
            :desc "SMerge"                    "m"   #'+vc/smerge-hydra/body)
          (:when (featurep! :ui vc-gutter)
            :desc "Git revert hunk"           "r"   #'git-gutter:revert-hunk
            :desc "Git stage hunk"            "s"   #'git-gutter:stage-hunk
            :desc "Git time machine"          "t"   #'git-timemachine-toggle
            :desc "Jump to next hunk"         "]"   #'git-gutter:next-hunk
            :desc "Jump to previous hunk"     "["   #'git-gutter:previous-hunk)
          (:when (featurep! :tools magit)
            :desc "Magit dispatch"            "/"   #'magit-dispatch
            :desc "Forge dispatch"            "'"   #'forge-dispatch
            :desc "Magit switch branch"       "b"   #'magit-branch-checkout
            :desc "Magit status"              "g"   #'magit-status
            :desc "Magit file delete"         "D"   #'magit-file-delete
            :desc "Magit blame"               "B"   #'magit-blame-addition
            :desc "Magit clone"               "C"   #'magit-clone
            :desc "Magit fetch"               "F"   #'magit-fetch
            :desc "Magit buffer log"          "L"   #'magit-log
            :desc "Git stage file"            "S"   #'magit-stage-file
            :desc "Git unstage file"          "U"   #'magit-unstage-file
            (:prefix ("f" . "find")
              :desc "Find file"                 "f"   #'magit-find-file
              :desc "Find gitconfig file"       "g"   #'magit-find-git-config-file
              :desc "Find commit"               "c"   #'magit-show-commit
              :desc "Find issue"                "i"   #'forge-visit-issue
              :desc "Find pull request"         "p"   #'forge-visit-pullreq)
            (:prefix ("o" . "open in browser")
              :desc "Browse file or region"     "o"   #'browse-at-remote
              :desc "Browse homepage"           "h"   #'+vc/browse-at-remote-homepage
              :desc "Browse remote"             "r"   #'forge-browse-remote
              :desc "Browse commit"             "c"   #'forge-browse-commit
              :desc "Browse an issue"           "i"   #'forge-browse-issue
              :desc "Browse a pull request"     "p"   #'forge-browse-pullreq
              :desc "Browse issues"             "I"   #'forge-browse-issues
              :desc "Browse pull requests"      "P"   #'forge-browse-pullreqs)
            (:prefix ("l" . "list")
              (:when (featurep! :tools gist)
                :desc "List gists"              "g"   #'+gist:list)
              :desc "List repositories"         "r"   #'magit-list-repositories
              :desc "List submodules"           "s"   #'magit-list-submodules
              :desc "List issues"               "i"   #'forge-list-issues
              :desc "List pull requests"        "p"   #'forge-list-pullreqs
              :desc "List notifications"        "n"   #'forge-list-notifications)
            (:prefix ("c" . "create")
              :desc "Initialize repo"           "r"   #'magit-init
              :desc "Clone repo"                "R"   #'magit-clone
              :desc "Commit"                    "c"   #'magit-commit-create
              :desc "Fixup"                     "f"   #'magit-commit-fixup
              :desc "Branch"                    "b"   #'magit-branch-and-checkout
              :desc "Issue"                     "i"   #'forge-create-issue
              :desc "Pull request"              "p"   #'forge-create-pullreq)))
      )
#+end_src

** leader/open
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> o --- open
        (:prefix-map ("o" . "open")
          :desc "Org agenda"       "A"  #'org-agenda
          (:prefix ("a" . "org agenda")
            :desc "Agenda"         "a"  #'org-agenda
            :desc "Todo list"      "t"  #'org-todo-list
            :desc "Tags search"    "m"  #'org-tags-view
            :desc "View search"    "v"  #'org-search-view)
          :desc "Start debugger"     "d"  #'+debugger/start
          :desc "New frame"          "f"  #'make-frame
          :desc "REPL"               "r"  #'+eval/open-repl-other-window
          :desc "REPL (same window)" "R"  #'+eval/open-repl-same-window
          :desc "Dired"              "-"  #'dired-jump
          (:when (featurep! :ui neotree)
            :desc "Project sidebar"              "p" #'+neotree/open
            :desc "Find file in project sidebar" "P" #'+neotree/find-this-file)
          (:when (featurep! :ui treemacs)
            :desc "Project sidebar" "p" #'+treemacs/toggle
            :desc "Find file in project sidebar" "P" #'+treemacs/find-file)
          (:when (featurep! :term shell)
            :desc "Toggle shell popup"    "t" #'+shell/toggle
            :desc "Open shell here"       "T" #'+shell/here)
          (:when (featurep! :term term)
            :desc "Toggle terminal popup" "t" #'+term/toggle
            :desc "Open terminal here"    "T" #'+term/here)
          (:when (featurep! :term vterm)
            :desc "Toggle vterm popup"    "t" #'+vterm/toggle
            :desc "Open vterm here"       "T" #'gwp/open-terminal-here)
          (:when (featurep! :term eshell)
            :desc "Toggle eshell popup"   "e" #'+eshell/toggle
            :desc "Open eshell here"      "E" #'+eshell/here)
          (:when (featurep! :tools docker)
            :desc "Docker" "D" #'docker))
      )
#+end_src
** leader/insert
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> i --- insert
        (:prefix-map ("i" . "insert")
          :desc "Current file name"             "f"   #'+default/insert-file-path
          :desc "Current file path"             "F"   (λ!! #'+default/insert-file-path t)
          :desc "Evil ex path"                  "p"   (λ! (evil-ex "R!echo "))
          :desc "From evil register"            "r"   #'evil-ex-registers
          :desc "Snippet"                       "s"   #'yas-insert-snippet
          :desc "Unicode"                       "u"   #'unicode-chars-list-chars
          :desc "From clipboard"                "y"   #'+default/yank-pop)
      )
#+end_src

** leader/project
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> p --- project
        (:prefix-map ("p" . "project")
          :desc "Browse project"               "." #'+default/browse-project
          :desc "Browse other project"         ">" #'doom/browse-in-other-project
          :desc "Run cmd in project root"      "!" #'projectile-run-shell-command-in-root
          :desc "Add new project"              "a" #'projectile-add-known-project
          :desc "Switch to project buffer"     "b" #'projectile-switch-to-buffer
          :desc "Compile in project"           "c" #'projectile-compile-project
          :desc "Repeat last command"          "C" #'projectile-repeat-last-command
          :desc "Remove known project"         "d" #'projectile-remove-known-project
          :desc "Discover projects in folder"  "D" #'+default/discover-projects
          :desc "Edit project .dir-locals"     "e" #'projectile-edit-dir-locals
          :desc "Find file in project"         "f" #'projectile-find-file
          :desc "Find file in other project"   "F" #'doom/find-file-in-other-project
          :desc "Configure project"            "g" #'projectile-configure-project
          :desc "Invalidate project cache"     "i" #'projectile-invalidate-cache
          :desc "Kill project buffers"         "k" #'projectile-kill-buffers
          :desc "Find other file"              "o" #'projectile-find-other-file
          :desc "Switch project"               "p" #'projectile-switch-project
          :desc "Find recent project files"    "r" #'projectile-recentf
          :desc "Run project"                  "R" #'projectile-run-project
          :desc "Save project files"           "s" #'projectile-save-project-buffers
          :desc "Pop up scratch buffer"        "x" #'doom/open-project-scratch-buffer
          :desc "Switch to scratch buffer"     "X" #'doom/switch-to-project-scratch-buffer
          :desc "List project tasks"           "t" #'magit-todos-list
          :desc "Test project"                 "T" #'projectile-test-project)
      )
#+end_src

** leader/quit
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> q --- quit/session
        (:prefix-map ("q" . "quit/session")
          :desc "Restart emacs server"         "d" #'+default/restart-server
          :desc "Delete frame"                 "f" #'delete-frame
          :desc "Clear current frame"          "F" #'doom/kill-all-buffers
          :desc "Kill Emacs (and daemon)"      "K" #'save-buffers-kill-emacs
          :desc "Quit Emacs"                   "q" #'save-buffers-kill-terminal
          :desc "Quit Emacs without saving"    "Q" #'evil-quit-all-with-error-code
          :desc "Quick save current session"   "s" #'doom/quicksave-session
          :desc "Restore last session"         "l" #'doom/quickload-session
          :desc "Save session to file"         "S" #'doom/save-session
          :desc "Restore session from file"    "L" #'doom/load-session
          :desc "Restart & restore Emacs"      "r" #'doom/restart-and-restore
          :desc "Restart Emacs"                "R" #'doom/restart)
      )
#+end_src

** leader/resume
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> r --- resume
        (:prefix-map ("r" . "rings/resume")
                     :desc "Resume last search"    "l" #'ivy-resume
                     :desc "Evil registers"        "e" #'counsel-register
                     :desc "Evil marks"            "m" #'counsel-evil-marks
                     :desc "Last change"           "c" #'goto-last-change
                     )

      )
#+end_src

** leader/search
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> s --- search
        (:prefix-map ("s" . "search")
          :desc "Search buffer"                "b" #'swiper
          :desc "Search current directory"     "d" #'+default/search-cwd
          :desc "Search other directory"       "D" #'+default/search-other-cwd
          :desc "Locate file"                  "f" #'locate
          :desc "Jump to symbol"               "i" #'imenu
          :desc "Jump to visible link"         "l" #'link-hint-open-link
          :desc "Jump to link"                 "L" #'ffap-menu
          :desc "Jump list"                    "j" #'evil-show-jumps
          :desc "Jump to bookmark"             "m" #'bookmark-jump
          :desc "Search all notes"             "n" #'gwp/search-all-notes
          :desc "Look up online"               "o" #'+lookup/online
          :desc "Look up online (w/ prompt)"   "O" #'+lookup/online-select
          :desc "Look up in local docsets"     "k" #'+lookup/in-docsets
          :desc "Look up in all docsets"       "K" #'+lookup/in-all-docsets
          :desc "Search project"               "p" #'+default/search-project
          :desc "Search other project"         "P" #'+default/search-other-project
          :desc "Jump to mark"                 "r" #'evil-show-marks
          :desc "Search buffer"                "s" #'swiper-isearch
          :desc "Search buffer for thing at point" "S" #'swiper-isearch-thing-at-point
          :desc "Dictionary"                   "t" #'+lookup/dictionary-definition
          :desc "Thesaurus"                    "T" #'+lookup/synonyms)
      )
#+end_src

** leader/toggle
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> t --- toggle
        (:prefix-map ("t" . "toggle")
          :desc "Big mode"                     "b" #'doom-big-font-mode
          :desc "Flymake"                      "f" #'flymake-mode
          :desc "Menubar"                      "m" #'menu-bar-mode
          :desc "Toolbar"                      "t" #'tool-bar-mode
          (:when (featurep! :checkers syntax)
            :desc "Flycheck"                   "f" #'flycheck-mode)
          :desc "Frame fullscreen"             "F" #'toggle-frame-fullscreen
          :desc "Evil goggles"                 "g" #'evil-goggles-mode
          (:when (featurep! :ui indent-guides)
            :desc "Indent guides"              "i" #'highlight-indent-guides-mode)
          :desc "Indent style"                 "I" #'doom/toggle-indent-style
          :desc "Line numbers"                 "l" #'doom/toggle-line-numbers
          (:when (featurep! :lang org +present)
            :desc "org-tree-slide mode"        "p" #'org-tree-slide-mode)
          :desc "Read-only mode"               "r" #'read-only-mode
          (:when (featurep! :checkers spell)
            :desc "Flyspell"                   "s" #'flyspell-mode)
          :desc "Soft line wrapping"           "w" #'visual-line-mode
          (:when (featurep! :ui word-wrap)
            :desc "Soft line wrapping"         "w" #'+word-wrap-mode)
          :desc "Zen mode"                     "z" #'writeroom-mode)
      )
#+end_src

** leader/jump
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> j --- jump
        (:prefix-map ("j" . "jump")
                     :desc "avy line"    "l" #'evil-avy-goto-line
                     )
      )
#+end_src

** leader/remote
#+begin_src emacs-lisp
  (map! :leader
        ;;; <leader> R --- remote
        (:when (featurep! :tools upload)
          (:prefix-map ("R" . "remote")
            :desc "Upload local"               "u" #'ssh-deploy-upload-handler
            :desc "Upload local (force)"       "U" #'ssh-deploy-upload-handler-forced
            :desc "Download remote"            "d" #'ssh-deploy-download-handler
            :desc "Diff local & remote"        "D" #'ssh-deploy-diff-handler
            :desc "Browse remote files"        "." #'ssh-deploy-browse-remote-handler
            :desc "Detect remote changes"      ">" #'ssh-deploy-remote-changes-handler))
      )
#+end_src

** misc
#+begin_src elisp
  ;; Smart tab, these will only work in GUI Emacs
  (map! ;; Smarter newlines
        :i [remap newline] #'newline-and-indent  ; auto-indent on newline
        :i "C-j"           #'+default/newline    ; default behavior

        (:after help :map help-mode-map
          :n "o"       #'link-hint-open-link)
        (:after helpful :map helpful-mode-map
          :n "o"       #'link-hint-open-link)
        (:after info :map Info-mode-map
          :n "o"       #'link-hint-open-link)
        (:after apropos :map apropos-mode-map
          :n "o"       #'link-hint-open-link
          :n "TAB"     #'forward-button
          :n [tab]     #'forward-button
          :n [backtab] #'backward-button)
        (:after view :map view-mode-map
          [escape]  #'View-quit-all)
        (:after man :map Man-mode-map
          :n "q"    #'kill-current-buffer)

        :m "gs"     #'+evil/easymotion  ; lazy-load `evil-easymotion'
        (:after evil-org
          :map evil-org-mode-map
          :m "gsh" #'+org/goto-visible)

        (:when (featurep! :editor multiple-cursors)
          :prefix "gz"
          :nv "d" #'evil-mc-make-and-goto-next-match
          :nv "D" #'evil-mc-make-and-goto-prev-match
          :nv "j" #'evil-mc-make-cursor-move-next-line
          :nv "k" #'evil-mc-make-cursor-move-prev-line
          :nv "m" #'evil-mc-make-all-cursors
          :nv "n" #'evil-mc-make-and-goto-next-cursor
          :nv "N" #'evil-mc-make-and-goto-last-cursor
          :nv "p" #'evil-mc-make-and-goto-prev-cursor
          :nv "P" #'evil-mc-make-and-goto-first-cursor
          :nv "q" #'evil-mc-undo-all-cursors
          :nv "t" #'+multiple-cursors/evil-mc-toggle-cursors
          :nv "u" #'evil-mc-undo-last-added-cursor
          :nv "z" #'+multiple-cursors/evil-mc-make-cursor-here
          :v  "I" #'evil-mc-make-cursor-in-visual-selection-beg
          :v  "A" #'evil-mc-make-cursor-in-visual-selection-end)

        ;; misc
        :n "C-S-f"  #'toggle-frame-fullscreen
        :n "C-+"    #'doom/reset-font-size
        ;; Buffer-local font resizing
        :n "C-="    #'text-scale-increase
        :n "C--"    #'text-scale-decrease
        ;; Frame-local font resizing
        :n "M-C-="  #'doom/increase-font-size
        :n "M-C--"  #'doom/decrease-font-size)


  ;;
  ;;; Module keybinds

  ;;; :completion
  (map! (:when (featurep! :completion company)
          :i "C-@"      #'+company/complete
          :i "C-SPC"    #'+company/complete
          (:after company
            (:map company-active-map
              "C-w"     nil  ; don't interfere with `evil-delete-backward-word'
              "C-n"     #'company-select-next
              "C-p"     #'company-select-previous
              "C-j"     #'company-select-next
              "C-k"     #'company-select-previous
              "C-h"     #'company-show-doc-buffer
              "C-u"     #'company-previous-page
              "C-d"     #'company-next-page
              "C-s"     #'company-filter-candidates
              "C-S-s"   (cond ((featurep! :completion helm) #'helm-company)
                              ((featurep! :completion ivy)  #'counsel-company))
              "C-SPC"   #'company-complete-common
              "TAB"     #'company-complete-common-or-cycle
              [tab]     #'company-complete-common-or-cycle
              [backtab] #'company-select-previous
              [f1]      nil)
            (:map company-search-map  ; applies to `company-filter-map' too
              "C-n"     #'company-select-next-or-abort
              "C-p"     #'company-select-previous-or-abort
              "C-j"     #'company-select-next-or-abort
              "C-k"     #'company-select-previous-or-abort
              "C-s"     (λ! (company-search-abort) (company-filter-candidates))
              [escape]  #'company-search-abort))
          ;; TAB auto-completion in term buffers
          (:after comint :map comint-mode-map
            "TAB" #'company-complete
            [tab] #'company-complete))

        (:when (featurep! :completion ivy)
          (:after ivy
            :map ivy-minibuffer-map
            "C-SPC" #'ivy-call-and-recenter  ; preview file
            "C-l"   #'ivy-alt-done
            "C-v"   #'yank)
          (:after counsel
            :map counsel-ag-map
            "C-SPC"    #'ivy-call-and-recenter ; preview
            "C-l"      #'ivy-done
            [C-return] #'+ivy/git-grep-other-window-action))

        (:when (featurep! :completion helm)
          (:after helm :map helm-map
            [left]     #'left-char
            [right]    #'right-char
            "C-S-f"    #'helm-previous-page
            "C-S-n"    #'helm-next-source
            "C-S-p"    #'helm-previous-source
            "C-S-j"    #'helm-next-source
            "C-S-k"    #'helm-previous-source
            "C-j"      #'helm-next-line
            "C-k"      #'helm-previous-line
            "C-u"      #'helm-delete-minibuffer-contents
            "C-s"      #'helm-minibuffer-history
            ;; Swap TAB and C-z
            "TAB"      #'helm-execute-persistent-action
            [tab]      #'helm-execute-persistent-action
            "C-z"      #'helm-select-action)
          (:after helm-ag :map helm-ag-map
            "C--"      #'+helm-do-ag-decrease-context
            "C-="      #'+helm-do-ag-increase-context
            [left]     nil
            [right]    nil)
          (:after helm-files :map (helm-find-files-map helm-read-file-map)
            [C-return] #'helm-ff-run-switch-other-window
            "C-w"      #'helm-find-files-up-one-level)
          (:after helm-locate :map helm-generic-files-map
            [C-return] #'helm-ff-run-switch-other-window)
          (:after helm-buffers :map helm-buffer-map
            [C-return] #'helm-buffer-switch-other-window)
          (:after helm-occur :map helm-occur-map
            [C-return] #'helm-occur-run-goto-line-ow)
          (:after helm-grep :map helm-grep-map
            [C-return] #'helm-grep-run-other-window-action)))

  ;;; :ui
  (map! (:when (featurep! :ui popup)
          :n "C-`"   #'+popup/toggle
          :n "C-~"   #'+popup/raise
          :g "C-x p" #'+popup/other))

  ;;; :editor
  (map! (:when (featurep! :editor format)
          :n "gQ" #'+format:region)

        (:when (featurep! :editor rotate-text)
          :n "!"  #'rotate-text)

        (:when (featurep! :editor multiple-cursors)
          ;; evil-multiedit
          :v  "R"     #'evil-multiedit-match-all
          :n  "M-d"   #'evil-multiedit-match-symbol-and-next
          :n  "M-D"   #'evil-multiedit-match-symbol-and-prev
          :v  "M-d"   #'evil-multiedit-match-and-next
          :v  "M-D"   #'evil-multiedit-match-and-prev
          :nv "C-M-d" #'evil-multiedit-restore
          (:after evil-multiedit
            (:map evil-multiedit-state-map
              "M-d"    #'evil-multiedit-match-and-next
              "M-D"    #'evil-multiedit-match-and-prev
              "RET"    #'evil-multiedit-toggle-or-restrict-region
              [return] #'evil-multiedit-toggle-or-restrict-region)))

        (:when (featurep! :editor snippets)
          ;; auto-yasnippet
          :i  [C-tab] #'aya-expand
          :nv [C-tab] #'aya-create))

  ;;; :tools
  (when (featurep! :tools eval)
    (map! "M-r" #'+eval/buffer))


  (after! which-key
    (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
      (cl-pushnew `((,(format "\\`\\(?:C-w\\|%s w\\) m\\'" prefix-re))
                    nil . "maximize")
                  which-key-replacement-alist)))
#+end_src


* modules/org-hack
新思路:
- fork doom-emacs, 修改之. 将其中的org module更名后, 放到pkg下载入?
- 这样易于跟踪官方进度?
- 需要同时打开lang/org module, 以正确加载autoload函数(似乎不能加
  载~/.doom.d/moudles/gwp下的定义).
- 新的gwp/org会覆盖lang/org中的设置

[[file:doom-hacks/modules/lang/org/][file:~/Workspace/Programming/emacs/doom-hacks/modules/lang/org/]]

* modules/gwp/org/deprecated
** docs
以doom org modules为基础, 开始自定义.
- [[file:doom-emacs/modules/lang/org/README.org]]
- [[file:pkg/.doom.d/modules/gwp/org/config.el][org/config.el]]

** config.el
:PROPERTIES:
:header-args: tangle pkg/.doom.d/modules/gwp/org/config.el :comments nil
:END:
*** header
#+begin_src emacs-lisp
  ;;; lang/org/config.el -*- lexical-binding: t; -*-
#+end_src

*** evil-org
#+begin_src emacs-lisp
  (use-package! evil-org
    :when (featurep! :editor evil +everywhere)
    :hook (org-mode . evil-org-mode)
    :init
    (defvar evil-org-retain-visual-state-on-shift t)
    ;; spacemacs中有item项, 按o/O会接续item, 而不是普通的换行. doom中可以用ctrl-enter
    (defvar evil-org-special-o/O '(table-row))
    (defvar evil-org-use-additional-insert t)
    :config
    (evil-org-set-key-theme)
    (add-hook! 'org-tab-first-hook :append
               ;; Only fold the current tree, rather than recursively
               #'+org-cycle-only-current-subtree-h
               ;; Clear babel results if point is inside a src block
               #'+org-clear-babel-results-h)
    (map! :map evil-org-mode-map
          :ni [C-return]   #'+org/insert-item-below
          :ni [C-S-return] #'+org/insert-item-above
          ;; moving/(de|pro)moting subtress & expanding tables (prepend/append columns/rows)
          :ni "C-S-l" #'org-shiftright
          :ni "C-S-h" #'org-shiftleft
          :ni "C-S-k" #'org-shiftup
          :ni "C-S-j" #'org-shiftdown
          ;; more intuitive RET keybinds
          :i [return] #'org-return-indent
          :i "RET"    #'org-return-indent
          :n [return] #'+org/dwim-at-point
          :n "RET"    #'+org/dwim-at-point
          ;; more vim-esque org motion keys (not covered by evil-org-mode)
          :m "]h"  #'org-forward-heading-same-level
          :m "[h"  #'org-backward-heading-same-level
          :m "]l"  #'org-next-link
          :m "[l"  #'org-previous-link
          :m "]c"  #'org-babel-next-src-block
          :m "[c"  #'org-babel-previous-src-block
          :n "gQ"  #'org-fill-paragraph
          :n "gr"  #'org-ctrl-c-ctrl-c
          :n "gR"  #'org-babel-execute-buffer
          ;; sensible vim-esque folding keybinds
          :n "za"  #'+org/toggle-fold
          :n "zA"  #'org-shifttab
          :n "zc"  #'+org/close-fold
          :n "zC"  #'outline-hide-subtree
          :n "zm"  #'+org/hide-next-fold-level
          :n "zn"  #'org-tree-to-indirect-buffer
          :n "zo"  #'+org/open-fold
          :n "zO"  #'outline-show-subtree
          :n "zr"  #'+org/show-next-fold-level
          :n "zR"  #'outline-show-all
          :n "zi"  #'org-toggle-inline-images

          :map org-read-date-minibuffer-local-map
          "C-h"   (λ! (org-eval-in-calendar '(calendar-backward-day 1)))
          "C-l"   (λ! (org-eval-in-calendar '(calendar-forward-day 1)))
          "C-k"   (λ! (org-eval-in-calendar '(calendar-backward-week 1)))
          "C-j"   (λ! (org-eval-in-calendar '(calendar-forward-week 1)))
          "C-S-h" (λ! (org-eval-in-calendar '(calendar-backward-month 1)))
          "C-S-l" (λ! (org-eval-in-calendar '(calendar-forward-month 1)))
          "C-S-k" (λ! (org-eval-in-calendar '(calendar-backward-year 1)))
          "C-S-j" (λ! (org-eval-in-calendar '(calendar-forward-year 1))))
    )
#+end_src

*** org-pdfview
#+begin_src emacs-lisp
  (use-package! org-pdfview
    :when (featurep! :tools pdf)
    :commands org-pdfview-open
    :init
    (after! org
      (delete '("\\.pdf\\'" . default) org-file-apps)
      ;; org links to pdf files are opened in pdf-view-mode
      (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (_file link) (org-pdfview-open link))))
      ;; support for links to specific pages
      (add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" . (lambda (_file link) (org-pdfview-open link))))))
#+end_src

*** org-init-babel-h
#+begin_src elisp
  (defun +org-init-babel-h ()
    (setq org-src-preserve-indentation t  ; use native major-mode indentation
          org-src-tab-acts-natively t     ; we do this ourselves
          org-confirm-babel-evaluate t    ; 太危险
          ;; Show src buffer in popup, and don't monopolize the frame
          org-src-window-setup 'other-window ; 这个设置重复了
          )

    ;; 可以把之前的设置放这里
    ;; I prefer C-c C-c over C-c ' (more consistent)
    ;; (define-key org-src-mode-map (kbd "C-c C-c") #'org-edit-src-exit)

    (defadvice! +org-fix-newline-and-indent-in-src-blocks-a ()
      "Mimic `newline-and-indent' in src blocks w/ lang-appropriate indentation."
      :after #'org-return-indent
      (when (org-in-src-block-p t)
        (org-babel-do-in-edit-buffer
         (call-interactively #'indent-for-tab-command)))
      )

    ;; Refresh inline images after executing src blocks (useful for plantuml or
    ;; ipython, where the result could be an image)
    (add-hook 'org-babel-after-execute-hook #'org-redisplay-inline-images)
    )
#+end_src

*** org-init-babel-lazy-loader-h
#+begin_src elisp
  (defun +org-init-babel-lazy-loader-h ()
    "Load babel libraries lazily when babel blocks are executed."
    (defun +org--babel-lazy-load (lang)
      (cl-check-type lang symbol)
      (or (run-hook-with-args-until-success '+org-babel-load-functions lang)
          (require (intern (format "ob-%s" lang)) nil t)
          (require lang nil t)
          )
      )

    (defadvice! +org--src-lazy-load-library-a (lang)
      "Lazy load a babel package to ensure syntax highlighting."
      :before #'org-src--get-lang-mode
      (or (cdr (assoc lang org-src-lang-modes))
          (+org--babel-lazy-load lang)))

    ;; This also works for tangling and exporting
    (defadvice! +org--babel-lazy-load-library-a (info)
      "Load babel libraries lazily when babel blocks are executed."
      :after-while #'org-babel-confirm-evaluate
      (let* ((lang (nth 0 info))
             (lang (cond ((symbolp lang) lang)
                         ((stringp lang) (intern lang))))
             (lang (or (cdr (assq lang +org-babel-mode-alist))
                       lang)))
        (when (and lang
                   (not (cdr (assq lang org-babel-load-languages)))
                   (+org--babel-lazy-load lang))
          (when (assq :async (nth 2 info))
            ;; ob-async has its own agenda for lazy loading packages (in the
            ;; child process), so we only need to make sure it's loaded.
            (require 'ob-async nil t))
          (add-to-list 'org-babel-load-languages (cons lang t)))
        t))

    (defadvice! +org--noop-org-babel-do-load-languages-a (&rest _)
      :override #'org-babel-do-load-languages
      (message
       (concat "`org-babel-do-load-languages' is redundant with Doom's lazy loading mechanism for babel "
               "packages. There is no need to use it, so it has been disabled")))
    )
#+end_src
*** org-init-appearance-h
#+begin_src elisp
  (defun +org-init-appearance-h ()
    "Configures the UI for `org-mode'."
    (setq org-indirect-buffer-display 'current-window ; 默认不是这个
          org-enforce-todo-dependencies t
          org-entities-user
          '(("flat"  "\\flat" nil "" "" "266D" "♭")
            ("sharp" "\\sharp" nil "" "" "266F" "♯"))
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t
          org-fontify-whole-heading-line t
          org-footnote-auto-label 'plain
          org-hide-leading-stars t
          org-hide-leading-stars-before-indent-mode t
          org-image-actual-width nil
          org-list-description-max-indent 4
          org-priority-faces
          '((?A . error)
            (?B . warning)
            (?C . success))
          org-startup-indented t
          org-tags-column 0
          org-use-sub-superscripts '{})

    (setq org-refile-targets
          '((nil :maxlevel . 3)
            (org-agenda-files :maxlevel . 3))
          ;; Without this, completers like ivy/helm are only given the first level of
          ;; each outline candidates. i.e. all the candidates under the "Tasks" heading
          ;; are just "Tasks/". This is unhelpful. We want the full path to each refile
          ;; target! e.g. FILE/Tasks/heading/subheading
          org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil)

    ;; Fontify latex blocks and entities, but not natively -- that's too slow
    (setq org-highlight-latex-and-related '(latex script entities))
    (plist-put! org-format-latex-options
                :scale 1.5         ; larger previews
                :foreground 'auto  ; match the theme foreground
                :background 'auto) ; ... and its background

    ;; HACK Face specs fed directly to `org-todo-keyword-faces' don't respect
    ;;      underlying faces like the `org-todo' face does, so we define our own
    ;;      intermediary faces that extend from org-todo.
    (with-no-warnings
      (custom-declare-face '+org-todo-active '((t (:inherit (bold font-lock-constant-face org-todo)))) "")
      (custom-declare-face '+org-todo-project '((t (:inherit (bold font-lock-doc-face org-todo)))) "")
      (custom-declare-face '+org-todo-onhold '((t (:inherit (bold warning org-todo)))) ""))
    (setq org-todo-keywords
          '((sequence
             "TODO(t)"  ; A task that needs doing & is ready to do
             "PROJ(p)"  ; An ongoing project that cannot be completed in one step
             "STRT(s)"  ; A task that is in progress
             "WAIT(w)"  ; Something is holding up this task; or it is paused
             "|"
             "DONE(d)"  ; Task successfully completed
             "KILL(k)") ; Task was cancelled, aborted or is no longer applicable
            (sequence
             "[ ](T)"   ; A task that needs doing
             "[-](S)"   ; Task is in progress
             "[?](W)"   ; Task is being held up or paused
             "|"
             "[X](D)")) ; Task was completed
          org-todo-keyword-faces
          '(("[-]"  . +org-todo-active)
            ("STRT" . +org-todo-active)
            ("[?]"  . +org-todo-onhold)
            ("WAIT" . +org-todo-onhold)
            ("PROJ" . +org-todo-project)))

    ;; (defadvice! +org-display-link-in-eldoc-a (orig-fn &rest args)
    ;;   "Display full link in minibuffer when cursor/mouse is over it."
    ;;   :around #'org-eldoc-documentation-function
    ;;   (or (when-let (link (org-element-property :raw-link (org-element-context)))
    ;;         (format "Link: %s" link))
    ;;       (apply orig-fn args)))

    ;; Automatic indent detection in org files is meaningless
    (cl-pushnew 'org-mode doom-detect-indentation-excluded-modes :test #'eq)

    (set-pretty-symbols! 'org-mode
      :name "#+NAME:"
      :src_block "#+BEGIN_SRC"
      :src_block_end "#+END_SRC")
    )
#+end_src

*** org-init-capture-defaults
#+begin_src elisp :tangle no
  (defun +org-init-capture-defaults-h ()
    "Sets up some reasonable defaults, as well as two `org-capture' workflows that
  I like:

  1. The traditional way: invoking `org-capture' directly, via SPC X, or through
     the :cap ex command.
  2. Through a org-capture popup frame that is invoked from outside Emacs (the
     ~/.emacs.d/bin/org-capture script). This can be invoked from qutebrowser,
     vimperator, dmenu or a global keybinding."
    (setq org-default-notes-file
          (expand-file-name +org-capture-notes-file org-directory)
          +org-capture-journal-file
          (expand-file-name +org-capture-journal-file org-directory)
          org-capture-templates
          '(("t" "Personal todo" entry
             (file+headline +org-capture-todo-file "Inbox")
             "* [ ] %?\n%i\n%a" :prepend t)
            ("n" "Personal notes" entry
             (file+headline +org-capture-notes-file "Inbox")
             "* %u %?\n%i\n%a" :prepend t)
            ("j" "Journal" entry
             (file+olp+datetree +org-capture-journal-file)
             "* %U %?\n%i\n%a" :prepend t)

            ;; Will use {project-root}/{todo,notes,changelog}.org, unless a
            ;; {todo,notes,changelog}.org file is found in a parent directory.
            ;; Uses the basename from `+org-capture-todo-file',
            ;; `+org-capture-changelog-file' and `+org-capture-notes-file'.
            ("p" "Templates for projects")
            ("pt" "Project-local todo" entry  ; {project-root}/todo.org
             (file+headline +org-capture-project-todo-file "Inbox")
             "* TODO %?\n%i\n%a" :prepend t)
            ("pn" "Project-local notes" entry  ; {project-root}/notes.org
             (file+headline +org-capture-project-notes-file "Inbox")
             "* %U %?\n%i\n%a" :prepend t)
            ("pc" "Project-local changelog" entry  ; {project-root}/changelog.org
             (file+headline +org-capture-project-changelog-file "Unreleased")
             "* %U %?\n%i\n%a" :prepend t)

            ;; Will use {org-directory}/{+org-capture-projects-file} and store
            ;; these under {ProjectName}/{Tasks,Notes,Changelog} headings. They
            ;; support `:parents' to specify what headings to put them under, e.g.
            ;; :parents ("Projects")
            ("o" "Centralized templates for projects")
            ("ot" "Project todo" entry
             (function +org-capture-central-project-todo-file)
             "* TODO %?\n %i\n %a"
             :heading "Tasks"
             :prepend nil)
            ("on" "Project notes" entry
             (function +org-capture-central-project-notes-file)
             "* %U %?\n %i\n %a"
             :heading "Notes"
             :prepend t)
            ("oc" "Project changelog" entry
             (function +org-capture-central-project-changelog-file)
             "* %U %?\n %i\n %a"
             :heading "Changelog"
             :prepend t)))

    ;; Kill capture buffers by default (unless they've been visited)
    (after! org-capture
      (org-capture-put :kill-buffer t))

    ;; HACK Doom doesn't support `customize'. Best not to advertise it as an
    ;;      option in `org-capture's menu.
    (defadvice! +org--remove-customize-option-a (orig-fn table title &optional prompt specials)
      :around #'org-mks
      (funcall orig-fn table title prompt (remove '("C" "Customize org-capture-templates") specials)))

    (defadvice! +org--capture-expand-variable-file-a (file)
      "If a variable is used for a file path in `org-capture-template', it is used
  as is, and expanded relative to `default-directory'. This changes it to be
  relative to `org-directory', unless it is an absolute path."
      :filter-args #'org-capture-expand-file
      (if (and (symbolp file) (boundp file))
          (expand-file-name (symbol-value file) org-directory)
        file))

    (defadvice! +org--prevent-save-prompts-when-refiling-a (&rest _)
      "Fix #462: when refiling from org-capture, Emacs prompts to kill the
  underlying, modified buffer. This fixes that."
      :after 'org-refile
      (when (bound-and-true-p org-capture-is-refiling)
        (org-save-all-org-buffers)))

    ;; (add-hook! 'org-capture-mode-hook
    ;;   (defun +org-show-target-in-capture-header-h ()
    ;;     (setq header-line-format
    ;;           (format "%s%s%s"
    ;;                   (propertize (abbreviate-file-name (buffer-file-name (buffer-base-buffer)))
    ;;                               'face 'font-lock-string-face)
    ;;                   org-eldoc-breadcrumb-separator
    ;;                   header-line-format))))

    (when (featurep! :editor evil)
      (add-hook 'org-capture-mode-hook #'evil-insert-state))
    )
#+end_src

*** org-init-capture-frame
#+begin_src elisp :tangle no
(defun +org-init-capture-frame-h ()
  (add-hook 'org-capture-after-finalize-hook #'+org-capture-cleanup-frame-h)

  (when (featurep! :ui doom-dashboard)
    (add-hook '+doom-dashboard-inhibit-functions #'+org-capture-frame-p)))
#+end_src

*** org boostrap
#+begin_src elisp
  (use-package! org
    :preface
    ;; Change org defaults (should be set before org loads)
    (setq org-directory "~/Notes/"
          ;; 默认的data/, 保留原样的好
          ;; org-attach-id-dir ".attach/"
          org-publish-timestamp-directory (concat doom-cache-dir "org-timestamps/")
          org-preview-latex-image-directory (concat doom-cache-dir "org-latex/")
          )

    ;; eldoc没多大用
    ;; (add-hook 'org-mode-local-vars-hook #'eldoc-mode)

    (add-hook! 'org-mode-hook
               ;; #'doom-disable-show-paren-mode-h
               ;; ;; disable `show-trailing-whitespace'; shows a lot of false positives
               ;; #'doom-disable-show-trailing-whitespace-h
               ;; #'+org-enable-auto-reformat-tables-h
               ;; #'+org-enable-auto-update-cookies-h
               ;; #'+org-unfold-to-2nd-level-or-point-h
               )

    (add-hook! 'org-load-hook
               #'+org-init-appearance-h
               ;; #'+org-init-agenda-h
               ;; #'+org-init-attachments-h
               #'+org-init-babel-h
               #'+org-init-babel-lazy-loader-h
               ;; #'+org-init-capture-defaults-h
               ;; #'+org-init-capture-frame-h
               ;; #'+org-init-custom-links-h
               ;; #'+org-init-export-h
               ;; #'+org-init-hacks-h
               ;; #'+org-init-keybinds-h
               ;; #'+org-init-popup-rules-h
               ;; #'+org-init-protocol-h
               ;; #'+org-init-protocol-lazy-loader-h
               ;; #'+org-init-smartparens-h
               )

    ;; In case the user has eagerly loaded org from their configs
    (when (and (featurep 'org)
               (not doom-reloading-p)
               (not byte-compile-current-file))
      (message "`org' was already loaded by the time lang/org loaded, this may cause issues")
      (run-hooks 'org-load-hook)
      )

    :config
    ;; (add-hook 'org-open-at-point-functions #'doom-set-jump-h)
    )
#+end_src

** package.el
:PROPERTIES:
:header-args: tangle pkg/.doom.d/modules/gwp/org/packages.el :comments nil
:END:
#+begin_src emacs-lisp
  ;; -*- no-byte-compile: t; -*-
  ;;; lang/org/packages.el

  ;; Prevent built-in Org from playing into the byte-compilation of
  ;; `org-plus-contrib'.
  (when-let (orglib (locate-library "org" nil doom--initial-load-path))
    (setq load-path (delete (substring (file-name-directory orglib) 0 -1)
                            load-path)))

  ;; HACK A necessary hack because org requires a compilation step after being
  ;;      cloned, and during that compilation a org-version.el is generated with
  ;;      these two functions, which return the output of a 'git describe ...'
  ;;      call in the repo's root. Of course, this command won't work in a sparse
  ;;      clone, and more than that, initiating these compilation step is a
  ;;      hassle, so...
  (add-hook! 'straight-use-package-pre-build-functions
    (defun +org-fix-package-h (package &rest _)
      (when (equal package "org-mode")
        (with-temp-file (expand-file-name "org-version.el" (straight--repos-dir "org-mode"))
          (insert "(fset 'org-release (lambda () \"9.4\"))\n"
                  "(fset 'org-git-version #'ignore)\n"
                  "(provide 'org-version)\n")))))

  ;; Install cutting-edge version of org-mode, and from a mirror, because
  ;; code.orgmode.org runs on a potato.
  (package! org-mode
    :recipe (:host github
             :repo "emacs-straight/org-mode"
             :files ("*.el" "lisp/*.el" "contrib/lisp/*.el"))
    :pin "30d0b6e1f6")
  ;; ...And prevent other packages from pulling org; org-plus-contrib satisfies
  ;; the dependency already: https://github.com/raxod502/straight.el/issues/352
  (package! org :recipe (:local-repo nil))

  (package! avy)
  (package! htmlize :pin "86f22f211e")
  (package! org-bullets
    :recipe (:host github :repo "Kaligule/org-bullets")
    :pin "8b4f0aab6d")
  (package! org-yt
    :recipe (:host github :repo "TobiasZawada/org-yt")
    :pin "40cc1ac76d")
  (package! ox-clip :pin "bd36f9fb4e")
  (package! toc-org :pin "379b457fcf")
  (package! org-cliplink :pin "82402cae7e")

  (when (featurep! :editor evil +everywhere)
    (package! evil-org
      :recipe (:host github :repo "hlissner/evil-org-mode")
      :pin "4d44e9bbdc"))
  (when (featurep! :tools pdf)
    (package! org-pdfview :pin "8b71f31363"))
  (when (featurep! :tools magit)
    (package! orgit :pin "e7cddf39e3"))
  (when (featurep! +brain)
    (package! org-brain :pin "a0625854df"))
  (when (featurep! +dragndrop)
    (package! org-download :pin "3c48102793"))
  (when (featurep! +gnuplot)
    (package! gnuplot :pin "a406143d52")
    (package! gnuplot-mode :pin "601f639298"))
  (when (featurep! +ipython) ; DEPRECATED
    (package! ob-ipython :pin "7147455230"))
  (when (featurep! +jupyter)
    (package! jupyter :pin "9e3c163358"))
  (when (featurep! +pomodoro)
    (package! org-pomodoro :pin "aa07c11318"))
  (when (featurep! +present)
    (package! centered-window
      :recipe (:host github :repo "anler/centered-window-mode")
      :pin "24f7c5be9d")
    (package! org-tree-slide :pin "7bf09a02bd")
    (package! ox-reveal :pin "aafedfd805"))
  (when (featurep! +journal)
    (package! org-journal :pin "dc120bf42a"))

  ;;; Babel
  (package! ob-async :pin "80a30b96a0")
  (when (featurep! :lang crystal)
    (package! ob-crystal :pin "d84c1adee4"))
  (when (featurep! :lang go)
    (package! ob-go :pin "2067ed55f4"))
  (when (featurep! :lang nim)
    (package! ob-nim :pin "bf1642cb93"))
  (when (featurep! :lang racket)
    (package! ob-racket
      :recipe (:host github :repo "DEADB17/ob-racket")
      :pin "d8fd51bddb"))
  (when (featurep! :lang rest)
    (package! ob-restclient :pin "c5c22e6035"))
  (when (featurep! :lang rust)
    (package! ob-rust :pin "6a82587598"))
  (when (featurep! :lang scala)
    (package! ob-ammonite :pin "39937dff39"))

  ;;; Export
  (when (featurep! +pandoc)
    (package! ox-pandoc :pin "aa37dc7e94"))
  (when (featurep! +hugo)
    (package! ox-hugo
      :recipe (:host github :repo "kaushalmodi/ox-hugo" :nonrecursive t)
      :pin "16f1b0c9a9"))
  (when (featurep! :lang rst)
    (package! ox-rst :pin "9158bfd180"))
#+end_src

* snippets
:PROPERTIES:
:header-args: :comments nil
:END:
TAB自动补全很可怕, 无意按键, 补出很多没用的东西. doom系统下private snippets目录
为 ~/.doom.d/snippets.

- [[https://github.com/hlissner/doom-snippets][hlissner/doom-snippets: The Doom Emacs snippets library]]

** org-mode
*** begin_src
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src
  # -*- mode: snippet -*-
  # name: #+begin_src
  # key: <s
  # --
  ,#+begin_src $1
  $0
  ,#+end_src
#+END_SRC

*** begin_src shell
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_sh
  # -*- mode: snippet -*-
  # name: #+begin_src shell
  # key: <sh
  # --
  ,#+begin_src shell
  $0
  ,#+end_src
#+END_SRC

*** begin_src elisp
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_elisp
  # -*- mode: snippet -*-
  # name: #+begin_src elisp
  # key: <el
  # --
  ,#+begin_src elisp
  $0
  ,#+end_src
#+END_SRC

*** begin_src python
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_python
  # -*- mode: snippet -*-
  # name: #+begin_src python
  # key: <p
  # --
  ,#+begin_src python
  $0
  ,#+end_src
#+END_SRC

*** begin_src rust
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_rust
  # -*- mode: snippet -*-
  # name: #+begin_src rust
  # key: <r
  # --
  ,#+begin_src rust
  $0
  ,#+end_src
#+END_SRC

** rust-mode
* theme
[[file:emacs-material-theme/][file:~/Workspace/Programming/emacs/emacs-material-theme/]]
