#+TITLE: Private config based on doom-emacs
#+SETUPFILE: ~/Notes/common.org

历史设置
- [[file:~/Install/configs/spacemacs/config.note][spacemacs]]
- [[file:~/Install/configs/spacemacs/ybyygu.org][emacs24-starter-kit]]
- [[zotero://select/library/collections/Z8UFNPZ4][zotero collection]]

* 配置参考
- [[https://github.com/hlissner/doom-emacs][doom-emacs: An Emacs configuration for the stubborn martian vimmer]]
  - [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org][doom-emacs/faq.org]]
  - [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org][doom-emacs/getting_started.org]]
  - [[https://github.com/hlissner/doom-emacs/blob/develop/docs/modules.org][doom-emacs/modules.org at develop]]
  - [[https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/org/README.org#description][doom-emacs/README.org at develop · hlissner/doom-emacs]]
    
- https://github.com/gilbertw1/bmacs/blob/master/bmacs.org
- [[https://tecosaur.github.io/emacs-config/config.html][Doom Emacs Configuration]] by tecosaur
- [[https://noelwelsh.com/posts/2019-01-10-doom-emacs.html][Noel Welsh: Doom Emacs Workflows]]
- https://github.com/utrack/dotfiles/tree/master/doomemacs/.doom.d
- [[https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.org][help/Org-Mode_Fundamentals.org at master · grettke/help]]
- [[https://develop.spacemacs.org/layers/+emacs/org/README.html][Org layer]]
- 编码参考: [[https://github.com/bbatsov/emacs-lisp-style-guide][bbatsov/emacs-lisp-style-guide: A community-driven Emacs Lisp style guide]]

* Memo [33/43]
** TODO [2021-09-18 Sat] 研究下自动补全系统
dabbrev-expand
hippie-expand

hippie-expand默认会使用dabbrev-expand的补全项, 因此可替代之:
: (global-set-key "\M-/" 'hippie-expand)


redgaurdtoo: "代码自动完成和代码自动导航我推荐基于ctags的方案，缺点当然是智能程度不高。但是速
度快，支持正则表达式定制，通吃所有语言。在我眼里优点远远压倒了缺点。"

- [[https://github.com/redguardtoo/company-ctags][Fastest auto-completion using Company and Ctags]]

** TODO [2021-09-16 Thu] 最近关于笔记管理的好文 [[https://index.pmthinking.com/3a8c5d77b5be42c58719d174bfbfa935][何谓渐进式总结]]          :ATTACH:
:PROPERTIES:
:ID:       71394edd-0d8b-4d34-b49e-e0c7e8ade4c1
:END:

- 适当的压缩信息（这个系列便是如此）能更利于我们记忆
- 知识的挑战不在于获取知识, 而在于将部分知识跨时距传递(在需要的时候)
- 笔记系统要平衡可发现性和可理解性

渐进式总结
- 不断地总结，把思路提炼成越来越小的层次。
- 有了这些层层暴露，我们就可以从高空鸟瞰笔记的山峰，判断这座山峰是否与我们要找的东西有关。
- 但我们也保留了所有的层级，所以如果我们看到一个看起来很有前景的山峰，就可以用我
  们的 "理解的降落伞 "直接潜入其中，往下钻，只要我们需要的深度。

渐进式总结将丛林变成了一个群岛式的岛屿。它揭示了你的个人信息地貌 —— 你的目标、价
值观、兴趣和追求的独特地形。有了清晰的地形图，你就有了引导的能力。

- 快速索引知识，并将其压缩成许多知识块;
- 迅速忘掉所学的东西, 放入笔记系统(第二大脑), 将大脑放空;
- 目标: 保持清晰的大脑，又能建立起持久的结构.

记忆的关键:
- 不是要把每一个想法尽无遗地罗列出来
- 而是要创造一个丰富的触发器、提示和钩子的环境, 以引发记忆、联系，甚至是更多的新
  想法
- 拥有正确的知识不是最大的挑战, 寻找知识才是最大的挑战. 知识是存在的，只是我们找
  不到而已.
- 让我们从「记详细的笔记」转化为「记录笔记的关键词、核心思想和其他元数据上」

#+name: fig:da08e510
#+attr_org: :width 800
#+attr_odt: :width 10
[[attachment:2021-09-16_09-57-42_screenshot.png]]

#+name: fig:9b50705a
#+attr_org: :width 800
#+attr_odt: :width 10
[[attachment:2021-09-16_09-57-54_screenshot.png]]

** TODO [2021-09-09 Thu] 几个按键问题
- State "DONE"       from "TODO"       [2021-09-09 Thu 19:23]
  
space-j, mode-line: ctrl-k

Ctrl-z suspend-frame

evil-emacs-state, evil-exit-emacs-state


** DONE [2021-09-03 Fri] 使用magit transient来调用命令行程序?
- State "DONE"       from "TODO"       [2021-09-05 Sun 18:00]
如何可避免使用emacs-module, 改进容错.

- [[https://www.reddit.com/r/emacs/comments/f3o0v8/anyone_have_good_examples_for_transient/][Anyone have good examples for Transient? : emacs]]

#+begin_src elisp
(defun test-function (&optional args)
  (interactive
   (list (transient-args 'test-transient)))
  (message "args %s" args))

(define-infix-argument test-transient:--message ()
  :description "Message"
  :class 'transient-option
  :shortarg "-m"
  :argument "--message=")

(define-transient-command test-transient ()
  "Test Transient Title"
  ["Arguments"
   ("-s" "Switch" "--switch")
   ("-a" "Another switch" "--another")
   (test-transient:--message)]
  ["Actions"
   ("d" "Action d" test-function)])

(test-transient)
#+end_src

#+RESULTS:
| transient--resume-which-key-mode |


** DONE [2021-08-25 Wed] 改进字体设置                                   :ATTACH:
:PROPERTIES:
:ID:       aacae034-53c7-4ae8-a8b3-266aaa765e84
:END:
- State "DONE"       from "TODO"       [2021-08-25 Wed 09:20]

#+name: fig:4e8b267b
#+attr_org: :width 800
#+attr_odt: :width 10
[[attachment:2021-09-12_16-13-53_screenshot.png]]

nerd-fonts是加了各种图形化字体补丁的字体, 比如nered-fonts-ubuntu-mono

Sarasa类字体, 等宽等高, 可以解决中英文混排的问题. 不需要为org-table单独设字体了.

字形：
CL: Classical orthography
SC: Simplified Chinese
TC: Traditional Chinese
HC: Hong Kong Chinese
J : Japanese
K : Korean

对齐测试
| WenQuanYi Zenhei Mono (文泉驿等宽正黑) | 中英文，半宽，等高                                                                                  |
| Inconsolata                            | 英文，半宽                                                                                          |
| Ubuntu Mono                            | 英文，半宽                                                                                          |
|----------------------------------------+-----------------------------------------------------------------------------------------------------|
| 4VH9GANA => 2009                       | Do Quantum Mechanical Energies Calculated for Small Models of Protein-Active Sites Converge?†       |
| FIIAZG4V => 2010                       | P450 Enzymes: Their Structure, Reactivity, and Selectivity—Modeled by QM/MM Calculations            |
| JVGGKSCS => 2008                       | A theoretical investigation into the thiophene-cracking mechanism over pure Brønsted acidic zeolite |
| 🕙 16:22:34 ❯                          | test                                                                                                |

参考
- [[https://manateelazycat.github.io/emacs/2020/04/02/org-font.html][Org-Mode 表格对齐设置]]
  
** TODO [2021-08-20 Fri] 实现zotero管理界面
- [[https://github.com/chenyanming/calibredb.el/blob/master/calibredb-ivy.el][calibredb.el/calibredb-ivy.el at master · chenyanming/calibredb.el · GitHub]]
- [[https://oremacs.com/swiper/#actions][Ivy User Manual]]
- [[id:f9dbae5c-d135-47fd-be30-e788fc1e3eb7][ivy 新手教程 - Emacs-general - Emacs China]]
- [[id:dba75f6c-108f-4e84-a0ae-589065f572f6][JSON-RPC :: Better BibTeX for Zotero]]
- [[https://github.com/tmalsburg/helm-bibtex/blob/master/ivy-bibtex.el][helm-bibtex/ivy-bibtex.el at master · tmalsburg/helm-bibtex]]

不太满意
- [ ] 搜索时, keyword为空时响应非常慢.
- [ ] 无法先过滤, 然后再搜索(像zotero中, 先按tags或collection过虑过再搜索).
  ivy-bibtex可以选择多个item, 再执行统一的操作. 可以研究下. [[https://github.com/tmalsburg/helm-bibtex#apply-actions-to-multiple-entries][Apply actions to multiple entries]]
- [X] 中英文混排不对齐

*** Memo
[2021-09-12 Sun] 改进文本对齐
#+begin_src elisp :tangle no
(require 'ivy-bibtex)
(setq candidate '("2008 袁亚湘 非线性优化计算方法 book 袁亚湘2008  "
 ("year" . "2008")
 ("author" . "袁亚湘")
 ("title" . "{非线性优化计算方法}")
 ("=type=" . "book")
 ("=key=" . "袁亚湘2008")
))
(bibtex-completion-format-entry candidate 20)

(truncate-string-to-width "magit-diff: elisp-demos" 40 0 ?\s)
(truncate-string-to-width "magit-diff: elisp-好好" 40 0 ?\s)
#+end_src

[2021-08-31 Tue] 实现自动编译模块? [[https://github.com/casouri/xeft/blob/master/xeft.el][URL]]
[2021-08-25 Wed] 这个链接打不开? [[zotero://select/items/1_I9BXB5GH][@WenBin2007]] 已修复
[2021-08-23 Mon] 自己写了一个, 简洁够用.
流程:
: gwp/zotero-searcn
: Ctrl-o, o

** TODO [2021-08-01 Sun] 试用org-roam2
org-roam-server改为org-roam-ui

org-roam-ui用不起来. 弃

** DONE [2021-07-18 Sun] 解决doom-emacs升级导致的问题
- State "DONE"       from "TODO"       [2021-07-25 Sun 08:55]
原来是org/packages.el升级导致的问题

# required dependencies
pacman -S git emacs ripgrep
# optional dependencies
pacman -S fd

~/.emacs.d/bin/doom install

** DONE [2021-02-03 Wed] 解决fcitx输入汉字掉字的问题
- State "DONE"       from "TODO"       [2021-02-08 Mon 14:20]
fcitx输入太快会掉字, 这可能是emacs输入机制的一个问题. 使用emacs内置的pyim输入法
可以较好的解决这个问题.

现在有的特性:
- 使用Ctrl-\按键切换pyim输入法.
- 尽量和fcitx输入保持一致, 默认使用英文标点.
- 按下划线(_)或"\"进时临时英文输入模式.
- 英文状态下，先录入五笔码，比如(fq), 然后按F2-SPC按键进入中文输入状态, 并将光标
  下字串转换为汉字"无".
- 如果忘记五笔码，可输入拼音，按“/”键进入临时拼音输入模式.

** [2021-01-09 Sat] 解决org-mode中Tab键乱窜的问题
: (add-hook 'org-mode-hook #'evil-normalize-keymaps)

[[https://github.com/hlissner/doom-emacs/issues/2775][TAB key is not behaving properly in org-mode when #+SETUPFILE keyword is present · Issue #2775 · hlissner/doom-emacs]]
 
** DONE [2021-01-09 Sat] 解决join-line命令异常的问题
- State "DONE"       from "TODO"       [2021-01-09 Sat 10:33]
[[https://github.com/hlissner/doom-emacs/commit/40cf6139ed53b635fec37ce623c4b1093c78a11e][Make evil-join remove comment delimiters · hlissner/doom-emacs@40cf613]]

: (advice-remove #'evil-join #'+evil-join-a)

** DONE [2021-01-07 Thu] 解决自动保存时清理空格的问题
- State "DONE"       from "TODO"       [2021-01-07 Thu 16:00]
在编辑过程中自动保存后会删掉空格, 应禁用这一行为.

[2021-09-12 Sun] 似乎改进了, 重新启用.
- [[file:doom-emacs/docs/getting_started.org::*Using ~delete-trailing-whitespaces~ or ~whitespace-cleanup~ to manage leftover whitespace][Using ~delete-trailing-whitespaces~ or ~whitespace-cleanup~ to manage leftover whitespace]]

** DONE [2020-09-14 Mon] 禁用which-key-mode
- State "DONE"       from "TODO"       [2020-09-14 Mon 10:39]
响应非常慢, 以前在spacemacs中也遇到过. 禁用了之.

** DONE [2020-07-09 Thu] 试用org-roam
- State "DONE"       from "TODO"       [2020-08-07 Fri 20:37]
- [[https://www.orgroam.com/manual/Getting-Started.html#Getting-Started][Getting Started (Org-roam User Manual)]]
- [[https://www.reddit.com/r/emacs/comments/hltl69/org_roam_for_academics_demo/][Org Roam for Academics Demo : emacs]]
- [[https://www.zmonster.me/2020/06/27/org-roam-introduction.html][使用 org-roam 构建自己的知识网络 · ZMonster's Blog]]

[2021-08-01 Sun] org-capture的更佳替代品
[2020-08-07 Fri] 感觉用处不大

** DONE [2020-05-27 Wed] rust-fmt出问题了
- State "DONE"       from "TODO"       [2020-06-07 Sun 10:05]
: +format/region-or-buffer
禁用了事. 一般也仅用在rust-mode中

快捷键:
: SPC-m-f, SPC-m-C-f SPC-m-=

[2020-06-14 Sun] 已修复, 但不正常
- [[https://github.com/hlissner/doom-emacs/commit/991a205ebd439214f5e9f9d6bf68303f44221d48][Fix wrong-number-of-args error on +format/region-or-buffer · hlissner/doom-emacs@991a205]]

** DONE [2020-05-16 Sat] doom更新出问题
- State "DONE"       from "TODO"       [2020-05-27 Wed 08:49]
- https://github.com/hlissner/doom-emacs/issues/2802#issuecomment-606654151

** DONE [2020-04-27 Mon] 好像org响应有些慢了
- State "DONE"       from "TODO"       [2020-05-06 Wed 14:03]
- [[https://github.com/hlissner/doom-emacs/issues/1301][Hang when scrolling with mouse · Issue #1301 · hlissner/doom-emacs]]
- [[https://github.com/hlissner/doom-emacs/issues/2217][[BUG] Slow scrolling/cursor movement on macOS with large window · Issue #2217 · hlissner/doom-emacs]]

[2020-04-28 Tue] 初步怀疑是doom修改org中的Link或其它fontify导致的.
[2020-04-29 Wed] 确定material theme是最大的元凶

** [2020-04-24 Fri] 解决hack modules中autoloads代码无法加载的问题
需要修改autoloads中首行的路径, 同时不能使用软链接
: -;;; lang/org/autoload/org-link.el -*- lexical-binding: t; -*-
: +;;; ~/.doom.d/modules/gwp/org/autoload/org-link.el -*- lexical-binding: t; -*-

** TODO [2020-03-22 Sun] workspace保存时经常出错的问题
[2021-09-12 Sun] 最近正常
无法确定问题的根源, 有时成功, 有时失败. 成功案例:
- Cu-u SPC-l-s, 失败后再用SPC-l-s

** DONE [2020-03-20 Fri] org中narrow功能                                  :Idea:
- State "DONE"       from "TODO"       [2021-08-26 Thu 07:44]
org中进行Literate porgramming时, 如果source blocks太多, 会严重影响性能, 这时很有
必要配合narrow来进行view或tangle.

org-tree-to-indirect-buffer 比 org-narrow-to-subtree更好用, 前者不会影响全局
buffer, 可以同时浏览多个narrowed subtree, 互不影响.
- 多次使用 org-tree-to-indirect-buffer时切换narrow和widden状态.
- 使用C-u调用时, 可以同时开多个narrow buffer.

** TODO [2020-03-13 Fri] smartparens学习
- [[https://ebzzry.io/en/emacs-pairs/][Emacs and Pairs]]
- [[https://gist.github.com/pvik/8eb5755cc34da0226e3fc23a320a3c95][A Cheatsheet for Emacs Smarparens example configuration]]

| sp-kill-sexp | 删除光标附近符号对内容 |

** TODO [2020-03-13 Fri] vterm-toggle [[https://github.com/jixiuf/vterm-toggle][jixiuf/vterm-toggle: toggles between the vterm buffer and whatever buffer you are editing.]]
这个可以自定义的地方更多.

** TODO [2020-03-01 Sun] doom evil学习                                  :ATTACH:
:PROPERTIES:
:ID:       bc618f17-00a0-4e52-9236-3447cf7f72a1
:END:
- [X] [[https://github.com/noctuid/evil-guide][noctuid/evil-guide: Draft of a guide for using emacs with evil]]
- [ ] 这个和regex-align有点像 https://github.com/edkolev/evil-lion
- [ ] [[https://noelwelsh.com/posts/doom-emacs/][Noel Welsh: Doom Emacs Workflows]]
- [ ] [[https://github.com/hlissner/doom-emacs/blob/develop/modules/editor/evil/README.org][doom-emacs/README.org at develop · hlissner/doom-emacs]]
- [ ] 位置跳转: better-jumper-jump-backward. 先按ctrl-o, 跳回之前的位置, 按TAB返回.
- [ ] [[https://github.com/hlissner/evil-multiedit][hlissner/evil-multiedit: Multiple cursors for evil-mode, based on iedit]]
- [ ] [[https://github.com/gabesoft/evil-mc][gabesoft/evil-mc: Multiple cursors implementation for evil-mode]]
- [ ] indent-rigidly: C-x TAB, 可以很方便地向左或向右移动选中文本.
- [X] expand region: 可以用vi部分代替 [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#why-do-non-evil-users-get-expand-region-but-not-evil-users][URL]]
- [X] 各种注释相关操作: [[https://github.com/redguardtoo/evil-nerd-commenter][redguardtoo/evil-nerd-commenter: Comment/uncomment lines efficiently. Like Nerd Commenter in Vim]]
- [X] gd: 跳转到函数定义位置. 并不总是灵光.
- Ctrl-h b: 显示所有按键 which-key-show-keymap Ctrl-h b m

** DONE [2020-03-06 Fri] 使用 custom-set-faces!来修改theme
- State "DONE"       from "TODO"       [2020-04-25 Sat 09:07]
#+begin_src elisp :tangle no
(load-theme 'material t)
;; (load-theme 'doom-one-light t)
(custom-set-faces!
  '(org-todo :foreground "yellow" :weight bold :background "#263238")
  '(org-done :foreground "yellow" :weight bold :background "#263238")
  '(org-table :foreground "#e3f2fd")
  '(org-level1 :foreground "#e3f2fd")
  '(org-headline-done :foreground "gray")
  )
#+end_src

** DONE [2020-03-01 Sun] 各种emacs distribution
- State "DONE"       from "TODO"       [2020-04-25 Sat 09:07]
- [[https://github.com/emacs-tw/awesome-emacs][emacs-tw/awesome-emacs: A community driven list of useful Emacs packages, libraries and others.]]

** DONE [2020-04-20 Mon] 新建frame时最大化窗口
- State "DONE"       from "TODO"       [2020-04-25 Sat 08:53]
[[https://emacs.stackexchange.com/questions/2999/how-to-maximize-my-emacs-frame-on-start-up][How to maximize my Emacs frame on start-up? - Emacs Stack Exchange]]

: (add-to-list 'default-frame-alist '(fullscreen . maximized))

** DONE [2020-04-03 Fri] 试用 org-sidebar
- State "DONE"       from "TODO"       [2020-04-07 Tue 20:01]
- [[https://www.reddit.com/r/orgmode/comments/dbsngi/finally_solving_the_lack_of_a_treeview_navigation/][Finally solving the lack of a tree-view navigation window in Org : orgmode]]

用法:
- 打开 org-sidebar-tree-mode, SPC-m-s-t
- 切换narrow, SPC-m-Enter

** DONE [2020-03-24 Tue] 可以用[[https://github.com/raxod502/el-patch][el-patch]]来hack代码

- State "DONE"       from "TODO"       [2020-04-20 Mon 09:28]
https://org-roam.readthedocs.io/en/latest/ecosystem/
#+BEGIN_SRC elisp :tangle no
  (use-package deft
    ;; same as above...
    :config/el-patch
    (defun deft-parse-title (file contents)
      "Parse the given FILE and CONTENTS and determine the title.
  If `deft-use-filename-as-title' is nil, the title is taken to
  be the first non-empty line of the FILE.  Else the base name of the FILE is
  used as title."
      (el-patch-swap (if deft-use-filename-as-title
                         (deft-base-filename file)
                       (let ((begin (string-match "^.+$" contents)))
                         (if begin
                             (funcall deft-parse-title-function
                                      (substring contents begin (match-end 0))))))
                     (org-roam--get-title-or-slug file))))
#+END_SRC

** DONE [2020-02-29 Sat] 改进literate rust编程体验
- State "DONE"       from "TODO"       [2020-03-21 Sat 20:00]
- [X] rust中"{|}" 中回车行为. 原来是spacemacs中有特别配置. [[https://emacs.stackexchange.com/questions/2837/automatically-formatting-brackets][stackexchange]]
- [X] Tab键自动使用yas展开代码. 禁用init.el中snippets.
- [X] 还原在normal/insert state下, Ctrl-k的行为: org-kill-line
- [X] rustic新加的功能虽多, 但用处都不大. 还是用rust-mode好了.
- [X] org-edit-src-exit: 不能定义为Ctrl-C Ctrl-C, 因为org-src里的主模式很多会用到这个键.
- [X] 全局禁有flyspell-mode
- [X] ctrl-d又不管用了, alt-l
- [X] evil-org: 在source code中的enter行为. 改为进入代码.
- [X] magit响应慢
- [X] use structopt::*中, 输出*会出现两个, 按/会出现两个.
- [X] visual state下Tab键应该indent代码

** DONE [2020-02-28 Fri] 太多需要修改的地方了, 只能一点点改进, 慢慢搭
- State "DONE"       from "TODO"       [2020-03-21 Sat 20:00]
- [X] 去掉dired中图标显示及其它多余功能, 简单稳定就好
- [X] org-capture功能
- [X] odt exports功能
- [X] zotero links
- [X] 添加re-open当前文件功能? [[https://emacs.stackexchange.com/questions/3330/how-to-reopen-just-killed-buffer-like-c-s-t-in-firefox-browser][URL]]
- [X] dired-copy-filename-as-kill 复制文件路径, 可以 spc-m y
- [X] 将spc-o-T改成和spacemacs一样. vterm也就是图方便, 功能上还是不如gnome-terminal之类顺手.
- [X] [[https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/window-select/README.org][window-select]] 可以用C-w C-w, 比spacemacs下更方便.
- [X] 看来还是得用evil-org. 比如dd命令在hide状态下应该为 delete subtree
- [X] o: evil-org-open-below +org/insert-item-below, 可以用ctrl-enter, ctrl-shift-enter
- [X] (spacemacs/open-file-or-directory-in-external-app ARG)
- [X] insert-mode下 Ctrl-h 应为help
- [X] insert-mode: ctrl-d evil-shift-left
- [X] SPC-c l, comment line
- [X] 检查单词: z=, flyspell-correct-at-point (启用spell module即可)
- [X] flyspell错字提示 (可以手动关掉, flyspell-mode, SPC-t s)
- [X] insert-mode下 Ctrl-y 键应为粘贴
- [X] org-metaright, org-demote-subtree
- [X] helm-resume => SPC r l
- [X] deadgrep notes

** DONE [2020-03-14 Sat] 中文字体设置 [[https://emacs-china.org/t/doom-modeline-2-1-0/9251/13][URL]]
- State "DONE"       from "TODO"       [2020-03-15 Sun 09:45]
可以去掉cnfonts, 直接中英文分开设置, 解决modeline显示异常的问题.

** DONE [2020-03-10 Tue] 启用format模块
- State "DONE"       from "TODO"       [2020-03-10 Tue 21:16]
- [[https://github.com/lassik/emacs-format-all-the-code][lassik/emacs-format-all-the-code]]

需要的工具:
- Shell script (shfmt)
- Python (black)
- Rust (rustfmt)

对于快捷键 SPC-c-f

** DONE [2020-03-05 Thu] 截图新方式: org-capture + org-download? :ATTACH:
:PROPERTIES:
:ID:       e0591a18-e431-46bc-a5b5-568eeee5c567
:END:
- State "DONE"       from "TODO"       [2020-03-06 Fri 14:29]
使用xclip将clipboard中的image另存为文件, 然后再调org-download截图.

#+DOWNLOADED: screenshot @ 2020-03-06 16:07:53
#+caption: 截图留念
#+name: fig:feaf75a4
#+attr_org: :width 500
#+attr_odt: :width 10
[[attachment:2020-03-06_16-07-53_screenshot.png]]

- 参考: [[https://emacs.stackexchange.com/questions/41016/how-can-i-yank-images-from-emacs][osx - How can I yank images from Emacs? - Emacs Stack Exchange]]
- [2020-03-06 Fri] org-download-delete有问题, 不能用了.
- 使用下面的脚本, 从X11 clipboard复制截图, 这样避免了截图时emacs窗口如何最小化的
  问题. [2020-03-06 Fri] 不太好用, 用rust重写了.
  #+begin_src shell :tangle no
  set -e
  if [ "x$1" = "x" ]; then
      echo "Usage: [options] $0 file..." >&2
      exit 1
  fi

  xclip -selection clipboard -t image/png -o > "$1"

  # remove zero sized file
  [ ! -s "$1" ] && rm "$1"
  #+end_src

** DONE [2020-03-02 Mon] 完成ripgrep搜索notes功能
CLOSED: [2020-03-02 Mon 14:49]
- State "DONE"       from              [2020-03-02 Mon 14:49]
需要修改ripgrep配置, 使之能follow symlinks. [[https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#configuration-file][ripgrep/GUIDE.md at master · BurntSushi/ripgrep]]

相关文件:
: ~/.ripgreprc
: ~/.zshrc

** DONE [2020-03-01 Sun] 关于ispell的问题
CLOSED: [2020-03-01 Sun 19:35]
- State "DONE"       from "TODO"       [2020-03-01 Sun 19:35]
以前常用 ispell-word 来查词, 现在发现得开启ispell-mode后才正常, 不然会报错.

** DONE [2020-02-28 Fri] 解决org-mode中怪异的Tab键行为问题
CLOSED: [2020-02-28 Fri 15:42]
- State "DONE"       from "TODO"       [2020-02-28 Fri 15:42]
- [[https://github.com/hlissner/doom-emacs/issues/1897][[BUG] org-mode TAB key mapped to different command when emacs running as daemon · Issue #1897 · hlissner/doom-emacs]]

去掉:config中的 +bindings 开关正常了.

** DONE [2020-02-28 Fri] 可用的theme
CLOSED: [2020-02-29 Sat 18:12]
- State "DONE"       from "TODO"       [2020-02-29 Sat 18:12]
[[*theme][theme]]
: doom-acario-light
: doom-material
: doom-moonlight
: doom-nord-light x
: doom-nord
: doom-oceanic-next
: doom-one-light x
: doom-opera-light x
: doom-palenight
: doom-peacock x
: doom-snazzy
: doom-tomorrow-day x
: doom-vibrant

** DONE [2020-02-27 Thu] 解决 org-mode 插入时间戳快捷键被占用的问题
CLOSED: [2020-02-28 Fri 15:42]
- State "DONE"       from "TODO"       [2020-02-28 Fri 15:42]
: C-c ! (org-time-stamp-inactive)

禁用:checkers组中的modules即可.

** DONE [2020-02-27 Thu] doom尝鲜
- State "DONE"       from "TODO"       [2020-04-07 Tue 20:02]
doom的优点:
1. 较spacemacs轻量, 启动快, 架构简单, 后续易维护
2. 和spacemacs使用类似的key-bindings
3. 社区质量高, 作者维护热情高

修改配置时注意:
1. 不要使用emacs中内置的custom机制
2. 不用使用use-package中的包安装机制(:ensure)
3. 不要使用org-babel中的rg-babel-do-load-languages机制

- config中的flags: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#flags][doom-emacs/getting_started.org at develop · hlissner/doom-emacs]]
- doom api: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#map][doom-emacs/api.org at develop · hlissner/doom-emacs]]

https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/rest/README.org

https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/zen/README.org

https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/workspaces/README.org

https://github.com/hlissner/doom-emacs/issues/2483

doom clean && doom sync && doom build

https://github.com/emacs-tw/awesome-emacs

git clone https://code.orgmode.org/bzg/org-mode.git

doom要clone很多github上的repo, 很容易被RESET, 导致安装失败.

git使用v2ray proxy
https://gist.github.com/evantoli/f8c23a37eb3558ab8765

https://segmentfault.com/q/1010000000118837

** [2018-08-22 Wed] 禁用自动为babel source block生成name的功能.
用处不大.

** [2018-06-01 Fri] 解决expand-region在org-mode buffer中的问题
使用扩选功能时, expand-region会自动展开显示之前隐藏outline中的内容, 导致显示内容跳转.

解决方案:
- 修改expand-region.el, 删除掉 "(eval-after-load 'org)" 相关内容

** DONE [2018-01-24 Wed] 修复org-capture, org-protocol中的几个bug
- State "DONE"       from "TODO"       [2020-08-01 Sat 16:20] \\
  换用doom后没再发现
- [X] 在org-capture中, 如果abort会删掉refile.org最开头条目的星号.
- [X] firefox中, org-protocol在某些网页中无法激活. 是firefox中的"content security policy"捣的鬼. 在config里禁用即可. "security.csp.enable"
- [X] [[https://www.reddit.com/r/firefox/comments/k64ha0/fix_allow_this_site_to_open_the_protocol_link/][Fix "Allow this site to open the PROTOCOL link with APPLICATION" warning : firefox]]

** DONE [2018-01-06 Sat] 解决odt导出latex公式分辨率太低的问题
CLOSED: [2018-01-10 Wed 16:18]
- State "DONE"       from "TODO"       [2018-01-10 Wed 16:18] \\
  odt使用dvipng导出公式时生成的图片分辨率太低, 这里放大3倍, 然后通过设置odt dpi为
  300(默认为96), 将image缩小为原始大小.

** [2017-12-12 Tue] 修改org-download设置, 调整odt导出参数
自定义org-download-annotate-function
- 自动添加图片的 ~name~ ~caption~, 方便odt导出时图片自动编号及交叉引用.
- 自动添加 ~#+attr_org~ 属性, 设置org预览图片的大小
- 自动添加 ~#+attr_odt~ 属性, 设置odt导出时的图片大小

References
- [[http://kitchingroup.cheme.cmu.edu/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them/][Drag images and files onto org-mode and insert a link to them]]

** [2017-11-19 Sun] 添加新功能, 在buffer或dired当前目录中打开gnome-terminal
按键: ~SPC o T~

** TODO [2017-11-13 Mon] 完善org-to-read 实现类似zotfile的功能
[2017-11-17 Fri] 类似没太大必要. 有更流畅的方式?

- 自动将当前headline下的附件放至某个READ目录
- 手机上阅读并注释, 并同步回修改.
- 切回DONE状态时从READ目录里取回修改后的版本, 并导出pdf注释.

References
- [[https://github.com/machc/pdf-tools-org][machc/pdf-tools-org: pdf-tools and org-mode integration]]
- [[http://tech.memoryimprintstudio.com/pdf-annotation-related-tools/][PDF Annotation Related Tools – Emacs, Arduino, Raspberry Pi, Linux and Programming etc]]
- [[http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/][View and annotate PDFs in Emacs with PDF-tools | Pragmatic Emacs]]
- [[https://matt.hackinghistory.ca/2015/11/11/note-taking-with-pdf-tools/][Note Taking with PDF Tools | Thoughts on Code & History]]
- [[https://github.com/politza/pdf-tools/issues/134][extract annotations? · Issue #134 · politza/pdf-tools]]
- [[https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/][Help me with my org-mode workflow for note-taking? : emacs]]

** DONE [2017-11-10 Fri] 进一步改进org-attach功能 方便移动不同的outline及其attachments
- State "DONE"       from "TODO"       [2021-09-03 Fri 17:47]
- State "DONE"       from "TODO"       [2017-11-10 Fri 20:37]

操作流程
- 存储当前entry的附件内容: gwp/org-attach-copy
- 将当前org entry文本移动到新的文件中
- 将之前存储的附件内容复制到新的attachment目录中来: gwp/org-attach-paste. 此时会
  自动生成与之前相同的attach目录和文件.

** DONE [2017-11-10 Fri] 修改tangle函数, 能更方便的tangle代码
- State "DONE"       from "TODO"       [2020-04-07 Tue 20:03]
将gwp/org-babel-tangle-dwim绑定到 ~SPC o b~
- 使用 ~Ctrl-c '~ 进入代码窗口
- 修改代码后, 按 ~SPC o b~
- 该函数自动保存代码, 并tangle对应文件

** DONE [2017-10-27 Fri] 完善org-protocol和org-capture             :Starred:
CLOSED: [2017-11-01 Wed 10:34]

- 添加将html页面生成org-mode link功能, 通过clipboard来与emacs交互. 解决KDE下capture窗口失焦问题 [2021-09-09 Thu]
- 进一步完善js代码
- 进一步优化bookmarklet, 方便在firefox中使用 [2018-01-24 Wed 21:02]
- State "DONE"       from "TODO"       [2017-11-01 Wed 10:34]

*** store-link
版本1: 使用selection或URL做为description
#+BEGIN_SRC javascript
  javascript:
  var title = window.getSelection();
  if (title == '') {
      title = 'URL';
  }

  location.href = 'org-protocol:///store-link?url=' + encodeURIComponent(location.href) + '&title=' + encodeURIComponent(title);
#+END_SRC

版本2: 使用selection或document title做为description. 如果没有, 默认为URL.
#+BEGIN_SRC javascript
javascript:
var title = window.getSelection();
if (title == '') {
    title = document.title;
    if (title == '') {
        title = 'URL';
    }
}

location.href = 'org-protocol:///store-link?url=' + encodeURIComponent(location.href) + '&title=' + encodeURIComponent(title);
#+END_SRC

*** capture
使用'n'模板: 插入当前页面的链接, 使用页面标题或URL做为链接描述. 引用选中文字.

#+name: 12d167c2-43c7-4f54-9a27-2b55432d113d
#+BEGIN_SRC javascript
javascript:
var title = document.title;
if (title == '') {
    title = 'URL';
}

location.href = 'org-protocol:///capture?template=n' + '&url=' + encodeURIComponent(location.href) + '&title=' + encodeURIComponent(title) + "&body=" + encodeURIComponent(window.getSelection());
#+END_SRC

*** clipboard
生成org链接, 方便capture. 不需要走 org-protocol.

链接生成规则: 如果有选中文字, 则以选中文字为title, 否则以页面标题为链接title. 如
果页面标题也为空, 则以"URL"为链接显示标题.

[[https://gist.github.com/stefanmaric/2abf96c740191cda3bc7a8b0fc905a7d][Create Bookmarklet (browser bookmark that executes Javsacript) to copy a given text to Clipboard]]

#+begin_src js
var title = window.getSelection();
if (title == "") {
  title = document.title;
}
if (title == "") {
  title = "URL";
}
(function (text) {
  var node = document.createElement("textarea");
  var selection = document.getSelection();

  node.textContent = text;
  document.body.appendChild(node);

  selection.removeAllRanges();
  node.select();
  document.execCommand("copy");

  selection.removeAllRanges();
  document.body.removeChild(node);
})("[[" + location.href + "]" + "[" + title + "]]");
#+end_src

javascript:void function(){var a=window.getSelection();""==a%26%26(a=document.title),""==a%26%26(a="URL"),function(a){var b=document.createElement("textarea"),c=document.getSelection();b.textContent=a,document.body.appendChild(b),c.removeAllRanges(),b.select(),document.execCommand("copy"),c.removeAllRanges(),document.body.removeChild(b)}("[["+location.href+"]["+a+"]]")}();

*** References
原理: 通过劫持emacsclient功能, 将org-protocol://之类的URL与org-mode实现功能交互.
- org-capture.el
- [[https://www.ruanyifeng.com/blog/2011/06/a_guide_for_writing_bookmarklet.html][Bookmarklet编写指南 - 阮一峰的网络日志]]
- https://github.com/alphapapa/org-protocol-capture-html
- org capture extensions: https://github.com/sprig/org-capture-extension
- [[http://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol.el – Intercept calls from emacsclient to trigger custom actions]] (outdated)
工具
- 从js代码生成url: [[https://chriszarate.github.io/bookmarkleter/][Bookmarkleter]]
- [[http://jsbeautifier.org/][Online JavaScript beautifier]]
- [[https://mrcoles.com/bookmarklet/][Bookmarklet Creator with Script Includer - Peter Coles]]

** [2017-10-06 Fri] 解决org-mode加载大文件太慢的问题
- [2017-10-07 Sat] 发现是hl-todo这个包导致的问题. 禁用该包即可.
- [2017-10-06 Fri] 使用spacemacs-base distrubtion即可.
** [2016-12-10 Sat] 禁用选中的文字进入clipboard的功能 [[https://github.com/syl20bnr/spacemacs/blob/master/doc/FAQ.org#prevent-the-visual-selection-overriding-my-system-clipboard][URL]]
: ;; Prevent the visual selection overriding my system clipboard
: (fset 'evil-visual-update-x-selection 'ignore)

** [2016-12-10 Sat] 修改spacemacs中默认的undo行为 默认的undo太变态了
: (setq evil-want-fine-undo t)

** [2016-10-14 Fri] emacs24-starter-kit 更新维护不是很活跃. 现在已是 emacs25 时代了. 考虑换到 spacemacs


* Tips
~SPC h d~
** Universal arguments
SPC-u, C-u
** Swiper/Ivy notes
| 命令                 | 功能                                   | Tips                                           |
|----------------------+----------------------------------------+------------------------------------------------|
| counsel-recentf      | 打开最近文件列表                       | 按C-o,f可强制在新的frame打开                   |
| counsel-org-goto     | 跳转到org headline                     | SPC-m .                                        |
| counsel-org-goto-all | 跳转到所有org buffers的headline        | SPC-m /                                        |
| ivy-occur            | 将ivy candidates界面变成可交互的buffer | 支持wgrep, 比如c-x-c-q                         |
| counsel-org-tag      | 用于打标签. (SPC-m-q)                  | 当ctrl-c ctrl-c不好用是可用这个, 比如capture时 |

** org-mode
| org-kill-note-or-show-branches | C-c C-k | 查看headlines, 当前上下文TAB键无效时有用 |
| org-edit-special               | C-c '   | 默认按键难按, 改为SPC-M-;                |


** 自动补全
- [[https://github.com/hlissner/doom-emacs/blob/develop/modules/completion/company/README.org][doom-emacs/README.org at develop · hlissner/doom-emacs]]

| C-x C-f | 补全文件名, 类vim |
| C-x s   | 补全 yasnippet    |

** 查看buffer major mode
eval: major-mode

** 各种跳转
| g;              | last-change            |
| SPC-s-i         | imenu symbol           |
| Alt-mouse-wheel | jump backward/foraward |

** 编辑功能
选中文字后按S, 再按"(" 可在选中字符前后加括号.

** dired-jump
| SPC-f-j |

** window/frame
- 最大化或还原当前窗口: Ctrl-w mm 或SPC-w mm: Maximize / restore the current buffer
- SPC-w o, 最大化popup
- 新开frame, SPC-o-f, make-frame
- zoom: 可以自动放大当前的 window 区域: SPC w z

| ~SPC w v~ | vertical split |
| ~SPC w d~ | remove window  |
| ~SPC w r~ | swap windows   |
| ~SPC w f~ | follow mode    |

** 调试emacs
真好用.
: debug-on-error

在doom里可以用 SPC-h-d-d

也可启用profiler, SPC-h-d-t, 查看命令调用堆栈

** 书签管理
: SPC-f-b

#+BEGIN_SRC emacs-lisp :tangle no
(counsel-bookmark)
#+END_SRC

** multiple-cursors
按Alt-D高亮word, 逐步选中多个可编辑单元. 按ESC退出.

** 删除空格
- just-one-space 默认绑定为 ~Ｍ-SPC~

** 切换只读模式
: C-x C-q
: SPC-t r

** magit
- 在magit status窗口, 可以直接使用dired访问文件: magit-dired-jump (C-M-i)
- 使用yadm管理dotfiles, SPC-g-.

| magit-status          |                             |
| magit-stage-file      |                             |
| magit-log-buffer-file | Show log for current buffer |

: reset: O
: discard: x

处理当前文件的编辑历史:
: magit-file-dispatch

** Movement
| Key Binding | Description                            |
|-------------+----------------------------------------|
| ~g h~       | Move up one level in headings          |
| ~g j~       | Move to next heading on same level     |
| ~g k~       | Move to previous heading on same level |
| ~g l~       | Move down one level in headings        |

** 粘贴替换选中文字
vi模式下使用P命令.

** 使用外部程序打开文件的方式
emacs 默认使用 docview mode 来打开链接的文件, 比如 PDF 等, 不太方便. 操作步骤:
1. dired-jump (SPC fj): 使用 dired 打开当前文件所在目录
2. 在 dired 界面上选择某个文件, 使用 external 程序打开 (SPC fo).
3. 也可以在 dired 界面上用"!"或"&"命令, 指定任意程序打开.

** 打开buffer文件所在目录
~SPC-u SPC-f-o~
* TODO Roam research
** org-roam
我觉得可以基于zotero来实现类似roam的组织方式. 在zotero中可以打标签, 也可以设置
related items. 同时zotero中的items也是平级组织, 统一命名, 使用zotero uri可以在
org文档中自由引用跳转. 现在唯一欠缺的时像org-roam-server那样可以交互式的展现关联
条目的network展现方式.

org-roam可用于替代org-capture, 这样在浏览时随时记录, 并可保留note间的关联性. 同
时由于是多文件, 可以减少文件同步冲突.

org-roam-capture
org-roam-node-find
org-roam-node-insert
org-roam-buffer-toggle

** TODO 笔记管理系统思考
- 火花笔记, fleeting note, slip-box: 这些用org-capture就很好, 关键是快, 电光石火
- 永久笔记, permanent note: 这些可放置在zotero里. 使用zotero数据库, 可实现条目的
  永久链接, 不受笔记路径变化的影响.

关键功能:
- 双向链接 backlinks
- 块引用
  - [[https://github.com/nobiot/org-transclusion][nobiot/org-transclusion: (alpha) Emacs package to enable transclusion with Org Mode]]
  - [[https://github.com/Kinneyzhang/roam-block][Kinneyzhang/roam-block: An all-purpose block ref and block embed implement in emacs.]]
- 图表展示(可用org-protocol链接)

* TODO Literate Programming in Rust
需要安装[[https://github.com/racer-rust/racer][racer]], 注意不能用系统库中的, 不然补全std会报错.

: rustup toolchain add nightly
: rustup component add rust-src
: cargo +nightly install racer
: racer complete std::io::B 

- 使用 "Ctrl-c Ctrl-d" 可以自动添加或删除dbg!
- 使用 "Ctrl-c Ctrl-f" rustfmt格式化buffer
- 以上按键在org代码块中也可直接执行, org-babel-do-key-sequence-in-edit-buffer
- rust-promote-module-into-dir

* TODO Python scripting
- 使用tmux开一终端, 打开ipython
- 在emacs中写代码, 使用 +tmux/send-region来发送代码到ipython窗口
 
* TODO Research Writing Workflow
** 基本流程
- 使用org-mode来完成文字, 图片, 表格, 公式等内容.
- 导出为odt格式.
- 使用[[http://zotero-odf-scan.github.io/zotero-odf-scan/][RTF/ODF-Scan for Zotero]] 来格式化zotero引用.
  - [2018-01-05 Fri] 已自定义export函数, 不必使用odf-scan, odt导出一步到位.
- 在Libreoffice中进行必要的修改.
- 输出PDF和或doc.

** org odt export
- odt导出功能非常强大, 对于普通用户, odt无疑比latex的易用性和可定制性更强.
- 可以在org buffer里指定odt模板文件. 使用odt而不是ott格式会更方便一些, 因为打开
  ott时没有具体的内容可参照修改结果.
- 码公式的时候, 使用"begin{equation*}"block, odt会自动编号. 不能设置scale, width
  等图片属性.

References
- [[https://github.com/emacsmirror/org/blob/master/lisp/ox-odt.el][org/ox-odt.el at master · emacsmirror/org]]
- [[https://orgmode.org/manual/OpenDocument-Text-export.html][The Org Manual: OpenDocument Text export]]

** RTF/ODF-scan插件
这个插件可以将纯文本的引文标记, 格式化为zotero word processor可处理的zotero引文.
此外, 这个扩展还可以反向的将zotero word processor处理后的引文转换成纯文件标记.

从官网下载扩展后, 在zotero standalone的addone窗口安装.

1. 在zotero中设置好quick copy的输出格式为 "scannable cite".
2. 在zotero中选择目标条目, 将其拖入org-mode当即可.
3. 通过修改config选项(ODFScan.useZoteroSelect), odfscan marker字段中的最后一项也
   可以为zotero链接. 但在格式化时不能正常生成odt文件, 这可能是一个bug.

* TODO Research Literature Management Workflow
将annotation.note放到zotero内置库里的优点和问题:
- 优点: 以zotero为中心进行数据管理. 从文献到笔记很方便.
- 优点: note和pdf路径相对稳定, 不用担心更换系统后文件路径变化导致的问题.
- 优点: 方便实现类似roam等工具类似的功能.
- 问题: 不能方便地在zotero界面里进行搜索 (需要fulltext index) (但可以用自编工具
  notesearch来处理, 不过需要定期更新cache)

** Zotero笔记管理
- 在Emacs中gwp/insert-new-zotero-item, 将在zotero中新添加一report类似的note
- 在Zotero界面选中某文献, 右键Attach New File, 将自动附上一note文件

** 使用org-noter批注PDF
- [2021-08-19 Thu] org-noter也很长时间没有更新了
- [2020-01-01 Wed] org-noter比interleave功能更强.
  
将pdf文件关联到emacs, 使用pdf-tools打开(pdf-view-mode)
- 进入org-noter界面(SPC-n-n), 按提示将 annotation.note放到PDF所在目录
- 使用org-noter插入笔记
  
优点:
- Note和PDF直接关联, 不需要写任何代码. 方便易用.
- 原始zotero数据库中的为父本, 不同Note中的批注的有不同的副本.
需要更新.cache/notes列表.
  
流程:
- 在zotero界面, 选中待批注的PDF, "copy attachment path"
- 在普通的org文件中将zotero中的PDF列为附件.
- 打开org-noter批注该附件(space-m-n-n).

pdf-view快捷键
- pdf-view-scroll-down-or-previous-page: ctrl-d, ctrl-b
- pdf-view-scroll-up-or-next-page: ctrl-u, ctrl-f
- pdf-view-next-page-command: ctrl-j
- pdf-view-previous-page-command: ctrl-k
- pdf-view-first-page: gg
- pdf-view-last-page: G
- pdf-view-fit-width-to-window

鼠标
- 上一页: mouse-9
- 下一页: mouse-10

** 使用interleave批注流程(old)
- 在zotero界面, 选中待批注的PDF, "copy attachment path"
- 打开org-capture, 使用interleave模板, 生成~/annotation.note
- 在zotero界面, 使用zotfile的 "Attach New File"功能, 自动将annotation.note加入附
  件. (注意需要修改设置, 将note列入zotfile可管理的文件类型)
- 在zotero界面, 双击打开附入的note文件, 进入interleave编辑模式.

** References
- [[https://codearsonist.com/reading-for-programmers][Piotr Limanowski: Reading for Programmers]]
- [[https://www.researchgate.net/post/What_reference_manager_is_used_for_Emacs_users][What reference manager is used for Emacs users?]]
- [[http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/][A research workflow with Zotero and Org mode | mkbehr.com]]
- [[https://emacs.stackexchange.com/questions/24725/zotero-workflow-into-emacs][org mode - zotero workflow into emacs? - Emacs Stack Exchange]]

* TODO Literate Programming Workflow
- 在代码窗口编辑时, 使用C-x C-s来保存buffer. 不要使用:w, 这样会多出一份代码的临时文件
- 代码修改后, 使用gwp/org-babel-tangle-block函数来仅tangle当前block对应的代码文
  件. 可以在代码编辑窗口直接使用, 该函数会自动保存代码.
- 使用swoop来实现常规跳转, 使用helm-org-in-buffer-headings实验代码块跳转.
- 重要的tangle参数已在配置文件中做全局设置, 比如: ~padline~ ~mkdirp~ ~comments~

* TODO scripts
** org-archive.py
:PROPERTIES:
:header-args: :tangle pkg/.local/bin/org-archive.py :comments link :padline yes :mkdirp yes :shebang #! /usr/bin/env python2
:END:
*** TODO [2015-11-29 Sun] 使用 Kitchin 的 ox-archive.el 代替旧的 org-archive.py [[https://github.com/jkitchin/jmax/blob/master/ox-archive.el][URL]]
*** header
#+begin_src python
# -*- coding: utf-8 -*-
#====================================================================#
#   DESCRIPTION:  create tar.xz archive of org-mode file including
#                 all files under current directory
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#         NOTES:  ---
#        AUTHOR:  Wenping Guo (ybyygu)
#         EMAIL:  winpng@gmail.com
#       LICENCE:  GPL version 2 or upper
#       CREATED:  <2011-11-18 Fri 13:29>
#       UPDATED:  <>
#====================================================================#
#+end_src

*** globals
#+begin_src python
__VERSION__ = '0.1'
__UPDATED__ = '2013-01-16 14:13:56 ybyygu'

import sys
import os
import re
import urllib

rex_file = re.compile(r'.*\[\[file:([^\]]+)\]')
rex_css = re.compile(r'.*href="([^"]+)".*')

#+end_src
*** main
#+begin_src python
def find_linked_files(filename):
    """
    find linked files (image or css style etc) from filename in
    org-mode syntax
    """
    files = []

    with open(filename) as fp:
        for line in fp:
            if rex_file.match(line):
                afile = rex_file.match(line).groups()[0]
                if afile:
                    files.append(afile)
            elif rex_css.match(line):
                afile = rex_css.match(line).groups()[0]
                if afile and not afile.startswith("http"):
                    files.append(afile)

    return files

def make_tar_archive(files, archive_name):
    import tarfile

    tar = tarfile.open(archive_name, mode="w", dereference=True)
    lists = set([])
    for afile in files:
        afile = urllib.unquote(afile)
        if os.path.exists(afile):
            print("included {}".format(afile))
            lists.add(afile)
        else:
            print("{} is not in current directory!".format(afile))
    for afile in lists:
        tar.add(afile)
    tar.close()


def main(argv=None):
    import optparse

    if argv == None: argv = sys.argv

    # parsing cmdline
    cmdl_usage = 'usage: %prog [options]...[queue_id]'
    cmdl_version = "%prog " + __VERSION__
    cmdl_parser = optparse.OptionParser(usage=cmdl_usage, \
                                        version=cmdl_version, \
                                        conflict_handler='resolve')
    cmdl_parser.add_option('-h', '--help',
                           action='help',
                           help='print this help text and exit')
    cmdl_parser.add_option('-v', '--version',
                           action='version',
                           help='print program version and exit')
    # cmdl_parser.add_option('-f', '--file', dest='file',
    #                         help='start from this gjf file')
    # cmdl_parser.add_option('-p', '--pause', dest='pause',
    #                         action="store_true", default=False,
    #                         help='pause running job.')
    (cmdl_opts, cmdl_args) = cmdl_parser.parse_args()

    filename = cmdl_args[0]

    files = find_linked_files(filename)
    files.append(filename)
    make_tar_archive(files, archive_name="{}.tar".format(filename))

if __name__ == '__main__':
    main()
#+end_src

** emacsclient-open
:PROPERTIES:
:header-args: :tangle pkg/.local/bin/emacsclient-open.py :comments link :padline yes :mkdirp yes :shebang #! /usr/bin/env python
:END:
[2021-09-09 Thu] 这个用不上了.
*** header
#+begin_src python
# -*- coding: utf-8 -*-
#==============================================================================#
#   DESCRIPTION:  open text file with emacsclient and register the it into the
#                 recently-used-files list (~/.recently-used.xbel)
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#         NOTES:
#        AUTHOR:  Wenping Guo (ybyygu)
#         EMAIL:  winpng@gmail.com
#       LICENCE:  GPL version 2 or upper
#       CREATED:  <2010-09-01 Wed 16:04>
#       UPDATED:  <>
#==============================================================================#
#
# basically, to make emacsclient perfect, there are three things need be done:
# 1. use parameter "-a ''", that is, use a void alternate-editor to automatically start
#    emacs daemon
# 2. open the file without "-n" option to make sure the file buffer will be killed when frame
#    is closed
# 3. if the file has been opened, use "-n" option.
#+end_src

*** main
#+begin_src python
import os
import sys
import subprocess

def check_emacs_client(path):
    """check if the file has been opened by emacsclient"""
    cmdlines = ["/usr/bin/pgrep", "-fa", "emacsclient -c"]
    output = subprocess.Popen(cmdlines,
                              universal_newlines=True,  # output is a str not bytes
                              stdout=subprocess.PIPE).stdout.read()
    print(output)
    if path in output:
        return True
    return False

if len(sys.argv) == 1:
    print("%s: open file using emacsclient." % (__file__))
    sys.exit(0)

path = os.path.abspath(sys.argv[1])
if check_emacs_client(path):
    print("{:} is opened.".format(path))
    args = ["emacsclient", "-n", path]
    subprocess.call(args)
else:
    args = ["emacsclient", "-c", "-a", "", path]
    subprocess.Popen(args)
#+end_src

** pdf-view
以全屏窗口打开PDF文件
#+header: :shebang #! /usr/bin/env bash
#+begin_src sh :tangle pkg/.local/bin/emacs-pdf.sh
emacs --maximized --file "$*" --eval "(pdf-view-fit-width-to-window)"
#+end_src

** org-agenda
#+header: :mkdirp yes :comments yes :padline yes
#+header: :shebang #! /usr/bin/env bash
#+begin_src sh :tangle pkg/.local/bin/org-agenda.sh
emacsclient -c -e "(org-agenda nil \"gt\")" -e "(delete-other-windows)"
#+end_src

** org-scratch
#+header: :mkdirp yes :comments yes :padline yes
#+header: :shebang #! /usr/bin/env bash
#+begin_src sh :tangle pkg/.local/bin/org-scratch.sh
emacsclient -c -e "(find-file \"~/Notes/scratch.note\")" -e "(delete-other-windows)"
#+end_src


** org-capture
[2021-09-01 Wed] 用doom自带的更好. doom-emacs/bin

可绑定全局按键, 随时记录所思所想.

#+header: :tangle pkg/.local/bin/org-capture.sh :shebang #! /usr/bin/env bash
#+header: :mkdirp yes :comments yes :padline yes
#+begin_src shell
emacsclient -c -F "((fullscreen . maximized))" -e "(org-capture)"
#+end_src

** stop-daemon
#+begin_src shell
/usr/bin/emacsclient --no-wait --eval "(progn (setq kill-emacs-hook nil) (kill-emacs))"
#+end_src

** take-screenshot-dwim
[2020-03-08 Sun] 用不上了, 现在clipboard方案.
屏幕截图时隐藏当前窗口, 完成后再切回原窗口. 需要安装xdotool工具.
#+header: :tangle no
#+begin_src shell
[[ $# < 1 ]] && echo "no image path" && exit 0

# switch to active window
xdotool keydown alt key Tab; xdotool keyup alt
# take a screenshot
deepin-screenshot -n -s "$1" 2>/dev/null
# switch back
xdotool keydown alt key Tab; xdotool keyup alt
#+end_src

** start-terminal
gnome-terminal使用client/server架构, 没法在emacs中直接打开, 需要清除几个环境变量.
#+header: :tangle pkg/.local/bin/terminal-dwim.sh :shebang #! /usr/bin/env bash
#+begin_src shell
unset GNOME_TERMINAL_SCREEN
unset GNOME_TERMINAL_SERVICE
gnome-terminal $*
#+end_src

[2021-04-05 Mon] alacritty现在真好用. 可以放弃gnome-terminal了.

** org-read-todo
#+BEGIN_SRC sh
dir_read_root=~/ToDo/READ/Research
dir_topic=$(basename "`pwd`")

dir_read="$dir_read_root"/"$dir_topic"

mkdir -p "$dir_read"

cp "$(pwd)/${1#file:}" "$dir_read"/
#+END_SRC

** org-read-done
#+BEGIN_SRC sh
dir_read_root=~/ToDo/READ/Research
dir_topic=$(basename "`pwd`")

dir_read="$dir_read_root"/"$dir_topic"

path="$dir_read"/$(basename "${1#file:}")

[[ -f "$path" ]] && rm -f "$path"
#+END_SRC

* TODO desktop integration
** emacsclient-open
可用于打开.note和.pdf文件
#+begin_src text :tangle pkg/.local/share/applications/gwp-emacsclient.desktop :mkdirp yes :comments no
[Desktop Entry]
Version=1.0
Name=Emacs Client - GWP
GenericName=Text Editor
Comment=View and edit files
MimeType=application/x-note;application/pdf;text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacsclient --create-frame --alternate-editor="" --no-wait %F
TryExec=emacs
Icon=emacs
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
#+end_src

** org-protocol
#+header: :tangle pkg/.local/share/applications/gwp-org-protocol.desktop :comments nil
#+BEGIN_SRC text
[Desktop Entry]
Name=org-protocol
Exec=emacsclient %U
Icon=emacs
Type=Application
Terminal=false
MimeType=x-scheme-handler/org-protocol;
#+END_SRC

: xdg-open 'org-protocol://store-link?url=https%3A%2F%2Forgmode.org%2Fworg%2Forg-contrib%2Forg-protocol.html' 
: xdg-open 'org-protocol:///capture?template=n&url=http://www.baidu.com'

** firefox
- 注册 [[*org-protocol][org-protocol]]
- 并用 update-desktop-database, 更新MIME数据库
  #+begin_src shell
  update-desktop-database ~/.local/share/applications -vv
  #+end_src

- 在Firefox中禁用security.csp.enable选项
- 使用bookmarklets来capture网页内容

** org-capture
[2021-08-28 Sat] 似乎用处不大了
#+begin_src text :tangle pkg/.local/share/applications/gwp-org-capture.desktop :mkdirp yes
[Desktop Entry]
Version=1.0
Name=Org Capture
Comment=Capture using emacs org-mode
Exec=org-capture.sh
TryExec=emacs
Icon=emacs
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
#+end_src

** install
1. 验证桌面文件. 桌面文件开头的gwp-为vendor.
2. 安装桌面文件.
3. 将python脚本软链接到$HOME/.local/bin目录下. 注意这里的路径要与
   desktop文件所指定的一定.

更新desktop数据库
#+BEGIN_SRC shell :results none
update-desktop-database ~/.local/share/applications/
#+END_SRC

#+begin_src shell :dir ~/.local/share/applications
desktop-file-validate gwp-emacsclient.desktop
xdg-desktop-menu install gwp-emacsclient.desktop
# desktop-file-validate gwp-org-capture.desktop
# xdg-desktop-menu install gwp-org-capture.desktop
#+end_src


* 配置安装
** stow配置管理思路
- tangle时仅导出到当目录下或子目录下, 方便git管理.
- stow再 "install" 到主目录下.

** 使用chemacs做emacs双启动
- 进入chemacsk目录, 执行install.sh即可.
- 修改 ~/.emacs-profiles.el

** 安装doom-emacs
- 进入doom-emacs目录, 执行:
  : bin/doom install

doom会根据~/.doom.d中的配置, 更新doom-emacs/.local目录中的内容. 如果doom-emacs目
录位置发生变化, 需要删除.local/straints/build目录, 再重建:
: doom-emacs/bin/doom build

** .note文件搜索
- 安装locate/updatedb服务 (mlocate)
- 在~/.cache/notes建立软链接
  : notesearch.py -r ~/.cache/notes

[2021-08-29 Sun] 使用counsel-rg来实现, 以下设置不需要了
- 添加ripgrep配置文件, 添加--follow symlink选项.

#+begin_src sh :tangle ~/.ripgreprc
--follow
#+end_src

** syncthing .stignore
sycnthing同步时要避免同步某些文件, 以免不同机器间emacs冲
突

- https://docs.syncthing.net/users/ignoring.html

需要写在~/Workspace目录下:
/Programming/emacs/doom-emacs/.local/cache

* 调试步骤
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#testing-in-dooms-sandbox][doom-emacs/getting_started.org at develop · hlissner/doom-emacs]]

** How to extract a backtrace from an error
If you encounter an error while using Doom Emacs, you’re probably about to head
off and file a bug report (or request help on our Discord server). Before you
do, please generate a backtrace to include with it.

To do so you must enable debug-on-error then recreate the error.

** Enabling debug-on-error
There are three ways to enable debug-on-error:

Start Emacs with emacs --debug-init. Use this for errors that occur at startup.
Evil users can press SPC h d d and non-evil users can press C-h d d. If the
above don’t work, there’s always: M-x toggle-debug-on-error

Now that debug-on-error is on, recreate the error. A window should pop up with a
backtrace.
* doom notes
** project
- SPC p t         magit-todos-list
- SPC p x         doom/open-project-scratch-buffer

* install
** Makefile
使用gnu stow来将pkg目录下的文件安装symlink到$HOME下对应的目录

安装:
: make

字体:
: yay -S ttf-all-the-icons

升级:
: make doom-upgrade

合并到gwp分支:
: make gwp-merge
: make install && make

#+header: :tangle Makefile
#+BEGIN_SRC makefile -i
# https://www.gnu.org/software/make/manual/html_node/One-Shell.html
.ONESHELL:

default: install doom-sync

install: stow
	stow --verbose --adopt --no-folding --target ~/ pkg
	rsync -rav ./doom-hacks/modules/tools/magit ~/.doom.d/modules/gwp/
	rsync -rav ./doom-hacks/modules/lang/org ~/.doom.d/modules/gwp/
	rsync -rav ./doom-hacks/modules/lang/rust ~/.doom.d/modules/gwp/
	rsync -rav ./doom-hacks/modules/config/default ~/.doom.d/modules/gwp/
uninstall:
	stow --verbose --target ~/ --delete pkg

# doom 相关操作
doom-sync: pkg/.doom.d/init.el pkg/.doom.d/packages.el # 修改doom配置后执行
	doom-emacs/bin/doom sync
doom-build:                                            # 重建.local下build目录
	doom-emacs/bin/doom build
doom-clean:                                            # 清理过期的.elc文件
	doom-emacs/bin/doom clean
doom-upgrade:                                          # 升级doom及packages
	doom-emacs/bin/doom upgrade
start:
	emacs --with-profile default
stow:
	which stow
# 合并doom develop分支修改
gwp-merge:
	cd doom-hacks
	git checkout develop
	git pull
	git checkout gwp
	git merge -e develop
#+END_SRC

** doom commands
#+begin_src text
1. Whenever you edit your doom! block in ~/.doom.d/init.el or modify your
   modules, run:

     bin/doom refresh

   This will ensure all needed packages are installed, all orphaned packages are
   removed, and your autoloads files are up to date. This is important! If you
   forget to do this you will get errors!

2. If something inexplicably goes wrong, try `bin/doom doctor`

   This will diagnose common issues with your environment and setup, and may
   give you clues about what is wrong.

3. Use `bin/doom upgrade` to update Doom. Doing it any other way may require
   additional work. When in doubt, run `bin/doom sync`.

4. Check out `bin/doom help` to see what else `bin/doom` can do (and it is
   recommended you add ~/.emacs.d/bin to your PATH).

5. You can find Doom's documentation via `M-x doom/help` or `SPC h D`.
#+end_src

#+begin_src shell :tangle no
./doom-emacs/bin/doom clean
./doom-emacs/bin/doom refresh
#+end_src


* doom/config
:PROPERTIES:
:VISIBILITY: children
:END:
共三个配置文件, tangle到pkg/.doom.d目录下, 再由stow软链到$HOME.

** init.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/init.el :comments nil
:END:
*** docs
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/modules.org][doom-emacs/modules.org at develop · hlissner/doom-emacs]]

*** doom-dirs
设置到非syncthing共享目录下, 避免共享冲突
#+begin_src elisp
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load in.
;; Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find information about all of Doom's modules
;;      and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c g k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c g d') on a module to browse its
;;      directory (for easy access to its source code).

(setq doom-etc-dir "~/.doom.d/local/etc/")
(setq doom-cache-dir "~/.doom.d/local/cache/")
(setq bookmark-default-file (expand-file-name "bookmarks" doom-etc-dir))
(setq recentf-save-file (expand-file-name "recentf" doom-cache-dir))
#+end_src

*** modules
原版: [[file:doom-emacs/init.example.el]]

#+begin_src elisp
(doom! :input
       (chinese)

       :completion
       (company +tng)           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy +prescient)    ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink the current line after jumping
       ;;neotree           ; a project drawer, like NERDTree for vim
       ;;ophints           ; highlight the region an operation acts on
       (popup            ; tame sudden yet inevitable temporary windows
        +defaults)       ; default popup rules
       ;;pretty-code       ; replace bits of code with pretty symbols
       ;;tabs              ; an tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       ;;file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       format            ; 格式化代码块
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired)           ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;; ibuffer           ; interactive buffer management
       ;undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; a consistent, cross-platform shell (WIP)
       ;;shell             ; a terminal REPL for Emacs
       ;;term              ; terminals in Emacs
       vterm             ; another terminals in Emacs

       :checkers
       ;;syntax              ; tasing you for every semicolon you forget
       (spell +flyspell)     ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       biblio
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       ;;macos             ; MacOS-specific commands
       ;;magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :lang
       ;;agda              ; types of types of types of types...
       ;;assembly          ; assembly for fun or debugging
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp           ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;go                ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;ruby              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;; (rust +lsp)         ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;org

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :gwp                ; 自定义模块
       (org +roam2)
       magit
       (default +smartparents +bindings)
       ;; (rust)

       ;; :config
       ;;literate
       ;; (default +smartparents)
       )
#+end_src

** config.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/config.el
:END:
*** orig
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Wenping Guo"
      user-mail-address "ybyygu@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "Monaco" :size 13))

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
;; they are implemented.
#+END_SRC
*** scratch
#+begin_src elisp
(setq doom-scratch-initial-major-mode 'org-mode)
#+end_src

*** workspace
禁止workspace在退出emacs时自动保存, 避免不同机器同步冲突
#+begin_src elisp
(setq persp-auto-save-opt 0)

(defun gwp/workspace/load-or-switch (name)
  "Load or switch to a workspace."
  (interactive
   (list
    (completing-read
     "Workspace to load: "
     (persp-list-persp-names-in-file
      (expand-file-name +workspaces-data-file persp-save-dir)))))
  (if (+workspace-exists-p name)
      (+workspace/switch-to name)
    (if (not (+workspace-load name))
        (+workspace-error (format "Couldn't load workspace %s" name))
      (+workspace/switch-to name)))
  (+workspace/display))
#+end_src

*** ui
**** chinese fonts setup
最早用cnfonts, 不过这个也比较麻烦. 现在用Sarasa之类的中英文等宽字体, 可较完美解
决中英文表格对齐问题

查看字体:
: describe-char
#+begin_src elisp :comments nil
;; 2021-08-25: 留着, 但暂时用不上
;; https://emacs-china.org/t/doom-emacs/10390
(defun gwp/set-fonts()
  (interactive)
  (if (display-graphic-p)
      (progn
        ;; english font
        ;; (set-face-attribute 'default nil :font (format "%s:pixelsize=%d" "Monaco" 16)) ;; 11 13 17 19 23
        ;; (setq doom-font (font-spec :family "Monaco" :size 16))
        ;; (setq doom-font (font-spec :family "Monaco"))
        ;; chinese font
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
          (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "Adobe Heiti Std")))) ;; 14 16 20 22 28
    ))

;; 2021-08-25: 不需要单独设置了
;; org-mode表格中文混排对齐
;; (after! org
;;   ;; (call-interactively 'gwp/set-fonts)
;;   (custom-set-faces!
;;     `(org-table :family "Ubuntu Mono")
;;     )
;;   )

;; for doom-emacs only
;; https://emacs-china.org/t/emacs/15676/20
;; https://github.com/ztlevi/doom-config/blob/main/%2Bui.el
(when (display-graphic-p)
  (setq user-font
        (cond
         ((find-font (font-spec :name  "Sarasa Fixed SC")) "Sarasa Fixed SC")
         ((find-font (font-spec :name  "Iosevka")) "Iosevka")
         ((find-font (font-spec :name  "Inconsolata Nerd Font")) "Inconsolata Nerd Font")
         ((find-font (font-spec :name  "Ubuntu Mono")) "Ubuntu Mono")))
  ;; (setq resolution-factor (eval (/ (x-display-pixel-height) 1080)))
  (setq resolution-factor 2)
  (setq ideal-font-size (eval (* 15 resolution-factor)))
  (setq big-font-size (eval (* 18 resolution-factor)))
  (setq doom-font (font-spec :family user-font :size ideal-font-size)
        ;; doom-serif-font (font-spec :family user-font)
        doom-variable-pitch-font (font-spec :family user-font)
        ;; doom-unicode-font (font-spec :family user-font)
        doom-big-font (font-spec :family user-font :size big-font-size))
  )
#+end_src

**** input method
[[https://tumashu.github.io/pyim/][A Chinese input method which support quanpin, shuangpin, wubi and cangjie. - pyim]]

默认使用 Ctrl-\ 切换输入法
#+begin_src elisp
(use-package! pyim
  :config
  (setq default-input-method "pyim")

  ;; 我使用五笔
  (use-package! pyim-wbdict
    :config (pyim-wbdict-v98-enable))
  (setq pyim-default-scheme 'wubi)

  ;; 启用拼音大词库，方便忘词用拼音反查
  (use-package pyim-basedict
    :config (pyim-basedict-enable))
  ;; 如果用户在使用五笔输入法的过程中，忘记了某个字的五笔码，可以按 TAB(F2-TAB)键临时切换到辅助输入法来输入，选词完成之后自动退出。
  (setq pyim-assistant-scheme 'quanpin)

  ;; 全角半角
  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning
                  pyim-probe-punctuation-after-punctuation))

  ;; 不使用中文标点, 如需输入可切换至fcitx.
  ;; (delete '("/" "、")  pyim-punctuation-dict)
  ;; (add-to-list 'pyim-punctuation-dict '("\\" "、"))
  (setq pyim-punctuation-dict nil)

  ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
  ;; 我自己使用的中英文动态切换规则是：
  ;; 1. 光标只有在注释里面时，才可以输入中文。
  ;; 2. 光标前是汉字字符时，才能输入中文。
  ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
  ;; (setq-default pyim-english-input-switch-functions
  ;;               '(
  ;;                 ;; pyim-probe-dynamic-english
  ;;                 pyim-probe-isearch-mode
  ;;                 pyim-probe-program-mode
  ;;                 pyim-probe-org-structure-template
  ;;                 ))
  
  ;; 与 pyim-probe-dynamic-english 配合，方便切换至中文模式
  :bind
  (
   ("<f2> SPC" . pyim-convert-string-at-point)
   ("M-SPC" . toggle-input-method)
   (:map pyim-mode-map
    ;; ("<f2> TAB" . pyim-toggle-assistant-scheme)
    ("/" . pyim-toggle-assistant-scheme)
    ("_" . pyim-toggle-input-ascii)
    ("\\" . pyim-toggle-input-ascii)
    )))
#+end_src

**** big font mode
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src elisp
;; HiDPI下可用大字模式: SPC-t-b
(setq doom-font (font-spec :family "Monaco" :size 14))
(setq doom-big-font-increment 4)

;; (add-hook! doom-big-font-mode-hook #'(gwp/set-fonts))
;; 上面的不管用
(setq doom-big-font-mode-hook '(gwp/set-fonts))
(doom-big-font-mode -1)
#+end_src

**** theme
#+begin_src elisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-acario-light)
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-material)
(setq doom-theme 'doom-nova)
;; (setq doom-theme 'doom-vibrant)
;; (load-theme 'material t)
(custom-set-faces!
  '(org-todo :foreground "yellow" :weight bold :background "#263238")
  '(org-done :foreground "yellow" :weight bold :background "#263238")
  '(org-table :foreground "#e3f2fd")
  '(hl-line :background "#37474f")
  '(org-level-1 :foreground "#e3f2fd" :height 1.1 :background nil :weight bold :box nil)
  '(org-level-2 :foreground "#e3f2fd" :height 1.0 :background nil :weight normal :box nil)
  '(org-headline-done :foreground "gray" :weight normal)
  )

;; 当前行
(custom-set-faces!
  '(hl-line :background "#37474f")
  '(solaire-hl-line-face :background "#37474f")
  '(region :background "#555555")
  )
#+end_src

**** window
***** 修改 frame 标题 方便 gnome-shell 桌面切换
#+begin_src elisp
;; workspace@buffer-name: ~/foo/bar
(setq frame-title-format
      '((:eval (+workspace-current-name)) ;
        " | %b : "
        (:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))))
        ))
#+end_src

***** 放大当前窗口
: SPC-w-o
: doom/window-enlarge

自动放大当前窗口. 注意, 这类工具通过和doom的popup window有冲突. 需要的时候命令手
动开启.
- https://github.com/hlissner/doom-emacs/issues/2225

对应命令: SPC-w z
#+begin_src elisp
(use-package! golden-ratio
  :config
  (map! :map evil-window-map
        "z" #'golden-ratio))
#+end_src

安装对应的包
#+begin_src emacs-lisp :tangle pkg/.doom.d/packages.el
(package! golden-ratio)
#+end_src

- [2020-04-12 Sun] golden-ratio更好用一些
- [[https://github.com/cyrus-and/zoom][cyrus-and/zoom: Fixed and automatic balanced window layout for Emacs]]
#+begin_src emacs-lisp :tangle no
(use-package! zoom
              :config
              (custom-set-variables
               '(zoom-size '(0.618 . 0.618)))
              (map! :map evil-window-map
                    "z" #'zoom))
#+end_src

***** window切换
用avy在多个窗口下跳转也很方便

SPC-j-l
#+BEGIN_SRC elisp
(use-package! avy
              :config
              (setq avy-all-windows t))

;; 替代 SPC-w-w
(global-set-key [remap evil-window-next] #'ace-window)
#+END_SRC

切换至之前buffer window, evil-window-mru
: SPC-w-p

***** 弹出窗口管理
打开doom popup窗口, 默认仅在normal state下可用.
#+begin_src emacs-lisp
(map! :i "C-`" #'+popup/toggle)
#+end_src

***** 窗口大小调整
使用滚轮来修改窗口大小. Ctrl-Alt-scroll-up, Ctrl-Alt-scroll-down
#+begin_src elisp
(map! :nvi
      [C-M-mouse-4] #'evil-window-increase-width
      [C-M-mouse-5] #'evil-window-decrease-width
      )
#+end_src

- [[https://stackoverflow.com/questions/51879921/emacs-find-file-other-window-command-splits-buffer-vertically][Emacs find-file-other-window command splits buffer vertically - Stack Overflow]]

设置分屏阈值, 避免 find-file-other-window 垂直向分割为多个windows
#+begin_src elisp
(setq split-width-threshold 200)        ; default is 160
#+end_src

新建frame时最大化窗口
#+begin_src elisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src


**** line number
默认不显示行号
#+begin_src emacs-lisp
  (setq display-line-numbers-type nil)
#+end_src

**** misc
#+begin_src elisp
  ;; View images inside Emacs
  (auto-image-file-mode t)

  ;; set line space wider than default
  (setq-default line-spacing 4)
#+end_src
*** edit
#+begin_src emacs-lisp
(load! "edit")
#+end_src

*** dired
- [[https://www.emacswiki.org/emacs/DiredOmitMode][EmacsWiki: Dired Omit Mode]]

#+begin_src emacs-lisp
(use-package dired
  :config
  ;; Set this variable to non-nil, Dired will try to guess a default
  ;; target directory. This means: if there is a dired buffer
  ;; displayed in the next window, use its current subdir, instead
  ;; of the current subdir of this dired buffer. The target is used
  ;; in the prompt for file copy, rename etc.
  (progn
    (setq dired-dwim-target t)

    ;; Dired listing switches
    ;;  -a : Do not ignore entries starting with .
    ;;  -l : Use long listing format.
    ;;  -G : Do not print group names like 'users'
    ;;  -h : Human-readable sizes like 1K, 234M, ..
    ;;  -v : Do natural sort .. so the file names starting with . will show up first.
    ;;  -F : Classify filenames by appending '*' to executables,
    ;;       '/' to directories, etc.
    (setq dired-listing-switches "-alGhvF --group-directories-first") ; default: "-al"

    ;; 用于在dired中复制当前文件的全路径.
    (defun gwp/dired-copy-file-path()
      (interactive)
      (let ((current-prefix-arg '(0)))
        (call-interactively 'dired-copy-filename-as-kill)
        ))

    (map! :map dired-mode-map
          :localleader
          :desc "Copy file path"
          :n "y" #'gwp/dired-copy-file-path
          :desc "Make symlink"
          :n "l" #'dired-do-symlink
          :desc "Async shell command"
          :n "!" #'dired-do-async-shell-command
          )

    ;; 使用BACKSPACE来上一级目录, 使用Ctrl-shift-n来新建目录(默认为"+")
    (map! :map dired-mode-map
          :nv "DEL"   #'dired-up-directory       ; BACKSPACE
          :nv "C-S-n" #'dired-create-directory
          )
    ))
#+end_src

隐藏.dotfiles, doom中默认omit的太少
#+begin_src emacs-lisp
(use-package dired-x
  :config
  (progn
    (setq dired-omit-verbose t)
    ;; (add-hook 'dired-mode-hook #'dired-omit-mode)
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$")))
  )
#+end_src

*** org
#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Notes/")
(setq org-roam-directory "~/Notes/roam")
(setq org-roam-file-extensions '("note" "org"))

(after! org (load! "org"))

;; https://github.com/org-roam/org-roam-ui#doom
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
    :hook (org-roam . org-roam-ui-mode)
    :config
)
#+end_src

*** re-open-current-file
可以用revert-buffer SPC-b-r
#+begin_src elisp :tangle no
  (defun gwp/reopen-current-file ()
    "Kill current buffer and re-open it again."
    (interactive)
    (call-interactively 'kill-current-buffer)
    (call-interactively 'recentf-open-most-recent-file))
#+end_src

*** open-file-externally
从spacemacs中改过来的
#+begin_src emacs-lisp
(defun spacemacs/open-in-external-app (file-path)
  "Open `file-path' in external application."
  (let ((process-connection-type nil))
    (start-process "" nil "xdg-open" file-path)))

(defun spacemacs/open-file-or-directory-in-external-app (arg)
  "Open current file in external application.
If the universal prefix argument is used then open the folder
containing the current file by the default explorer.
If two universal prefix arguments are used, then prompt for command to use."
  (interactive "P")
  (if (equal arg '(4))                  ; C-u
      (spacemacs/open-in-external-app (expand-file-name default-directory))
    (let ((file-path (if (derived-mode-p 'dired-mode)
                         (dired-get-file-for-visit)
                       buffer-file-name)))
      (if file-path
          (if (equal arg '(16))         ; C-u C-u
              (progn
                (let ((program (read-shell-command "Open current file with: ")))
                  (call-process program nil 0 nil file-path)
                  )
                )
            (spacemacs/open-in-external-app file-path)
            )
        (message "No file associated to this buffer.")))))
#+end_src

*** open in terminal
emacs版的 "Open in Terminal": 在gnome-terminal中打开当前目录.
#+begin_src emacs-lisp
(defun gwp/open-in-gnome-terminal (the-directory)
  "Open `the-directory' in external gnome-terminal."
  (let ((process-connection-type nil))
    ;; (start-process "" nil "terminal-dwim.sh" (concat "--working-directory=" the-directory) "-e" "tmux")
    (start-process "" nil "alacritty" (concat "--working-directory=" the-directory) "-e" "tmux")
    ))

(defun gwp/open-terminal-here ()
  "Open the current dir in a new terminal window"
  (interactive)
  (let ((default-directory (or (and (eq major-mode 'dired-mode)
                                    (dired-current-directory))
                               default-directory)))
    (gwp/open-in-gnome-terminal (expand-file-name default-directory))
    ))
#+end_src

*** ripgrep
搜索所有~/.cache/notes目录下所有.notes文件. 为了避免symlink文件不存在导致ivy报错,
我们使用自定义脚本ripgrep, 强制命令退出码为0. 注意~/.local/bin应在PATH变量中.

#+begin_src shell :tangle ~/.local/bin/ripgrep :shebang #! /bin/bash
/usr/bin/rg $@

exit 0
#+end_src


#+begin_src emacs-lisp
;;;###autoload
(defun gwp/search-all-notes (arg)
  "search all notes in ~/.cache/notes"
  (interactive "P")

  ;; (defun counsel-rg (&optional initial-input initial-directory extra-rg-args rg-prompt)
  (let ((counsel-rg-base-command (list "ripgrep" "--follow" "-M" "240" "--with-filename" "--no-heading" "--line-number" "--color" "never" "%s")))
    (counsel-rg "" "~/.cache/notes")))
#+end_src

deadgrep与doom有冲突, 不能用了.
#+begin_src emacs-lisp :tangle no
(defun gwp/return-default-notes-dir ()
  "~/.cache/notes"
  )
(use-package! deadgrep
              :config
              (setq deadgrep-project-root-function #'gwp/return-default-notes-dir)
              )
#+end_src

*** develop
#+begin_src emacs-lisp
  (load! "develop")
#+end_src

*** recent files
#+begin_src emacs-lisp
(require 'recentf)
;; the default is only 20
(setq recentf-max-saved-items 1000)
(add-to-list 'recentf-exclude "autosave$")
(add-to-list 'recentf-exclude "\.png$")
(add-to-list 'recentf-exclude "\.pdf$")
(add-to-list 'recentf-exclude "\.svg$")
(add-to-list 'recentf-exclude "\.odt$")
#+end_src
*** fcitx
自动中英文切换, 解决vim模式下的一大痛点.
#+BEGIN_SRC emacs-lisp
(use-package! fcitx
  :after evil
  :config
  (when (executable-find "fcitx-remote")
    ;; (fcitx-prefix-keys-add "M-m")
    ;; 影响搜索界面, 不应该开
    ;; (setq fcitx-use-dbus t)
    (fcitx-aggressive-setup)
    ))
#+END_SRC

*** TODO bm
主要用 bm, 书签持久化是从 bm.el 里抄来的.
[2019-07-11 Thu] spacemacs有bm layer, 用那个吧.

#+BEGIN_SRC emacs-lisp :tangle no
(defun gwp/init-bm ()
  (defun gwp-mouse-toggle-bm (e)
    "Toggle bookmarking
This command should be bound to a mouse key.
Argument E is a mouse event used by `mouse-set-point'."
    (interactive "@e")
    (save-excursion
      (mouse-set-point e)
      (bm-toggle)
      ))

  ;; adopted from: https://github.com/joodland/bm
  (use-package bm
    :ensure t
    :demand t

    :init
    ;; restore on load (even before you require bm)
    (setq bm-restore-repository-on-load t)

    :config
    ;; Allow cross-buffer 'next'
    (setq bm-cycle-all-buffers nil)

    ;; save bookmarks
    (setq-default bm-buffer-persistence t)

    ;; Loading the repository from file when on start up.
    (add-hook 'after-init-hook 'bm-repository-load)

    ;; Saving bookmarks
    (add-hook 'kill-buffer-hook #'bm-buffer-save)

    ;; Saving the repository to file when on exit.
    ;; kill-buffer-hook is not called when Emacs is killed, so we
    ;; must save all bookmarks first.
    (add-hook 'kill-emacs-hook #'(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save)))

    ;; The `after-save-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state.
    (add-hook 'after-save-hook #'bm-buffer-save)

    ;; Restoring bookmarks
    (add-hook 'find-file-hooks   #'bm-buffer-restore)
    (add-hook 'after-revert-hook #'bm-buffer-restore)

    ;; The `after-revert-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state. This hook might cause trouble when using packages
    ;; that automatically reverts the buffer (like vc after a check-in).
    ;; This can easily be avoided if the package provides a hook that is
    ;; called before the buffer is reverted (like `vc-before-checkin-hook').
    ;; Then new bookmarks can be saved before the buffer is reverted.
    ;; Make sure bookmarks is saved before check-in (and revert-buffer)
    (add-hook 'vc-before-checkin-hook #'bm-buffer-save)

    :bind (
            ([left-fringe mouse-3] . gwp-mouse-toggle-bm)
            ([left-margin mouse-3] . gwp-mouse-toggle-bm)
            ([left-fringe mouse-5] . bm-next-mouse)
            ([left-margin mouse-5] . bm-next-mouse)
            ([left-fringe mouse-4] . bm-previous-mouse)
            ([left-margin mouse-4] . bm-previous-mouse)
            )))
#+END_SRC

*** bindings
[[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#map][map!用法]]

#+begin_src elisp
(map! :nvim "C-a" nil)
;; 禁用evil中的ctrl-e, 默认为向上滚动, 不太习惯.
(map! :nvim "C-e" nil)
(map! :nvim "C-d" nil)
(map! :nvim "C-k" nil)
(map! :nvim "C-n" nil)
(map! :nvim "C-p" nil)
(map! :nvim "C-u" nil)                  ; universal argument

(map! :vi "C-w" #'kill-region)          ; cut, copy: Alt-w

;; evil默认为quoted-insert, 可以 ctrl-q代替
(map! :i "C-v" #'yank)
(map! :i "C-y" nil)

;; evil里也得设置, 不然无效
(after! evil-org
        (map! :map evil-org-mode-map
              :nivm "C-d" nil
              :nivm "C-k" nil
              :i "M-l" nil))
#+end_src

默认config module中的+bindings flag有问题, 导至org-mode中TAB键异常. 这里摘取其中
重要代码. 载入doom中的默认按键绑定: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#load][load!用法]]
#+begin_src elisp
;; Make M-x harder to miss
(define-key! 'override
  "M-x" #'execute-extended-command
  "A-x" #'execute-extended-command)

;; A Doom convention where C-s on popups and interactive searches will invoke
;; ivy/helm for their superior filtering.
(define-key! :keymaps +default-minibuffer-maps
  "C-s" (if (featurep! :completion ivy)
            #'counsel-minibuffer-history
          #'helm-minibuffer-history))

;; Smarter C-a/C-e for both Emacs and Evil. C-a will jump to indentation.
;; Pressing it again will send you to the true bol. Same goes for C-e, except
;; it will ignore comments+trailing whitespace before jumping to eol.
(map! :gi "C-a" #'doom/backward-to-bol-or-indent
      :gi "C-e" #'doom/forward-to-last-non-comment-or-eol
      ;; Standardizes the behavior of modified RET to match the behavior of
      ;; other editors, particularly Atom, textedit, textmate, and vscode, in
      ;; which ctrl+RET will add a new "item" below the current one
      :gn [C-return]    #'+default/newline-below
      :gn [C-S-return]  #'+default/newline-above
      )

;; 2021-08-31: 现在gwp/default下修改
;; (load! "bindings")
#+end_src

*** dired-sidebar
#+begin_src elisp
(use-package dired-sidebar
  :commands (dired-sidebar-toggle-sidebar))
#+end_src

** packages.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/packages.el :comments nil
:END:
*** orig
#+begin_src elisp
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here, run 'doom sync' on
;; the command line, then restart Emacs for the changes to take effect.
;; Alternatively, use M-x doom/reload.
;;
;; WARNING: Disabling core packages listed in ~/.emacs.d/core/packages.el may
;; have nasty side-effects and is not recommended.


;; All of Doom's packages are pinned to a specific commit, and updated from
;; release to release. To un-pin all packages and live on the edge, do:
;(unpin! t)

;; ...but to unpin a single package:
;(unpin! pinned-package)
;; Use it to unpin multiple packages
;(unpin! pinned-package another-pinned-package)


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a particular repo, you'll need to specify
;; a `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, for whatever reason,
;; you can do so here with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))
#+end_src
*** 由于网络原因, 暂时过渡
#+begin_src elisp
;; (package! org-bullets)
(package! org-pdftools :recipe (:host github :repo "fuxialexander/org-pdftools"))
(package! org-superstar :recipe (:host github :repo "integral-dw/org-superstar-mode"))
#+end_src

*** 需要安装的包
- chfonts: 中文显示
- golden-ratio: 自动放大当前window
- fcitx 自动中英文切换
- 修改版material-theme
  - 改小org-heading字体的scaling系数
  - 调整TODO, DONE的调色, 别那么刺眼

#+begin_src elisp
;; (package! cnfonts)
(package! fcitx)

;; 五笔输入法
(package! pyim-wbdict)

;; (package! berrys-theme)
;; (package! material-theme)
(package! material-theme
          :recipe (:host github :repo "ybyygu/emacs-material-theme"))
#+end_src

#+begin_src elisp
(package! org-sidebar)
(package! el-patch)
#+end_src

统计命令使用频率, 方便优化快捷键
#+begin_src elisp
(package! keyfreq)
#+end_src

org-noter
#+begin_src emacs-lisp
(package! org-noter)
#+end_src

- 使用deadgrep搜索 .note 笔记
- 与doom的popup有冲突, 不能用
#+begin_src emacs-lisp :tangle no
(package! deadgrep
          :recipe (:host github :repo "ybyygu/deadgrep"))
#+end_src

编辑nix包管理文件
#+begin_src elisp
(package! nix-mode)
#+end_src

*** 需要禁用的包
pangu-spacing 自动给中英文字加空格, 这严重影响响应速度.

#+begin_src elisp
(disable-packages! pangu-spacing)
#+end_src

- TAB自动补全很可怕, 无意按键, 补出很多没用的东西, 禁用自带的模板.
#+begin_src emacs-lisp
(package! doom-snippets :ignore t)
#+end_src

github支持, 减慢速度.
#+begin_src emacs-lisp
(package! forge :ignore t)
;; 不能简单的禁用了事
;; (package! github-review :ignore t)
#+end_src

禁用which-key, 响应太慢(未知bug)
#+begin_src elisp
; (package! which-key :ignore t)
#+end_src

禁用自动空格清理包, 避免有编辑时丢失空格
#+begin_src elisp :tangle no
(package! ws-butler :disable t)
#+end_src


*** 测试
#+begin_src elisp
(package! dired-sidebar)
(package! dockerfile-mode)
(package! yaml-mode)

;; https://github.com/org-roam/org-roam-ui#doom
;; 2021-08-01 用不起来
(package! websocket)
(package! simple-httpd)
(package! org-roam-ui :recipe (:host github :repo "org-roam/org-roam-ui" :files ("*.el" "out")))

(package! org-transclusion
  :recipe (:host github
           :repo "nobiot/org-transclusion"
           :branch "main"
           :files ("*.el")))
#+end_src


* edit.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/edit.el
:END:
** completion
#+begin_src elisp
;; Use hippie-expand instead of dabbrev-expand
;; (global-set-key (kbd "M-/") #'dabbrev-expand)
(global-set-key (kbd "M-/") #'hippie-expand)
;; the same behavior as the original `dabbrev-expand'
(setq hippie-expand-dabbrev-skip-space t)

;; adjust the list of functions that hippie-expand will try
(setq hippie-expand-try-functions-list
      '(
        try-expand-dabbrev-visible      ; first try the expansions from the currently visible parts
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-line
        try-expand-dabbrev-from-kill
        ;; try-expand-all-abbrevs
        ;; try-expand-list
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol
        ))

(after! company
  (setq company-idle-delay 1.5
        company-minimum-prefix-length 2))

;; 2021-09-19: 没用起来
;; ;; https://github.com/redguardtoo/company-ctags
;; (use-package company-ctags
;;   :after (company)
;;   :init
;;   (setq company-ctags-everywhere t
;;         company-ctags-fuzzy-match-p t)
;;   :config
;;   (company-ctags-auto-setup)
;;   (message "Init company-ctags"))

;; ;; for rust completion
;; ;; https://github.com/dan-t/rusty-tags
;; (setq company-ctags-tags-file-name "rusty-tags.emacs")
#+end_src

安装对应的包
#+begin_src emacs-lisp :tangle pkg/.doom.d/packages.el :tangle no
(package! company-ctags)
#+end_src

** keyfreq
[[https://github.com/dacap/keyfreq][dacap/keyfreq: Track Emacs commands frequency]]
#+begin_src elisp
(require 'keyfreq)
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+end_src

** auto-save
开启自动保存
#+begin_src elisp
(setq
 auto-save-default t
 ;; auto-save-list-file-prefix  (concat doom-cache-dir "auto-save-list/.saves-")
 ;; auto-save-list-file-name (concat doom-cache-dir "autosave")
 )

(auto-save-visited-mode +1)
#+end_src
** ctrl-z
默认切换为emacs-state, 经常按错. 
#+begin_src elisp
(after! evil
  ;; 如何误入evil-emacs-state, 按ESC返回normal state
  (define-key evil-emacs-state-map [escape] 'evil-normal-state)
  ;; (map! :nvim "C-z" #'undo)
  )
#+end_src

** smartparens
不知道能用上多少, 先试几天.
#+begin_src elisp
(map! :leader
      :nvi
      "DEL" #'sp-backward-kill-sexp     ; BACKSPACE
      [deletechar] #'sp-kill-sexp       ; DELETE
      [right] #'sp-forward-slurp-sexp   ; Array right ==>
      [left]  #'sp-backward-slurp-sexp  ; Array left  <==
      "C-k"   #'sp-unwrap-sexp
      )
#+end_src

kill
: (foo |(abc) bar)  -> (foo | bar) ;; nil, defaults to 1
: (1 2 3 |4 5 6)    -> (|)         ;; 0
: (foo |(bar) baz)  -> |           ;; SPC u SPC u
: (1 |2 3 4 5 6)    -> (1|)        ;; SPC u

slurp
: (foo |bar) baz        -> (foo |bar baz)
: [(foo |bar)] baz      -> [(foo |bar) baz]
: ((|foo) bar baz quux) -> ((|foo bar baz quux)) ;; with SPC u

unwrap
: |(foo bar baz)     -> |foo bar baz
: (foo bar| baz)     -> foo bar| baz
** expand region
#+begin_src elisp
(use-package expand-region :after evil :config
  (map! :leader :v "v"
        (function er/expand-region)))
#+end_src

** doom tuning
默认evil的undo会将多个小操作合并为一个大的, undo时很不适应.
#+begin_src emacs-lisp
(setq evil-want-fine-undo t)
#+end_src

** better jumper
使用鼠标滚轮来跳转位置
- [[https://github.com/gilbertw1/better-jumper][gilbertw1/better-jumper: A configurable jump list implementation for Emacs]]
#+begin_src elisp
(map! :nm
      [M-mouse-4] #'better-jumper-jump-backward
      [M-mouse-5] #'better-jumper-jump-forward
      )
#+end_src

** insert date
#+begin_src emacs-lisp
(defun gwp/insert-date (arg)
  "Insert date at point. With prefix argument, insert date and time."
  (interactive "P")
  (insert (format-time-string "%Y-%m-%d"))
  (when arg
    (insert (format-time-string " %H:%M"))
    )
  )

;; make it easier to update time-stamp
(map! :i "C-c i" #'gwp/insert-date)
#+end_src

** white space
#+begin_src emacs-lisp
(setq show-trailing-whitespace t)
(global-set-key (kbd "<f5> SPC") 'delete-trailing-whitespace)
;; make sure this always work
(global-set-key (kbd "C-x C-o") 'delete-blank-lines)
#+end_src

** join next line
doom的引入的"改进"导致很诡异的行为, 应禁用掉.

[[https://github.com/hlissner/doom-emacs/commit/40cf6139ed53b635fec37ce623c4b1093c78a11e][Make evil-join remove comment delimiters · hlissner/doom-emacs@40cf613]]

#+begin_src elisp
(after! evil
  (advice-remove #'evil-join #'+evil-join-a)
  )
#+end_src

** TODO advanced selection
#+begin_src emacs-lisp
;; expand selection
;; http://xahlee.org/emacs/modernization_mark-word.html
;; by Nikolaj Schumacher, 2008-10-20. Released under GPL.
(defun semnav-up (arg)
  (interactive "p")
  (when (nth 3 (syntax-ppss))
    (if (> arg 0)
        (progn
          (skip-syntax-forward "^\"")
          (goto-char (1+ (point)))
          (decf arg))
      (skip-syntax-backward "^\"")
      (goto-char (1- (point)))
      (incf arg)))
  (up-list arg))

;; by Nikolaj Schumacher, 2008-10-20. Released under GPL.
(defun gwp/extend-selection (arg &optional incremental)
  "Select the current word.
Subsequent calls expands the selection to larger semantic unit."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     (or (and transient-mark-mode mark-active)
                         (eq last-command this-command))))
  (if incremental
      (progn
        (semnav-up (- arg))
        (forward-sexp)
        (mark-sexp -1))
    (if (> arg 1)
        (extend-selection (1- arg) t)
      (if (looking-at "\\=\\(\\s_\\|\\sw\\)*\\_>")
          (goto-char (match-end 0))
        (unless (memq (char-before) '(?\) ?\"))
          (forward-sexp)))
      (mark-sexp -1))))

;; (global-set-key (kbd "<f5> v") 'gwp/extend-selection)

(defun gwp/select-text-in-quote ()
  "Select text between the nearest left and right delimiters.
Delimiters are paired characters: ()[]<>«»“”‘’「」, including \"\"."
  (interactive)
  (let (b1 b2)
    (skip-chars-backward "^<>(“{[「«\"‘")
    (setq b1 (point))
    (skip-chars-forward "^<>)”}]」»\"’")
    (setq b2 (point))
    (set-mark b1)
    )
  )

(defun gwp/select-none-blank-text ()
  "Select none blank chars near the point in current line"
  (interactive)
  (let (b1 b2)
    (skip-chars-backward "^ \n")
    (setq b1 (point))
    (skip-chars-forward "^ \n")
    (setq b2 (point))
    (set-mark b1)
    )
  )

(defun gwp/select-word ()
  "Select none blank chars near the point in current line"
  (interactive)
  (let (b1 b2)
    (backward-word)
    (setq b1 (point))
    (forward-word)
    (setq b2 (point))
    (set-mark b1)
    )
  )

(defun gwp/select-line ()
  "Select current line"
  (interactive)
  (let (b1 b2)
    (move-beginning-of-line nil)
    (setq b1 (point))
    (move-end-of-line nil)
    (setq b2 (point))
    (set-mark b1)
    )
  )

;; (global-set-key (kbd "M-*") 'select-text-in-quote)
;; (global-set-key (kbd "M-6") 'select-line)
;; (global-set-key (kbd "M-4") 'select-word)
(global-set-key (kbd "M-5") 'gwp/select-none-blank-text)

;; https://github.com/magnars/expand-region.el
;; (require 'expand-region)
;; (global-set-key (kbd "M-4") 'er/expand-region)
#+end_src

** multiedit
使用M-d选中多个字词, 同步修改. 不需要的可用Enter取消掉.
#+begin_src elisp
(use-package evil-multiedit
  :after evil
  :config
  (setq evil-multiedit-follow-matches t)
  )
#+end_src
** bibtex
用于搜索zotero导出的bibtex文献. bibtex中keywords对应zotero中的tags
#+begin_src elisp
(setq bibtex-completion-bibliography
      '("~/Data/zotero/my.bib"))
(setq bibtex-completion-pdf-field "file")
(setq bibtex-completion-additional-search-fields '(keywords annotation note))
#+end_src
** find notes
#+begin_src elisp
(defun gwp/find-file-in-notes ()
  "Find a file under `~/.cache/notes', recursively."
  (interactive) (doom-project-find-file "~/.cache/notes"))
#+end_src

* develop.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/develop.el
:END:
** vterm
安装 vterm-toggle package. 这个比doom内置的强, 支持tramp buffer.
#+begin_src elisp :tangle pkg/.doom.d/packages.el
(package! vterm-toggle)
#+end_src

** magit
spacemacs中的习惯, 加回来, 避免忙中出错
#+begin_src elisp
(after! magit
  ;;禁用magit中的gravatars支持, 响应能快一些.
  (setq magit-revision-show-gravatars nil)

  (map! :map doom-leader-git-map "s" #'magit-status)
  )
#+end_src

git-timemachine可用来看文件的不同版本(C-n, C-p): git-timemache-mode-map

magit-todos用来查看代码的TODO, FIXME等标记. 按键: SPC-p-t
- [[https://github.com/alphapapa/magit-todos][alphapapa/magit-todos: Show source files' TODOs (and FIXMEs, etc) in Magit status buffer]]

magit-todos已在magit modules定义.
#+begin_src elisp :tangle no
(package! magit-todos)
#+end_src

** vc commit
自动更新时间戳
#+BEGIN_SRC emacs-lisp
(use-package vc
  :init
  (progn
    (add-hook 'vc-before-checkin-hook #'time-stamp)
    )
  )

(use-package vc-hooks
  :init
  (progn
    ;; Don't ask if I want to visit a sym-linked file under VC. I always want to!
    (setq vc-follow-symlinks t)
    )
  )
#+END_SRC

** yadm [[https://github.com/TheLocehiliosan/yadm/blob/master/yadm.md][yadm/yadm.md at master · TheLocehiliosan/yadm]]
快捷键 SPC g y
#+BEGIN_SRC emacs-lisp
;; (magit-status  "/yadm::")
(after! tramp
  (add-to-list 'tramp-methods
             '("yadm"
               (tramp-login-program "yadm")
               (tramp-login-args (("enter")))
               (tramp-login-env (("SHELL") ("/bin/sh")))
               (tramp-remote-shell "/bin/sh")
               (tramp-remote-shell-args ("-c")))))
#+END_SRC
** rust-mode
*** docs
- 关于补全: lsp/rust-analyze太重了, racer更简单一些.
- 解决花括号中 "{|}" 中换行行为, 与spacemacs保持一致.
- https://emacs.stackexchange.com/questions/2837/automatically-formatting-brackets

重要资源
- [[https://github.com/rust-lang/rust-mode][rust-lang/rust-mode]]
- rustic相关 [[https://github.com/brotzeit/rustic][brotzeit/rustic: Rust development environment for Emacs]]
  (rustic-mode以后会是依赖于rust-mode的增强版 [[https://github.com/rust-lang/rust-mode/issues/405][Towards making rustic use rust-mode #405]])

*** edit
#+begin_src emacs-lisp
(after! smartparens
  (sp-local-pair 'rust-mode "{" nil :post-handlers '(:add ("||\n[i]" "RET")))
  ;; Rust closure中使用
  (sp-with-modes '(rust-mode)
    (sp-local-pair "|" "|"))
  )

(add-hook 'rust-mode-hook
          (lambda () (require 'smartparens-rust)))

(after! org-src
  (add-to-list 'org-src-lang-modes '("rust" . rust)))
#+end_src

*** cargo/rust-mode
使用 rust-mode中的cargo
- [[https://github.com/rust-lang/rust-mode/blob/master/rust-compile.el][rust-mode/rust-compile.el]]

基于compilation mode定制
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html][Compilation Mode - GNU Emacs Manual]]

以下自定义cargo命令, 比在term下执行更好一些.
- 使用Alt-n, Alt-p可以快速定位error或warning 或C-j, C-k
- 链接到的src文件可直接打开.

现有如下问题, 导致编译buffer无法基于出错信息跳转到对应文件:
- [[https://github.com/rust-lang/cargo/issues/5895][Error messages use relative paths differently if in a workspace · Issue #5895 · rust-lang/cargo]]

为此, 我们需要cargo.sh, 包装下cargo命令, 在emacs调用前, 切到workspace根目录, 但执行cargo时再换为到原buffer对应目录.
这样, 可仅编译当前包, 无不是所有workspace中的包, 同时还能解决error跳转的问题.

cargo默认输出warning太多, 以下命令调用cargo, 但忽略warnings. 同时编译信息里强制输出文件全路径

#+begin_src shell :tangle ~/.local/bin/cargo.sh :shebang #! /bin/bash
# a wrapper for cargo command to work around a cargo issue:
# https://github.com/rust-lang/cargo/issues/5450#issuecomment-732954248

# goto current workspace memeber directory
cd "$1"
shift

# supress warnings and print full file paths in compilation
export RUSTFLAGS="$RUSTFLAGS -Awarnings"
cargo $@
#+end_src

#+begin_src elisp
(require 'rust-mode)
(require 'cargo)

;; taken from rust-cargo.el
(defun gwp/cargo-compile (args)
  ;; taken from cargo.el
  ;;
  ;; workaround cargo issue: https://github.com/rust-lang/cargo/issues/5895
  ;;
  ;; to make "jump-to-error" work, we need start compilation in workspace root dir
  (let (
        ;; save current directory
        (old-directory default-directory)
        (default-directory (or (cargo-process--workspace-root)
                               default-directory))
        )
    (compile (format "cargo.sh \"%s\" %s" old-directory args))
    ))

(defun gwp/rust-cargo-watch-check (arg)
  "Compile using `cargo watch and check`
If the universal prefix argument is used then org src will be tangled first.
"
  (interactive "P")
  (when (equal arg '(4))                  ; C-u
    (gwp/org-babel-tangle-dwim)
    )
  (gwp/cargo-compile "check -q"))

(defun gwp/rust-cargo-watch-test (arg)
  "Compile using `cargo watch and test`
If the universal prefix argument is used then org src will be tangled first.
"
  (interactive "P")
  (when (equal arg '(4))                  ; C-u
    (gwp/org-babel-tangle-dwim)
    )
  (gwp/cargo-compile "d")
  )

(defun gwp/rust-cargo-update ()
  "Execute `cargo update` command"
  (interactive)
  (gwp/cargo-compile "update"))

(defun gwp/rust-cargo-doc-open ()
  "Execute `cargo doc --open` command"
  (interactive)
  (gwp/cargo-compile "doc --open --no-deps"))

;; ;; 修改popup window, 放大一些, 方便查看.
;; (set-popup-rule! "^\\*compilation\\*" :size 0.85 :quit t :select t :ttl nil)
;; gwp/org-babel-tangle-dwim

(require 'transient)
(transient-define-prefix gwp/rust-cargo-transient ()
  "rust development tools"
  [["compile rust project:"
    ("c" "cargo check" gwp/rust-cargo-watch-check)
    ("t" "cargo test" gwp/rust-cargo-watch-test)
    ("u" "cargo update" gwp/rust-cargo-update)
    ("d" "cargo doc" gwp/rust-cargo-doc-open)
    ("r" "recompile" recompile)
    ]]
  )

(map! :map org-mode-map
      :localleader
      "1" #'gwp/rust-cargo-transient
      )
(map! :map rust-mode-map
      :localleader
      "1" #'gwp/rust-cargo-transient
      )
#+end_src

*** cargo/cargo.el
:PROPERTIES:
:header-args: :tangle no
:END:
- [[https://github.com/kwrooijen/cargo.el][kwrooijen/cargo.el: Emacs Minor Mode for Cargo, Rust's Package Manager.]]

[2021-09-20 Mon] 这里的问题: 执行时会切到workspace root执行, 如果hack后, 就与rust-mode中的功能相当了.

cargo命令如果使用C-u 调用, 可在minibuffer中修改cargo参数.

以下自定义cargo-watch命令, 比在term下执行更好一些.
- p, n来跳转到前一个或下一个error
- 使用Alt-n, Alt-p可以快速定位error或warning 或C-j, C-k
- 链接到的src文件可直接打开.
- 按q退出

使用el-path修改cargo-process调用方式, 不要切换至workspace根目录执行cargo命令, 更
匹配命令行使用习惯.
#+begin_src elisp
(eval-when-compile (require 'el-patch))

(use-package cargo
  :defer t
  :hook (rust-mode . cargo-minor-mode)
  :custom
  (cargo-process--custom-path-to-bin "cargo.sh")
  (cargo-process--command-check "check -q")
  (cargo-process--command-test "test -- --nocapture --test-threads=1")
  ;;   :config/el-patch
  ;;   (defun cargo-process--start (name command &optional last-cmd opens-external)
  ;;     "Start the Cargo process NAME with the cargo command COMMAND.
  ;; OPENS-EXTERNAL is non-nil if the COMMAND is expected to open an external application.
  ;; Returns the created process."
  ;;     (set-rust-backtrace command)
  ;;     (let* ((buffer (concat "*Cargo " name "*"))
  ;;            (project-root (cargo-process--project-root))
  ;;            (cmd
  ;;             (or last-cmd
  ;;                 (cargo-process--maybe-read-command
  ;;                  (cargo-process--augment-cmd-for-os opens-external
  ;;                                                     (mapconcat #'identity (list (shell-quote-argument cargo-process--custom-path-to-bin)
  ;;                                                                                 command
  ;;                                                                                 ;; (manifest-path-argument name)
  ;;                                                                                 cargo-process--command-flags)
  ;;                                                                " ")))))
  ;;            ;; (default-directory (or project-root default-directory))
  ;;            )
  ;;       (save-some-buffers (not compilation-ask-about-save)
  ;;                          (lambda ()
  ;;                            (and project-root
  ;;                                 buffer-file-name
  ;;                                 (string-prefix-p project-root (file-truename buffer-file-name)))))
  ;;       (setq cargo-process-last-command (list name command cmd))
  ;;       ;; (let ((default-directory (or (cargo-process--workspace-root)
  ;;       ;;                              default-directory)))
  ;;       ;;   (compilation-start cmd 'cargo-process-mode (lambda(_) buffer)))
  ;;       (compilation-start cmd 'cargo-process-mode (lambda(_) buffer))
  ;;       (let ((process (get-buffer-process buffer)))
  ;;         (set-process-sentinel process 'cargo-process--finished-sentinel)
  ;;         process)))

  :init
  (add-hook 'conf-toml-mode-hook 'cargo-minor-mode) ; when edit Cargo.toml
  )

(require 'cargo)
(require 'transient)
(transient-define-prefix gwp/rust-cargo-transient ()
  "Search zotero database"
  [["Search zotero items:"
    ("c" "cargo check" cargo-process-check)
    ("t" "cargo test" cargo-process-test)
    ("u" "cargo update" cargo-process-update)
    ("d" "cargo doc" cargo-process-doc-open)
    ]]
  )

(map! :map org-mode-map
      :localleader
      "1" #'gwp/rust-cargo-transient
      )
(map! :map rust-mode-map
      :localleader
      "1" #'gwp/rust-cargo-transient
      )
#+end_src

*** racer
用于自动补全, 比lsp更轻便些.
#+begin_src elisp
(use-package cargo
  :defer t
  :init
  (progn
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (add-hook 'racer-mode-hook #'company-mode)
    ))
#+end_src

*** rust-format
rust版比doom版的更好, 可自动跳转到出错点(c-c c-n)
#+begin_src elisp
(map! :map rust-mode-map
      :localleader
      "f" #'rust-format-buffer
      "C-f" #'rust-format-buffer
      "=" #'rust-format-buffer)

(use-package rust-mode
  :hook (rust-mode . gwp/override-doom-format-buffer)
  )

(defun gwp/override-doom-format-buffer ()
  (evil-local-set-key 'normal (kbd "SPC =") 'rust-format-buffer)
  )
#+end_src

** rustic-mode
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src elisp
(use-package rustic
  :custom
  (rustic-lsp-client nil)
  (rustic-format-on-save nil)
  (rustic-display-spinner nil)
  )
#+end_src

** python.el
[[file:doom-emacs/modules/tools/eval/README.org::+TITLE: tools/eval]]

: SPC-o-r 打开repl
: SPC-c-s send-region
默认的挺难用的
#+begin_src elisp :tangle no
(after! python
  (setq python-shell-interpreter "ipython"))
#+end_src

使用tmux/ipython组合来实现

#+begin_src elisp
(defun gwp/tmux-ipython-paste-region (beg end &optional region)
  "Execute \"%paste\" in tmux session"
  (interactive "r")
  (kill-ring-save beg end)
  (+tmux/run "%paste"))
#+end_src

** packages
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/packages.el
:END:
需要安装cargo.el等包
#+begin_src elisp
(package! cargo)
(package! racer)
(package! rust-mode)
#+end_src

* org.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/org.el
:END:
** docs
这里放org配置相关的内容, 在config.el中以load!宏来加载.

配置参考:
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
- [[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-org.el][.emacs.d/setup-org.el at master · kaushalmodi/.emacs.d]]

** 基本设置
#+begin_src elisp
;; treat .note files as org-mode
(add-to-list 'auto-mode-alist '("\\.note\\'" . org-mode))
(add-to-list 'auto-mode-alist '("NOTE" . org-mode))

(setq org-blank-before-new-entry nil)
(setq org-default-notes-file (concat org-directory "/life.note"))

;; 保留以前的 Alt-Return 键行为, Alt-Return
(org-defkey org-mode-map [(meta return)] 'org-meta-return)

;; 禁用字词检查, 需要了再开
(remove-hook! 'org-mode-hook #'flyspell-mode)
(flyspell-mode 0)

;; https://orgmode.org/manual/Clean-view.html
(setq org-startup-indented t)      ;Enable `org-indent-mode' on Org startup
(with-eval-after-load 'org-indent
  (setq org-indent-indentation-per-level 1)) ;Default = 2

;; 对齐headline中的TAGs
(setq org-tags-column -80)

;; 避免误编辑
(setq org-catch-invisible-edits 'show-and-error)
#+end_src

** 按键行为
#+begin_src elisp
(defun gwp/new-memo (arg)
  "Insert a new org-mode memo entry under heading at point."

  (interactive "P")
  (call-interactively 'evil-open-below)
  (insert "** ")
  (call-interactively 'org-time-stamp-inactive)
  (insert " ")
  )

;; 经常按错这个键, 禁用之 (Ctrl-c ;)
(put 'org-toggle-comment 'disabled t)

(map! :map org-mode-map
      :n "gh" #'org-up-element
      :n "gl" #'org-down-element ; doom中默认为: evil-lion-left
      :n "gk" #'org-previous-visible-heading
      :n "gj" #'org-next-visible-heading
      :n "M-l" #'org-metaright   ; doom中默认为 demote-subtree
      :n "M-h" #'org-metaleft    ; doom中默认为 promote-subtree
      )
#+end_src

** view
#+begin_src elisp
;; 可以设置 :VISIBILITY: 属性来控制subtree的可视度. doom里修改了startup设置, 起
;; 反作用, 去掉:
(remove-hook! 'org-mode-hook #'+org-unfold-to-2nd-level-or-point-h)

;; 避免切换时闪烁
;; (setq org-startup-indented nil)
;(remove-hook! 'org-mode-hook #'org-indent-mode)

;; 避免显示subtree之间多余的空行
(setq org-cycle-separator-lines 0)

(use-package org-superstar
  :init
  ;; » ◇ ▶
  (setq org-superstar-headline-bullets-list '("◉" "○" "»" "»"))
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  )
#+end_src

** dwim
*** enter-at-point
+org/dwim-at-point, 在org-src环境, 直接编辑代码, 而非执行

*** open-at-point
默认在另一窗口打开链接, 如果使用C-u参数, 则强制在本窗口打开.
#+begin_src elisp
;; https://stackoverflow.com/questions/17590784/how-to-let-org-mode-open-a-link-like-file-file-org-in-current-window-inste
;; Depending on universal argument try opening link
(defun gwp/org-open-at-point-dwim (&optional arg)
  (interactive "P")
  (if arg (let ((org-link-frame-setup (quote ((file . find-file)))))
            (org-open-at-point)
            )
    (let ((org-link-frame-setup (quote ((file . find-file-other-window)))))
      (org-open-at-point)
      (golden-ratio))))

(map! :map org-mode-map "C-c C-o" #'gwp/org-open-at-point-dwim)
(map! :map org-mode-map
      :localleader
      "o" #'gwp/org-open-at-point-dwim)
#+end_src

** screenshot
- org-contrib: [[file:doom-emacs/.local/straight/repos/org-mode/contrib/lisp/org-screenshot.el][org-screenshot.el]]
  
目前最佳方案: 使用org-download来实现屏幕截图的功能
- 在firefox或screenshot等截图后复制到X11剪贴板.
- 调用org-download-clipboard完成图片插入操作.
  - 图片自动保存到org attachment目录
  - 自动添加图片显示参数, 设定在org中显示的大小
- 可以使用org-download-delete来删除当前image

目前的问题 ([2020-03-06 Fri])
- 第二次执行截图时, 如果clipboard无图, emacs会挂住, 现在无解.

#+begin_src emacs-lisp
(defun gwp/org-image-attributes-default (&optional caption)
  "default image attributes: caption, name label, width ..."
  "Annotate LINK with the time of download."
  (format (concat
           (concat  "#+caption: " (read-string "Caption: " caption) "\n")
           ;; set unique figure name
           (format "#+name: fig:%s\n" (substring (org-id-new) 0 8))
           ;; unit in px; for displaying in org-mode
           "#+attr_org: :width 800\n"
           ;; unit in cm; for exporting as odt
           "#+attr_odt: :width 10\n"
           )))

(defun gwp/org-insert-image-attributes (&optional caption)
  "insert image attributes such as caption and labels"
  (interactive)
  (insert (gwp/org-image-attributes-default caption)))

(defun gwp/org-download-annotate (link)
  "Annotate LINK with the time of download."
  (gwp/org-image-attributes-default))

(use-package! org-download
  :commands
  org-download-delete
  org-download-yank
  org-download-clipboard
  :bind (:map org-mode-map
         ("C-c v" . org-download-clipboard))
  :config
  (progn
    (setq org-download-method 'attach
          org-download-annotate-function 'gwp/org-download-annotate
          ;; org-download-image-html-width 900 ; in px
          ;; org-download-image-latex-width 16 ; in cm
          ;; 2021-09-03: 直接调用org-download-clipboard即可, 以下代码不必要
          ;; org-download-screenshot-method
          ;; (cond ((executable-find "txclip")  "txclip paste --image -o %s")
          ;;       ((executable-find "scrot") "scrot -s %s"))
          )))
#+end_src

安装org-download包
#+begin_src emacs-lisp :tangle pkg/.doom.d/packages.el
(package! org-download)
#+end_src

** latex preview
默认公式预览图片太小, 改大一些([[https://emacs.stackexchange.com/questions/19880/font-size-control-of-latex-previews-in-org-files][URL]]).
- [[https://emacs.stackexchange.com/questions/30309/latex-preview-on-hidpi-display/30318#30318][LaTeX preview on HiDPI display - Emacs Stack Exchange]]
#+begin_src elisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.5))
#+end_src

** org-babel
*** docs
参考
- [[https://org-babel.readthedocs.io/en/latest/][Org Babel reference card]]

如何察看noweb展开后的代码:
- C-c C-v v: org-babel-expand-src-block

*** init
#+begin_src emacs-lisp
;; 不缩进org-src块中的代码.
;; 注意: 不直接设置为"org-src-preserve-indentation t",
;; 只设置org-edit-src-content-indentation为0, 这样仅影响编辑的org, 不影响tangle
;; 出的代码. 以前的org文档可以逐步调回来
(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0) ;Default = 2

;; helper functions for literate programming
;; taking from: https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.org
(defun help/set-org-babel-default-header-args (property value)
  "Easily set system header arguments in org mode.

PROPERTY is the system-wide value that you would like to modify.

VALUE is the new value you wish to store.

Attribution: URL `http://orgmode.org/manual/System_002dwide-header-arguments.html#System_002dwide-header-arguments'"
  (setq org-babel-default-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args))))

;; 几个重要的header args:
(help/set-org-babel-default-header-args :padline "yes")
(help/set-org-babel-default-header-args :mkdirp "yes")
(help/set-org-babel-default-header-args :comments "link")
#+end_src

*** enter
#+begin_src emacs-lisp
;; 禁用代码着色, 影响速度
;; (setq org-src-fontify-natively nil)

;; 编辑代码时在下方新开窗口
;;(setq org-src-window-setup 'split-window-below)
(setq org-src-window-setup 'current-window)
;(setq org-src-window-setup 'reorganize-frame)
;;(setq org-src-window-setup 'other-frame)

;; 进入代码编辑模式, 改成容易按的
(map! :map org-mode-map
      :ni "C-c ;" #'org-edit-special
      :ni "C-c C-;" #'org-edit-special
      :localleader ";" #'org-edit-special
      )
#+end_src

*** toml
方便写Cargo.toml, 指定为toml为conf-toml-mode, 而不用写全 "conf-toml".
#+begin_src elisp
;; Add convenience lang alias for markdown blocks
(add-to-list 'org-src-lang-modes '("toml" . conf-toml))
#+end_src

*** edit
- org-babel-demarcate-block: 可以用来将选中代码分割为不同的代码块.
- org-babel-do-key-sequence-in-edit-buffer: 在当前代码下直接执行src code语境下的命令

#+begin_src emacs-lisp
;; 用于激活 localleader
(add-hook 'org-src-mode-hook #'evil-normalize-keymaps)

;; 默认的不太好按. 不能用C-c C-c, 容易与别的模块冲突.
(map! :map org-src-mode-map
      "C-c ;"   #'org-edit-src-exit  ; 保存退出
      "C-c C-;" #'org-edit-src-exit  ; 保存退出
      "C-c C-k" #'org-edit-src-abort ; 放弃修改
      )
(map! :map org-src-mode-map
      :localleader
      ";" #'org-edit-src-exit
      "k" #'org-edit-src-abort
      )

(map! :map org-src-mode-map
      :leader
      ";" #'org-edit-src-exit
      )
#+end_src

*** jump
从org文件跳转到tangled file
#+begin_src elisp
;; https://emacs.stackexchange.com/questions/50649/jumping-from-a-source-block-to-the-tangled-file
(defun gwp/org-babel-tangle-jump-to-file ()
  "Jump to tangle file for the source block at point."
  (interactive)
  (let (file org-babel-pre-tangle-hook org-babel-post-tangle-hook)
    (cl-letf (((symbol-function 'write-region) (lambda (start end filename &rest _ignore)
                         (setq file filename)))
          ((symbol-function 'delete-file) #'ignore))
      (org-babel-tangle '(4)))
    (when file
      (setq file (expand-file-name file))
      (if (file-readable-p file)
      (find-file file)
    (error "Cannot open tangle file %S" file)))))
#+end_src

跳回来可用(需要配合src block name一起使用):
: org-babel-tangle-jump-to-org

将tangle file中的修改返回给org
: org-babel-detangle

还有一个https://github.com/mtekman/org-tanglesync.el. 但使用上有限制 [[https://github.com/mtekman/org-tanglesync.el/issues/13][issue 13]].
*** noweb
org-babel-expand-src-block (可以展开noweb macro)

*** tangle
注意: tangle-subtree时得注意, 可能会以部分内容覆盖总文件.
#+begin_src elisp
;; tangle blocks for current file at point
;; http://stackoverflow.com/questions/28727190/org-babel-tangle-only-one-code-block
;; call org-babel-tangle with C-u C-u
(defun gwp/org-babel-tangle-blocks()
  (interactive)
  (let ((current-prefix-arg '(16)))
    (call-interactively 'org-babel-tangle)
    )
  )

;; narrow to subtree before calling org-babel-tangle
(defun gwp/org-tangle-subtree()
  "tange src blocks in current subtree"
  (interactive)
  (org-narrow-to-subtree)
  (org-babel-tangle)
  (widen)
  )
#+end_src

如何在代码编辑窗口中tangle?
#+begin_src elisp
(defun gwp/org-edit-save-and-tangle ()
  "when in a sub-editing buffer, swith to the parent buffer and tangle the file blocks"
  (interactive)
  (when (buffer-modified-p) (org-edit-src-save))
  (org-edit-src-exit)
  (call-interactively 'gwp/org-babel-tangle-blocks)
  (org-edit-src-code)
  )

(defun gwp/org-babel-tangle-dwim()
  "tangle current file at point whenever in a sub-editing buffer or not"
  (interactive)
  (if (org-src-edit-buffer-p)
      (save-excursion
        (call-interactively 'gwp/org-edit-save-and-tangle)
        )
    (if (eq 'src-block (org-element-type (org-element-at-point)))
        (call-interactively 'gwp/org-babel-tangle-blocks)
      (message "not in source block")
      )
    )
  )
#+end_src

禁用当前代码块或整个headline. 还可以用 org-delete-property 删除 header-args
#+begin_src elisp
  (defun gwp/org-babel-tangle-no()
    (interactive)
    (if (eq 'src-block (org-element-type (org-element-at-point)))
      (org-babel-insert-header-arg "tangle" "no")
      (org-set-property "header-args" ":tangle no")
      )
    )
#+end_src

*** template
- http://orgmode.org/manual/Languages.html

#+begin_src emacs-lisp
(with-eval-after-load 'ob
    (setq org-structure-template-alist
          '(
            ("py" . "src python :results output")
            ("rs" . "src rust")
            ("el" . "src emacs-lisp")
            ("sh" . "src sh")
          ))

  (defun gwp/org-babel-edit-structure-in-place (arg)
    "Insert source strcture and edit the source"
    (interactive "P")
    (call-interactively 'org-insert-structure-template)
    (call-interactively 'org-edit-src-code)
    )
 )
#+end_src

*** auto time-stamp
格式设置为类org-mode, 方便插入和修改. 参考: [[http://nullman.net/emacs/files/init-emacs.org][URL]]

#+begin_src emacs-lisp
(with-eval-after-load "ob-tangle"
  ;; update timestamps on tangled files
  (setq time-stamp-pattern "100/UPDATED:[ \t]+\\\\?[\"<]+%:y-%02m-%02d %3a %02H:%02M\\\\?[\">]")
  (defun org-babel-post-tangle-hook--time-stamp ()
    "Update timestamps on tangled files."
    (time-stamp)
    (save-buffer))
  (add-hook 'org-babel-post-tangle-hook 'org-babel-post-tangle-hook--time-stamp))
#+end_src

** org-noter/pdf-view
pdf-view-fit-width-to-window
#+begin_src elisp
(use-package! org-noter
  :config
  (setq org-noter-default-notes-file-names '("annotation.note"))
  )

(after! pdf-tools
  (map! :map pdf-view-mode-map
        :localleader
        (:prefix ("n" . "org-noter")
         "n" #'org-noter
         "i" #'org-noter-insert-note
         "I" #'org-noter-insert-precise-note
         )
        )
  ;; 方便标注
  (map! :map pdf-view-mode-map
        :leader
        ("d" #'pdf-annot-add-highlight-markup-annotation)
        :localleader
        ("h" #'pdf-annot-add-highlight-markup-annotation))

  (map! :map pdf-view-mode-map
        [C-mouse-5] (cmd! (pdf-view-shrink 1.10))
        [C-mouse-5] (cmd! (pdf-view-shrink 1.10))
        [mouse-9] (cmd! (pdf-view-previous-page-command))
        [mouse-8] (cmd! (pdf-view-next-page-command))
        )
  ;; 一页页看更方便
  (setq pdf-view-continuous nil)
  (setq-default pdf-view-display-size 'fit-width))
#+end_src

#+RESULTS:

** pairs
doom加了很多没用的pair, 比如 /, ~, *等. [2020-03-13 Fri] 折腾了一晚上才试好.
#+begin_src elisp :tangle pkg/.doom.d/packages.el
(package! smartparens-org :ignore t)
#+end_src

[2020-05-16 Sat] doom更新后没这些问题了
#+begin_src elisp :tangle no
(after! smartparens-org
  (sp-with-modes '(org-mode)
    (sp-local-pair "/" nil :actions :rem)
    (sp-local-pair "=" nil :actions :rem)
    (sp-local-pair "~" nil :actions :rem)
    (sp-local-pair "*" nil :actions :rem)
    (sp-local-pair "_" nil :actions :rem)
    )
  )
#+end_src

** narrow
[[https://www.reddit.com/r/orgmode/comments/dbsngi/finally_solving_the_lack_of_a_treeview_navigation/][Finally solving the lack of a tree-view navigation window in Org : orgmode]]
#+begin_src elisp
(defun ap/org-tree-to-indirect-buffer (&optional arg)
  "Create indirect buffer and narrow it to current subtree.
The buffer is named after the subtree heading, with the filename
appended.  If a buffer by that name already exists, it is
selected instead of creating a new buffer."
  (interactive "P")
  (let* ((new-buffer-p)
         (pos (point))
         (buffer-name (let* ((heading (org-get-heading t t))
                             (level (org-outline-level))
                             (face (intern (concat "outline-" (number-to-string level))))
                             (heading-string (propertize (org-link-display-format heading)
                                                         'face face)))
                        (concat heading-string "::" (buffer-name))))
         (new-buffer (or (get-buffer buffer-name)
                         (prog1 (condition-case nil
                                    (make-indirect-buffer (current-buffer) buffer-name 'clone)
                                  (error (make-indirect-buffer (current-buffer) buffer-name)))
                           (setq new-buffer-p t)))))
    (switch-to-buffer new-buffer)
    (when new-buffer-p
      ;; I don't understand why setting the point again is necessary, but it is.
      (goto-char pos)
      (rename-buffer buffer-name)
      (org-narrow-to-subtree))))

(advice-add 'org-tree-to-indirect-buffer :override 'ap/org-tree-to-indirect-buffer)
#+end_src

** zotero/ui                                                            :ATTACH:
:PROPERTIES:
:ID:       0cbea3c4-ceef-44b4-9d07-250080801511
:END:
[[file:rust-modules/rust-modules.note][rust-module.note]]

使用space-m-z-z打开zotero搜索界面
流程:
- 搜索文献
- 选中文献, 右键或Ctrl-o, 打开ivy actions界面
- 选择打开附件, ctrl-o, 打开action界面, 选择标注

#+caption: 文献PDF注解界面
#+name: fig:3381b8ba
#+attr_org: :width 800
#+attr_odt: :width 10
[[attachment:2021-08-25_16-19-20_screenshot.png]]

#+begin_src elisp
;; rust-modules
(add-to-list 'load-path "/home/ybyygu/Workspace/Programming/emacs/rust-modules")
(require 'zotero)

(defun gwp/zotero-search-by-tag (name)
  "Search Zotero entries by tag using ivy."
  (interactive "sTag: ")

  (let* ((candidates (zotero-search-items-by-tag name)))
    (ivy-read (format "Zotero entries: ")
              candidates
              :action '(2               ; set the default action to open attachments
                        ("o" gwp--ivy-action-open-link "Open link")
                        ("O" gwp--ivy-action-open-attachments "Open attachments")
                        ("r" gwp--ivy-action-show-related-items "Show Related Items")
                        ("i" gwp--ivy-action-insert-link "Insert link")))))

(defun gwp/zotero-search-by-collection (name)
  "Search Zotero entries by collection name using ivy."
  (interactive "sCollection: ")

  (let* ((candidates (zotero-search-items-by-collection name)))
    (ivy-read (format "Zotero entries: ")
              candidates
              :action '(2               ; set the default action to open attachments
                        ("o" gwp--ivy-action-open-link "Open link")
                        ("O" gwp--ivy-action-open-attachments "Open attachments")
                        ("r" gwp--ivy-action-show-related-items "Show Related Items")
                        ("i" gwp--ivy-action-insert-link "Insert link")))))

(defun gwp--ivy-action-show-related-items (x)
  "show related items from selection"
  (let* ((candidates (zotero-get-related-items x)))
    (ivy-read (format "Related: ")
              candidates
              :action '(2               ; set the default action to open attachments
                        ("o" gwp--ivy-action-open-link "Open link")
                        ("O" gwp--ivy-action-open-attachments "Open attachments")
                        ("r" gwp--ivy-action-show-related-items "Show Related Items")
                        ("i" gwp--ivy-action-insert-link "Insert link")))))

(defun gwp--ivy-action-annotate-attachment (pdf-file)
  "Annotate the attachment with org-noter."
  (let ((annotation-file (expand-file-name (car org-noter-default-notes-file-names) (file-name-directory pdf-file))))
    (progn
      ;; create an empty annotation file if not exists
      (unless (file-exists-p annotation-file) (write-region "" nil annotation-file))
      (org-open-file pdf-file)
      (org-noter))))

(defun gwp--ivy-action-open-attachments (x)
  "ivy completion for zotero attachments."
  (let* ((candidates (zotero-get-selected-item-attachment-paths x)))
    (ivy-read (format "Open attachment: ")
              candidates
              :action '(1               ; set the default action to open link
                        ("o" org-open-file "Open")
                        ("n" gwp--ivy-action-annotate-attachment "Annotate")))))

(defun gwp--ivy-action-insert-link (x)
  (let ((uri (zotero-get-selected-item-link x)))
    (if uri
        (progn
          (message "%s!" x)
          (insert "[[" uri "][" "zotero-item" "]]"))
      (error "No link extracted from: %s" x))))

(defun gwp--ivy-action-open-link (x)
  (let ((uri (zotero-get-selected-item-link x)))
    (if uri
        (progn
          (message "%s!" x)
          (org-link-open-from-string (format "[[%s]]" uri)))
      (error "No link extracted from: %s" x))))

(defun gwp/org-open-zotero-attachments-at-point (arg)
  "Handle zotero attachments in org-mode"
  (interactive "P")
  (let ((ct (org-element-context)))
    (if (eq 'link (org-element-type ct))
        (let ((link (org-element-property :raw-link ct)))
          (when link
            (let ((key (zotero-get-item-key-from-link link)))
              (if key
                  (gwp--ivy-action-open-attachments key)
                (error "Invalid zotero link!"))))))))

(defun gwp/org-open-zotero-related-at-point (arg)
  "Open related zotero items for zotero link at point"
  (interactive "P")
  (let ((ct (org-element-context)))
    (if (eq 'link (org-element-type ct))
        (let ((link (org-element-property :raw-link ct)))
          (when link
            (let ((key (zotero-get-item-key-from-link link)))
              (if key
                  (gwp--ivy-action-show-related-items key)
                (error "Invalid zotero link!"))))))))

(defun gwp/insert-new-zotero-item (arg)
  "Create a new zotero item (report)"
  (interactive "P")

  (let ((uri (zotero-create-new-note)))
    (if uri
        (progn
          (message "%s!" uri)
          (insert "[[" uri "][" "zotero-note" "]]"))
      (error "create zotero item failed!"))))

;; https://www.reddit.com/r/emacs/comments/f3o0v8/anyone_have_good_examples_for_transient/
(require 'transient)
(transient-define-prefix gwp/zotero-search-transient ()
  "Search zotero database"
  [["Search zotero items:"
    ("t" "search by tag" gwp/zotero-search-by-tag)
    ("c" "search by collection" gwp/zotero-search-by-collection)
    ("o" "open attachments at point" gwp/org-open-zotero-attachments-at-point)
    ("r" "open related items at point" gwp/org-open-zotero-related-at-point)
    ]]
  )
;; key bindings
(map! :map org-mode-map
      :localleader
      "z" #'gwp/zotero-search-transient
      "O" #'gwp/org-open-zotero-attachments-at-point)
#+end_src

** zotero/link
#+begin_src elisp
;; since org 9
(org-link-set-parameters "zotero" :follow #'gwp/org-zotero-open :export #'gwp/org-zotero-export)

(defun gwp/org-zotero-open (path)
  (setq url (format "zotero:%s" path))
  (browse-url url))
#+end_src

** zotero/export
支持 "zotero" 链接的点击行为及odt导出.

bibtex更新了item link的格式.
之前的:
: zotero://select/items/1_WZKAZKJG
新的
: zotero://select/items/6974

[[zotero://select/items/1_IIAJ9MX2][@Cao2011JMCC]]

#+begin_src emacs-lisp
(with-eval-after-load 'org-compat
  (defun gwp/org-zotero-export (path desc format)
    "Create the export version of zotero link specified by PATH and
DESC. FORMATs understood are 'odt','latex and 'html."
    (cond
     ((eq format 'html)
      (format "<a href=\"zotero:%s\">%s</a>" path desc))
     ((eq format 'latex)
      (format "\\href{zotero:%s}{%s}" path desc))
     ((eq format 'odt)
      ;; (format "<text:a xlink:type=\"simple\" xlink:href=\"zotero:%s\">%s</text:a>" path desc)
      (gwp/org-zotero-export-odt path desc)
      )
     (t desc)
     )
    )
  )

;;;; The magic string of zitem:
;; ZOTERO_ITEM CSL_CITATION
;; {
;; "properties": {
;; "formattedCitation": "[1]",
;; "plainCitation": "[1]"
;; },
;; "citationItems": [
;;                   {
;;                   "uri": [
;;                           "http://zotero.org/users/15074/items/S5JM4V35"
;;                           ]
;;                   }
;;                   ],
;; "schema": "https://github.com/citation-style-language/schema/raw/master/csl-citation.json"
;; } %s-rnd

;; adopted from https://www.mail-archive.com/emacs-orgmode@gnu.org/msg48905.html
(defun gwp/org-zotero-export-odt (path desc)
  (let
      ((refmark "<text:reference-mark-start text:name=\"%s\"/>%s<text:reference-mark-end text:name=\"%s\"/>")
       (zitem "ZOTERO_ITEM CSL_CITATION {
    &quot;properties&quot;: {
        &quot;formattedCitation&quot;: &quot;%s&quot;,
        &quot;plainCitation&quot;: &quot;%s&quot;
    },
    &quot;citationItems&quot;: [
        {
            &quot;uri&quot;: [
                &quot;http://zotero.org/users/15074/items/%s&quot;
            ]
        }
    ],
    &quot;schema&quot;: &quot;https://github.com/citation-style-language/schema/raw/master/csl-citation.json&quot;
} %s ")

       (item-key (car (cdr (split-string path "_"))))
       (rnd (concat "RND" (substring (org-id-new) -10))))
    (setq zitem
          (format zitem
                  desc
                  desc
                  item-key
                  rnd)
          )
    (setq desc (format "%s" desc))
    (format refmark zitem desc zitem))
  )

#+end_src

** odt export
odt导出时, 图表默认以大纲级别来编号. 对于中文文档, 如果章节以中文一二三编号时,
图表编号默认为一.1, 二.3. 这很古怪, 还是取消的好.

odt使用dvipng导出公式时生成的图片分辨率太低, 这里放大3倍, 然后通过设置odt dpi为
300(默认为96), 将image缩小为原始大小.

注意latex公式图片对应的目录ltxpng在ox-odt.el代码里写死了, 没法修改为其它的.

#+begin_src emacs-lisp
(use-package ox-odt
  :config
  (progn
    ;; continually numbering captions without outline level
    (setq org-odt-display-outline-level 0)

    ;; useful for odt export using dvipng
    (setq org-format-latex-options (plist-put org-format-latex-options :html-scale 3.0))
    (setq org-odt-pixels-per-inch 300.0)
    )
  )
#+end_src

由于手动换行的原因, odt导出时, 中文字符间会有多余的空格. 下面的设置用于解决这个问题:
#+begin_src emacs-lisp
;; adopted from https://github.com/tumashu/emacs-helper/blob/master/eh-org.el
(defun gwp/clear-unwanted-space (text)
  "clear unwanted space when exporting org-mode to other formats"
  (let ((regexp "[[:multibyte:]]")
        (string text))
    ;; org-mode 默认将一个换行符转换为空格，但中文不需要这个空格，删除。
    (setq string
          (replace-regexp-in-string
           (format "\\(%s\\) *\n *\\(%s\\)" regexp regexp)
           "\\1\\2" string))
    ;; 删除粗体之后的空格
    (dolist (str '("</b>" "</code>" "</del>" "</i>"))
      (setq string
            (replace-regexp-in-string
             (format "\\(%s\\)\\(%s\\)[ ]+\\(%s\\)" regexp str regexp)
             "\\1\\2\\3" string)))
    ;; 删除粗体之前的空格
    (dolist (str '("<b>" "<code>" "<del>" "<i>" "<span class=\"underline\">"))
      (setq string
            (replace-regexp-in-string
             (format "\\(%s\\)[ ]+\\(%s\\)\\(%s\\)" regexp str regexp)
             "\\1\\2\\3" string)))
    string)
  )

(defun gwp/ox-odt-wash-text (text backend info)
  "导出 org file 时，删除中文之间不必要的空格。"
  (when (org-export-derived-backend-p backend 'odt 'html 'latex)
    (gwp/clear-unwanted-space text)
    )
  )

(add-hook 'org-export-filter-headline-functions #'gwp/ox-odt-wash-text)
(add-hook 'org-export-filter-paragraph-functions #'gwp/ox-odt-wash-text)
#+end_src

** encryption
#+begin_src emacs-lisp
(require 'org-crypt)
(require 'epa-file)
(epa-file-enable)

;; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-crypt-tag-matcher "crypt")
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
                                        ; GPG key to use for encryption
(setq org-crypt-key "38D95BC6411A87E7") ; ybyygu@gmail.com
(setq org-crypt-disable-auto-save nil)
#+end_src

** org-attach
*** setup
#+begin_src emacs-lisp
(require 'org-attach)
#+end_src

*** copy & paste attachments
#+begin_src emacs-lisp
(setq org-attach-store-link-p 'attached)

;; 1. store the ataach files into clipboard
(defun gwp/org-attach-copy (&optional force)
  "store org attachment directory of current enetry"
  (interactive "P")
  ;; make a temporary symlink to store the attachment path
  (if-let (attach-files (counsel-org-files))
      (let ((current-dir (if buffer-file-name (file-name-directory buffer-file-name) default-directory)))
        (zotero-attach-txclip-copy-files attach-files current-dir))
    (message "No attachment found")))

;; 2. paste the stored files to new location
(defun gwp/org-attach-paste (&optional force)
  "move stored attachments to current entry"
  (interactive "P")
  (let ((current-dir (file-name-directory buffer-file-name)))
    (zotero-attach-txclip-paste-files current-dir)))
#+end_src

**** old
:PROPERTIES:
:header-args: :tangle no
:END:
添加附件时生成指向附件的路径, 方便org-insert-link添加.

使用软链接保存当前entry的附件目录. 注意make-symbolic-link的特殊性:
- 如果dest是个目录, 会在目录下建立目录
- 如果dest是个文件或symlink, 会报错

file-exists-p函数对symlink的特殊性:
- 如果测试目标是个boken symlink, 该函数返回nil
- 此外后续再symlink, 仍然会报错.

#+begin_src emacs-lisp
;; 1. store the directory
(defun gwp/org-attach-copy (&optional force)
  "store org attachment directory of current enetry"
  (interactive "P")
  ;; make a temporary symlink to store the attachment path
  (setq file-attach-tmp (concat spacemacs-cache-directory ".gwp-attach-tmp"))
  (let ((attach-dir (org-attach-dir)))
    (when attach-dir
      (progn
        ;; remove existing directory
        (when (file-directory-p file-attach-tmp) (delete-directory file-attach-tmp t))
        ;; remove existing file and symlink
        (when (file-exists-p file-attach-tmp) (delete-file file-attach-tmp))
        ;; remove broken symlink
        (when (file-symlink-p file-attach-tmp) (delete-file file-attach-tmp))
        (make-symbolic-link attach-dir file-attach-tmp)
        (message (format "stored to: %s" file-attach-tmp))
        )
      )
    )
  )
#+end_src

从存储的软链接中读取之前的entry的附件, 并移动到当前entry的附件目录里.
#+begin_src emacs-lisp
;; 2. move the stored directory to new location
(defun gwp/org-attach-paste (&optional force)
  "move stored attachments to current entry"
  (interactive "P")
  ;; ~/.emacs.d/.cache/.gwp-attach-tmp
  (setq file-attach-tmp (concat spacemacs-cache-directory ".gwp-attach-tmp"))

  (if (file-exists-p file-attach-tmp)
      ;; create attachment directory if not exists using org-attach-dir function
      (let ((attach-dir (org-attach-dir t)))
        (progn
          ;; read old attach directory from previous stored symlink
          (setq attach-dir-old (file-chase-links file-attach-tmp))
          ;; sanity check
          (if (y-or-n-p (format "%s/* ==> %s ?" attach-dir-old attach-dir))
              (progn
                (shell-command (format "mv %s/* %s" attach-dir-old attach-dir))
                ;; remove stale tmp-link
                (delete-file file-attach-tmp)
                )
            (message "cancelled")
            )
          )
        )
    (message (format "no stored symbolic link found: %s" file-attach-tmp))
    )
  )
#+end_src

*** take file link as attachment
[2020-03-21 Sat] org里有对应的功能: [[file:doom-emacs/.local/straight/repos/org-mode/contrib/lisp/org-attach-embedded-images.el][org-attach-embedded-images.el]]
**** 从当前位置文件链接提取文件名.
#+begin_src emacs-lisp
(defun gwp/org-file-link-p (&optional element)
  (let ((el (or element (org-element-context))))
    (and (eq (org-element-type el) 'link)
         (or
          (string= (org-element-property :type el) "file")
          (string= (org-element-property :type el) "attachment")
          ))))

(defun gwp/org-file-path-at-point()
  "get file path from link at point"
  (let ((el (org-element-context)))
    (when (eq (org-element-type el) 'link)
      (cond
       ((string= (org-element-property :type el) "file") (org-element-property :path el))
       ((string= (org-element-property :type el) "attachment") (org-attach-expand (org-element-property :path el)))
       (t nil)
       ))))
#+end_src

**** 使用org-attach将文件move到当到附录中并更新文件链接
#+begin_src emacs-lisp
;; (require 'org-download)

(defun gwp/org-store-link-without-desc (file)
  "store file link without the description part -- a tweak to make odt image exporting correct."
  (setq org-stored-links
        (cons (list (org-attach-expand-link (file-name-nondirectory file)) "")
              org-stored-links)))

(defun gwp/org-take-as-local-attachment ()
  "move file link at point as local attachment"
  (interactive)
  (let ((file (gwp/org-file-path-at-point)))
    (if file
        (progn
          ;; 1. store the file using copy
          ;; or we can use the mv method: (org-attach-attach file nil 'mv)
          ;; do not store file link since it will corrupt odt image exporting
          (let ((org-attach-store-link-p nil))
            (org-attach-attach file))
          ;; 2. remove the old
          (call-interactively 'org-download-delete)
          ;; 3. insert the new
          ;; use file name as the default caption
          (gwp/org-insert-image-attributes (file-name-sans-extension (file-name-nondirectory file)))
          (insert "\n")
          (gwp/org-store-link-without-desc file)
          (call-interactively 'org-insert-last-stored-link)
          ;; refresh the image if possbile
          (org-display-inline-images))
      (user-error "Point is not on a link"))))
#+end_src

*** delete link file
删除当前所在链接对应的文件. org-download-delete现在不可用(attachment link).
#+begin_src elisp
(defun gwp/org-delete-link-file (arg)
  "Delete the file that link points to."
  (interactive "P")

  (let ((file (gwp/org-file-path-at-point)))
    (if file
        (if (file-exists-p file)
            (when (yes-or-no-p (format "Delete link file: %s?" file))
              (progn (delete-file file)
                     (message "File deleted"))
              )
          (error "No such attachment: %s" file))
      (user-error "Point is not on a file link"))))
#+end_src

** capture & protocol
占位符:
| %:link         | URL of the web-page       |
| %:description  | The title of the web-page |
| %:initial / %i | Selected text.            |

#+begin_src emacs-lisp
(setq org-capture-templates
      '(
        ("n" "Note" entry (file "~/Notes/refile.note")
         "* %u %? %x\n  %:initial\n" :prepend t)
        ("t" "Task" entry (file+headline "~/Notes/life.note" "Tasks")
         "* TODO %^T %? %x\n  %i" :prepend t)
        ("r" "Research Memo" entry (file+headline "~/Notes/research.note" "Memo")
         "* %u %? %x\n  %i\n" :prepend t)
        ("p" "Paper" entry (file+headline "~/Notes/research.note" "Literature")
         "* TODO %u %? %x\n  %i\n" :prepend t)
        ("j" "Life Journal" entry (file+headline "~/Notes/life.note" "Journals")
         "* %u %? %x\n  %i\n" :prepend t)
        ("N" "Note from protocol" entry (file "~/Notes/refile.note")
         "* %u %? [[%:link][%:description]]\n  %:initial\n" :prepend t)))
#+end_src

** refile
refile流程:
- 打开refile.note
- 检查其中的条目, 找到可能的合适的归档note文件, 打开之.
- SPC-m-r-r, org-refile
- SPC-u SPC-m-r-r: 跳转至refile targets
 
#+BEGIN_SRC emacs-lisp
(defun gwp/org-get-refile-targets ()
  "Return the list of files currently opened in emacs"
  (delq nil
        (mapcar (lambda (x)
                  (if (and (buffer-file-name x)
                           (string-match "\\.note$"
                                         (buffer-file-name x)))
                      (buffer-file-name x)))
                (buffer-list))))

;;(setq org-refile-targets '((gwp/org-get-refile-targets :tag . "Incoming")))
(setq org-refile-targets '((gwp/org-get-refile-targets :regexp . "Memo")))
(setq org-refile-use-outline-path nil)

(setq org-reverse-note-order t)
(defun gwp/get-org-file-link-path ()
  (save-excursion
    (beginning-of-line)
    (search-forward "[[file:" (line-end-position))
    (if (org-in-regexp org-bracket-link-regexp 1)
        (org-link-unescape (match-string-no-properties 1)))))

(defun gwp/enter-to-read-state()
  "evoke external shell script when entering READ state"
  (when (equal org-state "READ")
    (setq file (gwp/get-org-file-link-path))
    (if file
        (progn
          (setq cmd (concat "org-to-read.sh " (shell-quote-argument file)))
          (message cmd)
          (shell-command cmd))))
  (when (equal org-last-state "READ")
    (message "try to remove READ state")
    (setq file (gwp/get-org-file-link-path))
    (if file
        (progn
          (setq cmd (concat "org-read-done.sh " (shell-quote-argument file)))
          (message cmd)
          (shell-command cmd)))))
(add-hook 'org-after-todo-state-change-hook 'gwp/enter-to-read-state)

;; show a sparse-tree in READ keyword
(defun gwp/org-show-read-tree ()
  "show a sparse-tree in READ keyword"
  (interactive)

  (let ((base-vector [?\C-u ?\M-x ?o ?r ?g ?- ?s ?h ?o ?w ?- ?t ?o ?d ?o ?- ?t ?r ?e ?e return ?R ?E ?A ?D return]))
    ;; create new macro of the form
    ;; C-u M-x org-show-todo-tree RET READ RET
    (execute-kbd-macro (vconcat base-vector
                                (vector 'return)))))
#+END_SRC

** agenda
基本设置
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org-agenda
  ;; 2013-01-20: less is more
  ;; (setq org-agenda-files (append (file-expand-wildcards "~/Notes/*.note") (file-expand-wildcards "~/Notes/*/*.note")))
  (setq org-agenda-files "~/Notes/.agenda_files")

  ;; the default is todo-start
  (setq org-icalendar-use-scheduled (quote (event-if-not-todo event-if-todo todo-start)))
  (setq org-icalendar-alarm-time 5)

  ;; Show all future entries for repeating tasks
  (setq org-agenda-repeating-timestamp-show-all t)

  ;; do not show agenda dates if they are empty
  (setq org-agenda-show-all-dates nil)

  ;; Sorting order for tasks on the agenda
  (setq org-agenda-sorting-strategy
        (quote ((agenda time-up priority-down category-up)
                (todo priority-down)
                (tags priority-down))))

  ;; Start the weekly agenda today
  (setq org-agenda-start-on-weekday nil)

  ;; do not include todo items
  (setq org-agenda-include-all-todo nil))
#+END_SRC

忽略已经完成的任务
#+begin_src emacs-lisp
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-scheduled-if-done t)
#+end_src

自定义agenda命令
#+begin_src emacs-lisp
(with-eval-after-load 'org-agenda
  (setq org-agenda-custom-commands
               '(
                 ("g" . "GTD contexts") ; description for "g" prefix
                 )
               )
  ;; project overview
  (add-to-list 'org-agenda-custom-commands
               '("gp" "Project"
                 (
                  (tags "Project+Action+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "Project\n------------------")
                         (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                         )
                        )
                  (tags "Action+Study+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "Topics\n------------------")
                         (org-agenda-files '("~/Notes/research.note"))
                         (org-agenda-sorting-strategy '(priority-down timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )
                  (tags "Action+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "生活琐事\n------------------")
                         (org-agenda-files '("~/Notes/life.note"))
                         (org-agenda-sorting-strategy '(priority-down timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )
                  ;; (tags "Computer+TODO=\"TODO\""
                  ;;       (
                  ;;        (org-agenda-overriding-header "电脑调优\n------------------")
                  ;;        (org-agenda-sorting-strategy '(priority-down timestamp-up))
                  ;;        (org-agenda-max-entries 5)
                  ;;        )
                  ;;       )
                  )
                 ;; options set here apply to the entire block
                 (
                  (org-tags-match-list-sublevels nil)
                  (org-agenda-prefix-format "%-20c ")
                  (org-agenda-todo-keyword-format "")
                  (org-agenda-remove-tags t)
                  (org-agenda-compact-blocks t)
                  )
                 )
               )

  (add-to-list 'org-agenda-custom-commands
               '("gr" "Reading"
                 (
                  (tags-todo "Reading|Read"
                             (
                              (org-agenda-overriding-header "待读列表\n------------------")
                              (org-agenda-sorting-strategy '(category-keep priority-down))
                              (org-agenda-remove-tags t)
                              (org-agenda-compact-blocks t)
                              )
                             )
                  (tags "REFILE"
                        (
                         (org-agenda-overriding-header "Tasks to Refile\n------------------")
                         (org-tags-match-list-sublevels nil)
                         )
                        )
                  )
                 ;; options set here apply to the entire block
                 ((org-agenda-compact-blocks t))
                 )
               )

  (add-to-list 'org-agenda-custom-commands
               '("gt" "Tasks"
                 (
                  (agenda ""
                          (
                           ;; (org-agenda-entry-types '(:deadline :scheduled))
                           (org-agenda-span (quote month)) ;; or (org-agenda-span 90)
                           (org-agenda-include-diary nil)
                           (org-agenda-overriding-header "Agenda\n------------------")
                           )
                          )
                  ;; (tags "ASAP+TODO=\"TODO\""
                  (tags-todo "ASAP"
                        (
                         (org-agenda-entry-types '(:timestamp))
                         (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                         (org-agenda-overriding-header "\nASAP\n------------------")
                         (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                         (org-agenda-max-entries 20)
                         (org-agenda-prefix-format "%-12c ")
                         (org-agenda-compact-blocks t)
                         )
                        )
                  )
                 ;; options set here apply to the entire block
                 (
                  (org-tags-match-list-sublevels nil)
                  ;; (org-agenda-files '("~/Notes/research.note" "~/Notes/life.note"))
                  (org-agenda-todo-keyword-format "")
                  (org-agenda-remove-tags t)
                  )
                 ;; agenda view exported with: Ctrl-C a e
                 ("~/Notes/agenda.html" "~/Notes/agenda.txt")
                 )
               )
  )
#+end_src

后台自动导出日程. 暂时禁用
#+BEGIN_SRC emacs-lisp :tangle no
;; disabled for upgrading to org-9.0
;; auto export agenda
(defun gwp/run-agenda-store ()
  ""
  (message "Exporting agenda... ")
  (org-batch-store-agenda-views)
  (message "Agenda exported."))

;; export agenda if I am away for 2 minutes
(run-with-idle-timer 600 t 'gwp/run-agenda-store)
#+END_SRC

闲时显示日程. 有兼容性问题, 暂时禁用.
#+begin_src emacs-lisp :tangle no
(use-package idle-org-agenda
  :after org-agenda
  :ensure t
  :config (idle-org-agenda-mode))

(custom-set-variables
 '(idle-org-agenda-interval 600) ;; 10 x 60 seconds
 '(idle-org-agenda-key "gt")     ;; Choose your specific agenda
 '(idle-org-agenda-mode t)
 )
#+end_src

** org-file-apps
org-open-file调用pdf-tools打开PDF文件
#+begin_src elisp
(add-to-list 'org-file-apps
             '("\\.pdf\\'" . (lambda (file link)
                               (org-pdftools-open link))))
#+end_src

** fix tab
解决按tab键乱窜的问题
#+begin_src elisp
(add-hook 'org-mode-hook #'evil-normalize-keymaps)
#+end_src

** misc
Org links to Unix man pages [[http://orgmode.org/manual/Adding-hyperlink-types.html][doc]]
#+begin_src emacs-lisp
;; (require 'org-man)
#+end_src

禁用*bold*等标注的字体效果. 写代码时容易弄花显示. 比如__init__.
#+begin_src emacs-lisp
(setq org-fontify-emphasized-text nil)
#+end_src

#+begin_src emacs-lisp :tangle no
(defun gwp/org-confirm-babel-evaluate (lang body)
  (not (string= lang "python")))  ; don't ask for python
(setq org-confirm-babel-evaluate 'gwp/org-confirm-babel-evaluate)
#+end_src

自动保存编辑的代码. [2018-12-17 Mon] will cause timerp error
#+begin_src emacs-lisp :tangle no
;; saving a source code buffer back into its base buffer
(setq org-edit-src-auto-save-idle-delay 1)
#+end_src

** bindings
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      (:prefix ("b" . "org-babel")
        :desc "check src block headers"    "c" #'org-babel-check-src-block
        :desc "insert header argument"     "i" #'org-babel-insert-header-arg
        :desc "view header arguments"      "I" #'org-babel-view-src-block-info
        :desc "demarcate block"            "d" #'org-babel-demarcate-block
        :desc "edit src codes in place"    "s" #'gwp/org-babel-edit-structure-in-place
        :desc "jump to tangled file"       "j" #'gwp/org-babel-tangle-jump-to-file
        :desc "insert header tangle no"    "n" #'gwp/org-babel-tangle-no
        :desc "execute in edit buffer"     "x" #'org-babel-do-key-sequence-in-edit-buffer
        :desc "tangle blocks at point"     "b" #'gwp/org-babel-tangle-dwim
        :desc "tangle blocks in subtree"   "t" #'gwp/org-tangle-subtree
        :desc "tangle blocks in buffer"    "T" #'org-babel-tangle
        )
      (:prefix ("l" . "links")
        "D" #'gwp/org-delete-link-file)
      )

(map! :map org-mode-map
      :localleader
      :desc "preview inline images"       "I"     #'org-toggle-inline-images
      :desc "preview latex fragments"     "L"     #'org-latex-preview
      :desc "Paste image from clipboard"  "C-v"   #'org-download-clipboard
      :desc "Move to next link"           "C-n"   #'org-next-link
      :desc "Move to prev link"           "C-p"   #'org-previous-link
      :desc "Move to next link"           [tab]   #'org-next-link
      :desc "Move to prev link"           [backtab]   #'org-previous-link)

(map! :map org-mode-map
      :leader
      :desc "tangle blocks at point"      "o b" #'gwp/org-babel-tangle-dwim
      :desc "execute in edit buffer"      "SPC" #'org-babel-do-key-sequence-in-edit-buffer
      :desc "org-babel"                   "a"   org-babel-map;  换个容易按的键位
      :desc "Enter-dwim"                  "RET" #'+org/dwim-at-point
      )

(map! :map org-mode-map
      :localleader
      ;; FIXME: 与doom/org定义有冲突
      (:prefix ("s" . "Subtree")
        :desc "Demote" "l" #'org-demote-subtree
        :desc "Promote" "h" #'org-promote-subtree
        :desc "Archive" "A" #'org-archive-subtree
        ;; :desc "Narrow" "n" #'org-tree-to-indirect-buffer ; 比org-toggle-narrow-to-subtree更好用些
        :desc "Narrow" "n" #'ap/org-tree-to-indirect-buffer
        :desc "Toggle org-sidebar-tree" "t" #'org-sidebar-tree-toggle
        )
      (:prefix ("SPC" . "Special")
        :desc "org-ctrl-c-star" "s" #'org-ctrl-c-star ; 方便盲按
        :desc "Insert new memo entry" "m" #'gwp/new-memo ; 简化操作
        )
      )
(map! :map org-mode-map
      :localleader
      (:prefix ("g" . "Goto")
        :desc "Goto the previous position"  "p" #'org-mark-ring-goto
        :desc "Jump to org heading"  "j" #'counsel-org-goto ; 默认绑定更好按: SPC-m .
        :desc "Goto named src block" "b" #'org-babel-goto-named-src-block
        )
      )
#+end_src

org-sidebar
#+begin_src elisp
(map! :map org-sidebar-tree-map
      :localleader
      :n "RET" #'org-sidebar-tree-jump
      :n [return] #'org-sidebar-tree-jump
      )
#+end_src

* modules/hack
新思路:
- fork doom-emacs, 仅做必要的修改. 将其中的org module更名后, 放到pkg下载入?
- 这样易于跟踪官方进度?
- 新的gwp/org会覆盖lang/org中的设置
- 注意修改文件首行的路径, 特别是autoloads, 否则不能正常加载:
  : -;;; lang/org/autoload/org-link.el -*- lexical-binding: t; -*-
  : +;;; ~/.doom.d/modules/gwp/org/autoload/org-link.el -*- lexical-binding: t; -*-

修改的模块:
** [[file:doom-hacks/modules/lang/org/config.el][org/config.el]]
** [[file:doom-hacks/modules/lang/rust/config.el][rust/config.el]]
** [[file:doom-hacks/modules/tools/magit/][magit/]]
** [[file:doom-hacks/modules/config/default][default]]

* snippets
:PROPERTIES:
:header-args: :comments nil
:END:
TAB自动补全很可怕, 无意按键, 补出很多没用的东西. doom系统下private snippets目录
为 ~/.doom.d/snippets.

- [[https://github.com/hlissner/doom-snippets][hlissner/doom-snippets: The Doom Emacs snippets library]]

** org-mode
*** begin_src
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src
# -*- mode: snippet -*-
# name: #+begin_src
# key: <s
# --
,#+begin_src $1
$0
,#+end_src
#+END_SRC

*** begin_src shell
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_sh
# -*- mode: snippet -*-
# name: #+begin_src shell
# key: <sh
# --
,#+begin_src shell
$0
,#+end_src
#+END_SRC

*** begin_src elisp
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_elisp
# -*- mode: snippet -*-
# name: #+begin_src elisp
# key: <el
# --
,#+begin_src elisp
$0
,#+end_src
#+END_SRC

*** begin_src python
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_python
# -*- mode: snippet -*-
# name: #+begin_src python
# key: <p
# --
,#+begin_src python
$0
,#+end_src
#+END_SRC

*** begin_src rust
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/org-mode/begin_src_rust
# -*- mode: snippet -*-
# name: #+begin_src rust
# key: <r
# --
,#+begin_src rust
$0
,#+end_src
#+END_SRC

** rust-mode
*** cfg
: pkg/.doom.d/snippets/rust-mode/cfg
*** impl Default
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/impl_default
  # -*- mode: snippet -*-
  # name: impl Default
  # key: Default
  # --
  impl Default for ${1:Type} {
      fn default() -> Self {
          ${0:Self::new()}
      }
  }
#+END_SRC

*** structopt
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/structopt
  # -*- mode: snippet -*-
  # name: #[derive(StructOpt)]
  # key: structopt
  # --
  #[derive(StructOpt, Debug, Clone)]
  struct ${1:Cli} {
      #[structopt(long, short)]
      ${2:n}: ${0:usize}
  }
#+END_SRC
*** if let
: pkg/.doom.d/snippets/rust-mode/if_let
*** deprecated
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/deprecated
# -*- mode: snippet -*-
# name: #deprecated(note=X);
# key: #dep
# --
#[deprecated(note = "$1")]
#+END_SRC

*** for
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/for
  # -*- mode: snippet -*-
  # name: for var in iterable { ... }
  # key: for
  # --
  for ${1:var} in ${2:iterable} {
      $0
  }
#+END_SRC

*** print
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/print
# -*- mode: snippet -*-
# name: print!("{}", value);
# key: print
# --
print!("${1:{}}", $2);
#+END_SRC

*** println
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/println
  # -*- mode: snippet -*-
  # name: println!("{}", value);
  # key: println
  # --
  println!("${1:{}}", $2);
#+END_SRC

*** eprintln
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/eprintln
# -*- mode: snippet -*-
# name: eprintln!("{}", value);
# key: eprintln
# --
eprintln!("${1:{}}", $2);
#+END_SRC

*** fn
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/fn
# -*- mode: snippet -*-
# name: fn name() { ... }
# key: fn
# --
fn ${1:name}($2) {
   ${0:todo!()}
}
#+END_SRC

*** fnr
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/fnr
# -*- mode: snippet -*-
# name: fn name() -> Type { ... }
# key: fnr
# --
fn ${1:name}($2) -> ${3:Result<${4:()}>} {
     ${0:todo!()}
}
#+END_SRC

*** fnw
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/fnw
  # -*- mode: snippet -*-
  # name: fn name<T>(x: T) where T: Clone { ... }
  # key: fnw
  # --
  fn ${1:name}<${2:T}>(${3:x: T}) where ${4:T: Clone} {
       $0
  }
#+END_SRC

*** test
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/test
# -*- mode: snippet -*-
# name: #[test] fn test_name() { .. }
# key: #test
# --
#[test]
fn ${1:test_name}() {
   $0
}
#+END_SRC

*** result
: pkg/.doom.d/snippets/rust-mode/result

*** todo!
: pkg/.doom.d/snippets/rust-mode/todo

*** derive
: pkg/.doom.d/snippets/rust-mode/derive

*** main
#+BEGIN_SRC snippet :tangle pkg/.doom.d/snippets/rust-mode/main
  # -*- mode: snippet -*-
  # name: fn main() { ... }
  # key: main
  # --
  fn main() {
     $0
  }
#+END_SRC

** prog-mode
*** fixme
: pkg/.doom.d/snippets/prog-mode/fixme

*** todo
: pkg/.doom.d/snippets/prog-mode/todo


* theme
[[file:emacs-material-theme/][file:~/Workspace/Programming/emacs/emacs-material-theme/]]

* Local variables
# Emacs:
# Local Variables:
# mode: org
# end:
