#+TITLE: org-mode config for doom-emacs
#+SETUPFILE: ~/Notes/common.org

spacemacs设置 [[file:~/Install/configs/spacemacs/config.note]]

* Memo [2/7]
** TODO [2020-02-29 Sat] 改进rust编程体系
- [ ] toml fmt https://github.com/andreyorst/dotfiles/tree/master/.config/emacs#toml
- [X] rust中"{|}" 中回车行为. 原来是spacemacs中有特别配置. [[https://emacs.stackexchange.com/questions/2837/automatically-formatting-brackets][stackexchange]]

** TODO [2020-02-28 Fri] 太多需要修改的地方了, 只能一点点改进, 慢慢搭.

** DONE [2020-02-28 Fri] 解决org-mode中怪异的Tab键行为问题
CLOSED: [2020-02-28 Fri 15:42]
- State "DONE"       from "TODO"       [2020-02-28 Fri 15:42]
- [[https://github.com/hlissner/doom-emacs/issues/1897][[BUG] org-mode TAB key mapped to different command when emacs running as daemon · Issue #1897 · hlissner/doom-emacs]]

去掉:config中的 +bindings 开关正常了.

** TODO [2020-02-28 Fri] 可用的主题
[[*theme][theme]]
: doom-acario-light
: doom-material
: doom-moonlight
: doom-nord-light x
: doom-nord
: doom-oceanic-next
: doom-one-light x
: doom-opera-light x
: doom-palenight
: doom-peacock x
: doom-snazzy
: doom-tomorrow-day x
: doom-vibrant

** DONE [2020-02-27 Thu] 解决 org-mode 插入时间戳快捷键被占用的问题
CLOSED: [2020-02-28 Fri 15:42]
- State "DONE"       from "TODO"       [2020-02-28 Fri 15:42]
: C-c ! (org-time-stamp-inactive)

禁用:checkers组中的modules即可.

** TODO [2020-02-27 Thu] doom尝鲜
doom的优点:
1. 较spacemacs轻量, 启动快, 架构简单, 后续易维护
2. 和spacemacs使用类似的key-bindings
3. 社区质量高, 作者维护热情高

1. 不要使用emacs中内置的custom机制
2. 不用使用use-package中的包安装机制(:ensure)
3. 不要使用org-babel中的rg-babel-do-load-languages机制

- config中的flags: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#flags][doom-emacs/getting_started.org at develop · hlissner/doom-emacs]]
- doom api: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#map][doom-emacs/api.org at develop · hlissner/doom-emacs]]

https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/rest/README.org


https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/zen/README.org

https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/workspaces/README.org

https://github.com/hlissner/doom-emacs/issues/2483
doom clean && doom sync && doom build

https://github.com/emacs-tw/awesome-emacs

git clone https://code.orgmode.org/bzg/org-mode.git

doom要clone很多github上的repo, 很容易被RESET, 导致安装失败.

git使用v2ray proxy
https://gist.github.com/evantoli/f8c23a37eb3558ab8765

https://segmentfault.com/q/1010000000118837

** TODO [2020-02-27 Thu] Ctrl-E的问题
: evil-motion-state-map C-e


* 常用按键
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#map][doom-emacs/api: map!]]

** dired-jump
| C-x C-j |
| SPC-f-j |

** org-edit-special
| C-c '   | hard to press |
| SPC-m ; |               |


* Literate Programming in Rust

* 配置安装
** stow配置管理思路
- tangle时仅导出到当目录下或子目录下, 方便git管理.
- stow再 "install" 到主目录下.

** 使用chemacs做emacs双启动
- 进入chemacsk目录, 执行install.sh即可.
- 修改 ~/.emacs-profiles.el

** 安装doom-emacs
- 进入doom-emacs目录, 执行:
  : bin/doom install

doom会根据~/.doom.d中的配置, 更新doom-emacs/.local目录中的内容. 如果doom-emacs目
录位置发生变化, 需要删除.local/straints/build目录, 再重建:
: doom-emacs/bin/doom build
* 调试步骤
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#testing-in-dooms-sandbox][doom-emacs/getting_started.org at develop · hlissner/doom-emacs]]

* install
** Makefile
使用gnu stow来将pkg目录下的文件安装symlink到$HOME下对应的目录

#+header: :tangle Makefile
#+BEGIN_SRC makefile -i
default: doom-sync

install: stow
	stow --verbose --adopt --no-folding --target ~/ pkg
uninstall:
	stow --verbose --target ~/ --delete pkg

# doom 相关操作
doom-sync: pkg/.doom.d/init.el pkg/.doom.d/packages.el	# 修改doom配置后执行
	doom-emacs/bin/doom sync
doom-build:											                        # 重建.local下build目录
	doom-emacs/bin/doom build
doom-clean:											                        # 清理过期的.elc文件
	doom-emacs/bin/doom clean
doom-upgrade:										                        # 升级doom及packages
	doom-emacs/bin/doom upgrade
start:
	emacs --with-profile doom
stow:
	which stow
#+END_SRC

** doom commands
#+begin_src text
  1. Whenever you edit your doom! block in ~/.doom.d/init.el or modify your
     modules, run:

       bin/doom refresh

     This will ensure all needed packages are installed, all orphaned packages are
     removed, and your autoloads files are up to date. This is important! If you
     forget to do this you will get errors!

  2. If something inexplicably goes wrong, try `bin/doom doctor`

     This will diagnose common issues with your environment and setup, and may
     give you clues about what is wrong.

  3. Use `bin/doom upgrade` to update Doom. Doing it any other way may require
     additional work. When in doubt, run `bin/doom sync`.

  4. Check out `bin/doom help` to see what else `bin/doom` can do (and it is
     recommended you add ~/.emacs.d/bin to your PATH).

  5. You can find Doom's documentation via `M-x doom/help` or `SPC h D`.
#+end_src

#+begin_src shell :tangle no
  ./doom-emacs/bin/doom clean
  ./doom-emacs/bin/doom refresh
#+end_src


* doom config
共三个配置文件, tangle到pkg/.doom.d目录下, 再由stow软链到$HOME.
** init.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/init.el :comments nil
:END:
*** modules
#+begin_src elisp
  ;;; init.el -*- lexical-binding: t; -*-

  ;; This file controls what Doom modules are enabled and what order they load in.
  ;; Remember to run 'doom sync' after modifying it!

  ;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
  ;;      documentation. There you'll find information about all of Doom's modules
  ;;      and what flags they support.

  ;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
  ;;      'C-c g k' for non-vim users) to view its documentation. This works on
  ;;      flags as well (those symbols that start with a plus).
  ;;
  ;;      Alternatively, press 'gd' (or 'C-c g d') on a module to browse its
  ;;      directory (for easy access to its source code).

  (doom! :input
         chinese
         ;;japanese

         :completion
         company           ; the ultimate code completion backend
         ;;helm              ; the *other* search engine for love and life
         ;;ido               ; the other *other* search engine...
         ivy               ; a search engine for love and life

         :ui
         ;;deft              ; notational velocity for Emacs
         doom              ; what makes DOOM look the way it does
         doom-dashboard    ; a nifty splash screen for Emacs
         doom-quit         ; DOOM quit-message prompts when you quit Emacs
         ;;fill-column       ; a `fill-column' indicator
         hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
         ;;hydra
         ;;indent-guides     ; highlighted indent columns
         modeline          ; snazzy, Atom-inspired modeline, plus API
         nav-flash         ; blink the current line after jumping
         ;;neotree           ; a project drawer, like NERDTree for vim
         ;;ophints           ; highlight the region an operation acts on
         (popup            ; tame sudden yet inevitable temporary windows
          +all             ; catch all popups that start with an asterix
          +defaults)       ; default popup rules
         ;;pretty-code       ; replace bits of code with pretty symbols
         ;;tabs              ; an tab bar for Emacs
         ;;treemacs          ; a project drawer, like neotree but cooler
         ;;unicode           ; extended unicode support for various languages
         vc-gutter         ; vcs diff in the fringe
         vi-tilde-fringe   ; fringe tildes to mark beyond EOB
         window-select     ; visually switch windows
         workspaces        ; tab emulation, persistence & separate workspaces
         zen               ; distraction-free coding or writing

         :editor
         (evil +everywhere); come to the dark side, we have cookies
                                          ;(evil); come to the dark side, we have cookies
         file-templates    ; auto-snippets for empty files
         fold              ; (nigh) universal code folding
         ;;(format +onsave)  ; automated prettiness
         ;;god               ; run Emacs commands without modifier keys
         ;;lispy             ; vim for lisp, for people who don't like vim
         multiple-cursors  ; editing in many places at once
         ;;objed             ; text object editing for the innocent
         ;;parinfer          ; turn lisp into python, sort of
         rotate-text       ; cycle region at point between text candidates
         snippets          ; my elves. They type so I don't have to
         ;;word-wrap         ; soft wrapping with language-aware indent

         :emacs
         dired             ; making dired pretty [functional]
         electric          ; smarter, keyword-based electric-indent
         ibuffer           ; interactive buffer management
         vc                ; version-control and Emacs, sitting in a tree

         :term
         ;;eshell            ; a consistent, cross-platform shell (WIP)
         ;;shell             ; a terminal REPL for Emacs
         ;;term              ; terminals in Emacs
         vterm             ; another terminals in Emacs

         :checkers
         ;;syntax              ; tasing you for every semicolon you forget
         ;;spell             ; tasing you for misspelling mispelling
         ;;grammar           ; tasing grammar mistake every you make

         :tools
         ;;ansible
         ;;debugger          ; FIXME stepping through code, to help you add bugs
         ;;direnv
         ;;docker
         ;;editorconfig      ; let someone else argue about tabs vs spaces
         ;;ein               ; tame Jupyter notebooks with emacs
         (eval +overlay)     ; run code, run (also, repls)
         ;;gist              ; interacting with github gists
         (lookup           ; helps you navigate your code and documentation
          +docsets)        ; ...or in Dash docsets locally
         ;;lsp
         ;;macos             ; MacOS-specific commands
         magit             ; a git porcelain for Emacs
         ;;make              ; run make tasks from Emacs
         ;;pass              ; password manager for nerds
         pdf               ; pdf enhancements
         ;;prodigy           ; FIXME managing external services & code builders
         ;;rgb               ; creating color strings
         ;;terraform         ; infrastructure as code
         tmux              ; an API for interacting with tmux
         ;;upload            ; map local to remote projects via ssh/ftp

         :lang
         ;;agda              ; types of types of types of types...
         ;;assembly          ; assembly for fun or debugging
         ;;cc                ; C/C++/Obj-C madness
         ;;clojure           ; java with a lisp
         ;;common-lisp       ; if you've seen one lisp, you've seen them all
         ;;coq               ; proofs-as-programs
         ;;crystal           ; ruby at the speed of c
         ;;csharp            ; unity, .NET, and mono shenanigans
         data              ; config/data formats
         ;;elixir            ; erlang done right
         ;;elm               ; care for a cup of TEA?
         emacs-lisp        ; drown in parentheses
         ;;erlang            ; an elegant language for a more civilized age
         ;;ess               ; emacs speaks statistics
         ;;faust             ; dsp, but you get to keep your soul
         ;;fsharp           ; ML stands for Microsoft's Language
         ;;fstar             ; (dependent) types and (monadic) effects and Z3
         ;;go                ; the hipster dialect
         ;;(haskell +dante)  ; a language that's lazier than I am
         ;;hy                ; readability of scheme w/ speed of python
         ;;idris             ;
         ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
         ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
         ;;julia             ; a better, faster MATLAB
         ;;kotlin            ; a better, slicker Java(Script)
         ;;latex             ; writing papers in Emacs has never been so fun
         ;;lean
         ;;factor
         ;;ledger            ; an accounting system in Emacs
         ;;lua               ; one-based indices? one-based indices
         markdown          ; writing docs for people to ignore
         ;;nim               ; python + lisp at the speed of c
         ;;nix               ; I hereby declare "nix geht mehr!"
         ;;ocaml             ; an objective camel
         ;;perl              ; write code no one else can comprehend
         ;;php               ; perl's insecure younger brother
         ;;plantuml          ; diagrams for confusing people more
         ;;purescript        ; javascript, but functional
         python            ; beautiful is better than ugly
         ;;qt                ; the 'cutest' gui framework ever
         ;;racket            ; a DSL for DSLs
         ;;rest              ; Emacs as a REST client
         ;;rst               ; ReST in peace
         ;;ruby              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
         rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
         ;;scala             ; java, but good
         ;;scheme            ; a fully conniving family of lisps
         sh                ; she sells {ba,z,fi}sh shells on the C xor
         ;;solidity          ; do you need a blockchain? No.
         ;;swift             ; who asked for emoji variables?
         ;;terra             ; Earth and Moon in alignment for performance.
         ;;web               ; the tubes

         :email
         ;;(mu4e +gmail)
         ;;notmuch
         ;;(wanderlust +gmail)

         :app
         ;;calendar
         ;;irc               ; how neckbeards socialize
         ;;(rss +org)        ; emacs as an RSS reader
         ;;twitter           ; twitter client https://twitter.com/vnought

         :gwp                ; 自定义模块
         (org)

         :config
         ;;literate
         ;;(default +bindings +smartparens)
         (default +smartparents)
         )
#+end_src

** config.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/config.el :comments nil
:END:
*** orign
#+BEGIN_SRC emacs-lisp
  ;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

  ;; Place your private configuration here! Remember, you do not need to run 'doom
  ;; sync' after modifying this file!


  ;; Some functionality uses this to identify you, e.g. GPG configuration, email
  ;; clients, file templates and snippets.
  (setq user-full-name "Wenping Guo"
        user-mail-address "ybyygu@gmail.com")

  ;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
  ;; are the three important ones:
  ;;
  ;; + `doom-font'
  ;; + `doom-variable-pitch-font'
  ;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
  ;;   presentations or streaming.
  ;;
  ;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
  ;; font string. You generally only need these two:
  (setq doom-font (font-spec :family "Monaco" :size 14))

  ;; This determines the style of line numbers in effect. If set to `nil', line
  ;; numbers are disabled. For relative line numbers, set this to `relative'.
  (setq display-line-numbers-type t)

  ;; Here are some additional functions/macros that could help you configure Doom:
  ;;
  ;; - `load!' for loading external *.el files relative to this one
  ;; - `use-package' for configuring packages
  ;; - `after!' for running code after a package has loaded
  ;; - `add-load-path!' for adding directories to the `load-path', relative to
  ;;   this file. Emacs searches the `load-path' when you load packages with
  ;;   `require' or `use-package'.
  ;; - `map!' for binding new keys
  ;;
  ;; To get information about any of these functions/macros, move the cursor over
  ;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
  ;; This will open documentation for it, including demos of how they are used.
  ;;
  ;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
  ;; they are implemented.
#+END_SRC

*** 常用按键
禁用evil中的ctrl-e, 默认为向上滚动, 不太习惯. [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#map][map!用法]]

#+begin_src elisp
  (map! :map evil-motion-state-map "C-e" nil)
  (map! :map evil-insert-state-map "C-n" nil)
  (map! :map evil-insert-state-map "C-p" nil)
  (map! :map evil-normal-state-map "C-n" nil)
  (map! :map evil-normal-state-map "C-p" nil)
#+end_src

默认config module中的+bindings flag有问题, 导至org-mode中TAB键异常. 这里摘取其中
重要代码. 载入doom中的默认按键绑定: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#load][load!用法]]
#+begin_src elisp
  ;; Make M-x harder to miss
  (define-key! 'override
    "M-x" #'execute-extended-command
    "A-x" #'execute-extended-command)

  ;; A Doom convention where C-s on popups and interactive searches will invoke
  ;; ivy/helm for their superior filtering.
  (define-key! :keymaps +default-minibuffer-maps
    "C-s" (if (featurep! :completion ivy)
              #'counsel-minibuffer-history
            #'helm-minibuffer-history))

  ;; Smarter C-a/C-e for both Emacs and Evil. C-a will jump to indentation.
  ;; Pressing it again will send you to the true bol. Same goes for C-e, except
  ;; it will ignore comments+trailing whitespace before jumping to eol.
  (map! :gi "C-a" #'doom/backward-to-bol-or-indent
        :gi "C-e" #'doom/forward-to-last-non-comment-or-eol
        ;; Standardizes the behavior of modified RET to match the behavior of
        ;; other editors, particularly Atom, textedit, textmate, and vscode, in
        ;; which ctrl+RET will add a new "item" below the current one
        :gn [C-return]    #'+default/newline-below
        :gn [C-S-return]  #'+default/newline-above
        )

  (load! "bindings")
#+end_src

*** 界面设置
**** chinese fonts setup
#+begin_src elisp
  (use-package! cnfonts
    :config
    (progn
      (setq cnfonts-profiles
            '("program" "org-mode" "read-book"))
      (setq cnfonts-use-face-font-rescale t)
      )
    (cnfonts-enable)
    )
#+end_src

**** theme
#+begin_src elisp
  ;; There are two ways to load a theme. Both assume the theme is installed and
  ;; available. You can either set `doom-theme' or manually load a theme with the
  ;; `load-theme' function. This is the default:
  ;;(setq doom-theme 'doom-acario-light)
  ;; (setq doom-theme 'doom-one)
  (load-theme 'material t)
#+end_src

**** window
自动放大当前窗口. 注意, 这类工具通过和doom的popup window有冲突. 需要的时候用zoom
命令手动开启.

对应命令: SPC-w z
#+begin_src emacs-lisp
  (use-package! zoom
                ;; :after-call pre-command-hook
                :config
                (custom-set-variables
                 '(zoom-size '(0.618 . 0.618)))
                (map! :map evil-window-map
                      "z" #'zoom)
                )
#+end_src

golden-ratio有点问题
https://github.com/hlissner/doom-emacs/issues/2225
#+begin_src elisp :tangle no
  (use-package! golden-ratio
                :after-call pre-command-hook
                :config
                (golden-ratio-mode +1)
                ;; Using this hook for resizing windows is less precise than
                ;; `doom-switch-window-hook'.
                (remove-hook 'window-configuration-change-hook #'golden-ratio)
                (add-hook 'doom-switch-window-hook #'golden-ratio))
#+end_src

*** org-mode
**** 基本设置
#+begin_src elisp
  ;; If you use `org' and don't want your org files in the default location below,
  ;; change `org-directory'. It must be set before org loads!
  (setq org-directory "~/Notes/")

  ;; treat .note files as org-mode
  (add-to-list 'auto-mode-alist '("\\.note\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("NOTE" . org-mode))

  (after! org
    (setq org-blank-before-new-entry nil)
    (setq org-default-notes-file (concat org-directory "/life.note"))

    ;; 保留以前的 Alt-Return 键行为, Alt-Return
    (org-defkey org-mode-map [(meta return)] 'org-meta-return)

    ;; doom 默认 src 中不保留缩进.
    (setq org-src-preserve-indentation nil)
    )
#+end_src
**** 按键行为
- [ ] 还原在normal/insert state下, Ctrl-k的行为: org-kill-line
- [ ] 修改编辑 org-src 快捷键, 默认的不太容易盲按.
- [ ] org-metaright, org-demote-subtree

#+begin_src elisp
  (after! org
          ;; 经常按错这个键, 禁用之 (Ctrl-c ;)
          (put 'org-toggle-comment 'disabled t)

          (map! :map org-mode-map
                :ni "C-k" #'org-kill-line
                :ni "C-c ;" #'org-edit-special
                :ni "C-c C-;" #'org-edit-special
                :localleader ";" #'org-edit-special
                :n "h" #'org-up-element
                )
          (setq org-src-fontify-natively nil)
          )
#+end_src

doom中的tag行为有些怪异, 禁用之:
#+begin_src elisp :tangle no
  (after! evil-org
          (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h))
#+end_src

*** org-babel
**** tangle
***** 按 SPC-m SPC-t tangle当前代码:
#+begin_src elisp
  (after! org
    (map! :map org-mode-map
          :leader
          :desc "tangle src blocks at point"
          "m SPC t"
          #'gwp/org-babel-tangle-blocks)
    )

  ;; tangle blocks for current file at point
  ;; http://stackoverflow.com/questions/28727190/org-babel-tangle-only-one-code-block
  ;; call org-babel-tangle with C-u C-u
  (defun gwp/org-babel-tangle-blocks()
    (interactive)
    (let ((current-prefix-arg '(16)))
      (call-interactively 'org-babel-tangle)
      )
    )
#+end_src

下面的代码不太可靠, 禁用
#+begin_src elisp :tangle no
  (defun gwp/org-edit-save-and-tangle ()
    "when in a sub-editing buffer, swith to the parent buffer and tangle the file blocks"
    (interactive)
    (when (buffer-modified-p) (org-edit-src-save))
    (org-edit-src-exit)
    (call-interactively 'gwp/org-babel-tangle-blocks)
    (org-edit-src-code)
    )

  (defun gwp/org-babel-tangle-dwim()
    "tangle current file blocks whenever in a sub-editing buffer or not"
    (interactive)
    (if (org-src-edit-buffer-p) (call-interactively 'gwp/org-edit-save-and-tangle)
      (call-interactively 'gwp/org-babel-tangle-blocks)
      )
    )
#+end_src
**** edit
编辑代码时在下方新开窗口
#+begin_src emacs-lisp
  (after! org
          (setq org-src-window-setup 'split-window-below)
          (define-key org-src-mode-map (kbd "C-c C-c") #'org-edit-src-exit)
          )
#+end_src

*** rust
解决花括号中 "{|}" 中换行行为, 与spacemacs保持一致.
- https://emacs.stackexchange.com/questions/2837/automatically-formatting-brackets
#+begin_src emacs-lisp
  (after! smartparens
          (sp-local-pair 'rust-mode "{" nil :post-handlers '(:add ("||\n[i]" "RET"))))

  ;; (after! rust-mode
  ;;         (use-package clean-aindent-mode
  ;;           :config (clean-aindent-mode)
  ;;           )
  ;;         )
#+end_src

*** magit
spacemacs中的习惯, 加回来, 避免忙中出错
#+begin_src elisp
  (after! magit
          (map! :map doom-leader-git-map "s" #'magit-status)
          )
#+end_src

*** 中文问题相关 [[https://github.com/hick/emacs-chinese][URL]]
#+begin_src emacs-lisp :tangle no
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (global-font-lock-mode t)

  ;; force a syntax-highlighting refresh
  (global-set-key (kbd "<f5> <f5>") 'font-lock-fontify-buffer)

  (auto-image-file-mode t)              ; View images inside Emacs

  ;; set line space wider than default
  (setq-default line-spacing 4)

  ;; 修改 frame 标题 方便 gnome-shell 桌面切换
  (setq frame-title-format '("" "%b: " buffer-file-name))
#+end_src

** packages.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/packages.el :comments nil
:END:
*** orig
#+begin_src elisp
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here, run 'doom sync' on
;; the command line, then restart Emacs for the changes to take effect.
;; Alternatively, use M-x doom/reload.
;;
;; WARNING: Disabling core packages listed in ~/.emacs.d/core/packages.el may
;; have nasty side-effects and is not recommended.


;; All of Doom's packages are pinned to a specific commit, and updated from
;; release to release. To un-pin all packages and live on the edge, do:
;(unpin! t)

;; ...but to unpin a single package:
;(unpin! pinned-package)
;; Use it to unpin multiple packages
;(unpin! pinned-package another-pinned-package)


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a particular repo, you'll need to specify
;; a `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, for whatever reason,
;; you can do so here with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))
#+end_src

*** 需要安装的包
- chfonts: 中文显示
- golden-ratio: 自动放大当前window
- 修改版material-theme
  - 改小org-heading字体的scaling系数
  - 调整TODO, DONE的调色, 别那么刺眼

#+begin_src elisp
  (package! cnfonts)
  (package! berrys-theme)
  ;; (package! material-theme)
  (package! material-theme
            :recipe (:host github :repo "ybyygu/emacs-material-theme"))
#+end_src

- 窗口大小自动调整:
#+begin_src emacs-lisp
  (package! golden-ratio)
  (package! zoom)
#+end_src

*** 需要禁用的包
pangu-spacing 自动给中英文字加空格, 这严重影响响应速度.
org-bullets由于字体原因, 显示不佳.

#+begin_src elisp
  (disable-packages! org-bullets pangu-spacing)
#+end_src
** bindings.el
:PROPERTIES:
:header-args: :tangle pkg/.doom.d/bindings.el :comments nil
:END:
从doom config module中取出, 禁用Tab键相关设置, 修复按键Bug.

此文件在config.el中使用load!宏来加载

: /home/ybyygu/Workspace/Programming/emacs/doom-emacs/modules/config/default/packages.el
#+begin_src elisp
  ;;; config/default/+bindings.el -*- lexical-binding: t; -*-
  ;;
  ;;; Global keybindings

  ;; Smart tab, these will only work in GUI Emacs
  (map! ;; :i [tab] (general-predicate-dispatch nil ; fall back to nearest keymap
        ;;            (and (featurep! :editor snippets)
        ;;                 (bound-and-true-p yas-minor-mode)
        ;;                 (yas-maybe-expand-abbrev-key-filter 'yas-expand))
        ;;            #'yas-expand
        ;;            (and (featurep! :completion company +tng)
        ;;                 (+company-has-completion-p))
        ;;            #'+company/complete)
        ;; :n [tab] (general-predicate-dispatch nil
        ;;            (and (featurep! :editor fold)
        ;;                 (save-excursion (end-of-line) (invisible-p (point))))
        ;;            #'+fold/toggle
        ;;            (fboundp 'evil-jump-item)
        ;;            #'evil-jump-item)
        ;; :v [tab] (general-predicate-dispatch nil
        ;;            (and (bound-and-true-p yas-minor-mode)
        ;;                 (or (eq evil-visual-selection 'line)
        ;;                     (not (memq (char-after) (list ?\( ?\[ ?\{ ?\} ?\] ?\))))))
        ;;            #'yas-insert-snippet
        ;;            (fboundp 'evil-jump-item)
        ;;            #'evil-jump-item)

        ;; Smarter newlines
        :i [remap newline] #'newline-and-indent  ; auto-indent on newline
        :i "C-j"           #'+default/newline    ; default behavior

        (:after help :map help-mode-map
          :n "o"       #'link-hint-open-link)
        (:after helpful :map helpful-mode-map
          :n "o"       #'link-hint-open-link)
        (:after info :map Info-mode-map
          :n "o"       #'link-hint-open-link)
        (:after apropos :map apropos-mode-map
          :n "o"       #'link-hint-open-link
          :n "TAB"     #'forward-button
          :n [tab]     #'forward-button
          :n [backtab] #'backward-button)
        (:after view :map view-mode-map
          [escape]  #'View-quit-all)
        (:after man :map Man-mode-map
          :n "q"    #'kill-current-buffer)

        :m "gs"     #'+evil/easymotion  ; lazy-load `evil-easymotion'
        (:after evil-org
          :map evil-org-mode-map
          :m "gsh" #'+org/goto-visible)

        (:when (featurep! :editor multiple-cursors)
          :prefix "gz"
          :nv "d" #'evil-mc-make-and-goto-next-match
          :nv "D" #'evil-mc-make-and-goto-prev-match
          :nv "j" #'evil-mc-make-cursor-move-next-line
          :nv "k" #'evil-mc-make-cursor-move-prev-line
          :nv "m" #'evil-mc-make-all-cursors
          :nv "n" #'evil-mc-make-and-goto-next-cursor
          :nv "N" #'evil-mc-make-and-goto-last-cursor
          :nv "p" #'evil-mc-make-and-goto-prev-cursor
          :nv "P" #'evil-mc-make-and-goto-first-cursor
          :nv "q" #'evil-mc-undo-all-cursors
          :nv "t" #'+multiple-cursors/evil-mc-toggle-cursors
          :nv "u" #'evil-mc-undo-last-added-cursor
          :nv "z" #'+multiple-cursors/evil-mc-make-cursor-here
          :v  "I" #'evil-mc-make-cursor-in-visual-selection-beg
          :v  "A" #'evil-mc-make-cursor-in-visual-selection-end)

        ;; misc
        :n "C-S-f"  #'toggle-frame-fullscreen
        :n "C-+"    #'doom/reset-font-size
        ;; Buffer-local font resizing
        :n "C-="    #'text-scale-increase
        :n "C--"    #'text-scale-decrease
        ;; Frame-local font resizing
        :n "M-C-="  #'doom/increase-font-size
        :n "M-C--"  #'doom/decrease-font-size)


  ;;
  ;;; Module keybinds

  ;;; :completion
  (map! (:when (featurep! :completion company)
          :i "C-@"      #'+company/complete
          :i "C-SPC"    #'+company/complete
          (:after company
            (:map company-active-map
              "C-w"     nil  ; don't interfere with `evil-delete-backward-word'
              "C-n"     #'company-select-next
              "C-p"     #'company-select-previous
              "C-j"     #'company-select-next
              "C-k"     #'company-select-previous
              "C-h"     #'company-show-doc-buffer
              "C-u"     #'company-previous-page
              "C-d"     #'company-next-page
              "C-s"     #'company-filter-candidates
              "C-S-s"   (cond ((featurep! :completion helm) #'helm-company)
                              ((featurep! :completion ivy)  #'counsel-company))
              "C-SPC"   #'company-complete-common
              "TAB"     #'company-complete-common-or-cycle
              [tab]     #'company-complete-common-or-cycle
              [backtab] #'company-select-previous
              [f1]      nil)
            (:map company-search-map  ; applies to `company-filter-map' too
              "C-n"     #'company-select-next-or-abort
              "C-p"     #'company-select-previous-or-abort
              "C-j"     #'company-select-next-or-abort
              "C-k"     #'company-select-previous-or-abort
              "C-s"     (λ! (company-search-abort) (company-filter-candidates))
              [escape]  #'company-search-abort))
          ;; TAB auto-completion in term buffers
          (:after comint :map comint-mode-map
            "TAB" #'company-complete
            [tab] #'company-complete))

        (:when (featurep! :completion ivy)
          (:after ivy
            :map ivy-minibuffer-map
            "C-SPC" #'ivy-call-and-recenter  ; preview file
            "C-l"   #'ivy-alt-done
            "C-v"   #'yank)
          (:after counsel
            :map counsel-ag-map
            "C-SPC"    #'ivy-call-and-recenter ; preview
            "C-l"      #'ivy-done
            [C-return] #'+ivy/git-grep-other-window-action))

        (:when (featurep! :completion helm)
          (:after helm :map helm-map
            [left]     #'left-char
            [right]    #'right-char
            "C-S-f"    #'helm-previous-page
            "C-S-n"    #'helm-next-source
            "C-S-p"    #'helm-previous-source
            "C-S-j"    #'helm-next-source
            "C-S-k"    #'helm-previous-source
            "C-j"      #'helm-next-line
            "C-k"      #'helm-previous-line
            "C-u"      #'helm-delete-minibuffer-contents
            "C-s"      #'helm-minibuffer-history
            ;; Swap TAB and C-z
            "TAB"      #'helm-execute-persistent-action
            [tab]      #'helm-execute-persistent-action
            "C-z"      #'helm-select-action)
          (:after helm-ag :map helm-ag-map
            "C--"      #'+helm-do-ag-decrease-context
            "C-="      #'+helm-do-ag-increase-context
            [left]     nil
            [right]    nil)
          (:after helm-files :map (helm-find-files-map helm-read-file-map)
            [C-return] #'helm-ff-run-switch-other-window
            "C-w"      #'helm-find-files-up-one-level)
          (:after helm-locate :map helm-generic-files-map
            [C-return] #'helm-ff-run-switch-other-window)
          (:after helm-buffers :map helm-buffer-map
            [C-return] #'helm-buffer-switch-other-window)
          (:after helm-occur :map helm-occur-map
            [C-return] #'helm-occur-run-goto-line-ow)
          (:after helm-grep :map helm-grep-map
            [C-return] #'helm-grep-run-other-window-action)))

  ;;; :ui
  (map! (:when (featurep! :ui popup)
          :n "C-`"   #'+popup/toggle
          :n "C-~"   #'+popup/raise
          :g "C-x p" #'+popup/other)

        (:when (featurep! :ui workspaces)
          :n "C-t"   #'+workspace/new
          :n "C-S-t" #'+workspace/display
          :g "M-1"   #'+workspace/switch-to-0
          :g "M-2"   #'+workspace/switch-to-1
          :g "M-3"   #'+workspace/switch-to-2
          :g "M-4"   #'+workspace/switch-to-3
          :g "M-5"   #'+workspace/switch-to-4
          :g "M-6"   #'+workspace/switch-to-5
          :g "M-7"   #'+workspace/switch-to-6
          :g "M-8"   #'+workspace/switch-to-7
          :g "M-9"   #'+workspace/switch-to-8
          :g "M-0"   #'+workspace/switch-to-final
          (:when IS-MAC
            :g "s-t"   #'+workspace/new
            :g "s-T"   #'+workspace/display
            :n "s-1"   #'+workspace/switch-to-0
            :n "s-2"   #'+workspace/switch-to-1
            :n "s-3"   #'+workspace/switch-to-2
            :n "s-4"   #'+workspace/switch-to-3
            :n "s-5"   #'+workspace/switch-to-4
            :n "s-6"   #'+workspace/switch-to-5
            :n "s-7"   #'+workspace/switch-to-6
            :n "s-8"   #'+workspace/switch-to-7
            :n "s-9"   #'+workspace/switch-to-8
            :n "s-0"   #'+workspace/switch-to-final)))

  ;;; :editor
  (map! (:when (featurep! :editor format)
          :n "gQ" #'+format:region)

        (:when (featurep! :editor rotate-text)
          :n "!"  #'rotate-text)

        (:when (featurep! :editor multiple-cursors)
          ;; evil-multiedit
          :v  "R"     #'evil-multiedit-match-all
          :n  "M-d"   #'evil-multiedit-match-symbol-and-next
          :n  "M-D"   #'evil-multiedit-match-symbol-and-prev
          :v  "M-d"   #'evil-multiedit-match-and-next
          :v  "M-D"   #'evil-multiedit-match-and-prev
          :nv "C-M-d" #'evil-multiedit-restore
          (:after evil-multiedit
            (:map evil-multiedit-state-map
              "M-d"    #'evil-multiedit-match-and-next
              "M-D"    #'evil-multiedit-match-and-prev
              "RET"    #'evil-multiedit-toggle-or-restrict-region
              [return] #'evil-multiedit-toggle-or-restrict-region)))

        (:when (featurep! :editor snippets)
          ;; auto-yasnippet
          :i  [C-tab] #'aya-expand
          :nv [C-tab] #'aya-create))

  ;;; :tools
  (when (featurep! :tools eval)
    (map! "M-r" #'+eval/buffer))


  ;;
  ;;; <leader>

  (map! :leader
        :desc "Eval expression"       ";"    #'pp-eval-expression
        :desc "M-x"                   ":"    #'execute-extended-command
        :desc "Pop up scratch buffer" "x"    #'doom/open-scratch-buffer
        :desc "Org Capture"           "X"    #'org-capture

        ;; C-u is used by evil
        :desc "Universal argument"    "u"    #'universal-argument
        :desc "window"                "w"    evil-window-map
        :desc "help"                  "h"    help-map

        (:when (featurep! :ui popup)
          :desc "Toggle last popup"     "~"    #'+popup/toggle)
        :desc "Find file"             "."    #'find-file

        :desc "Switch buffer"         ","    #'switch-to-buffer
        (:when (featurep! :ui workspaces)
          :desc "Switch workspace buffer" "," #'persp-switch-to-buffer
          :desc "Switch buffer"           "<" #'switch-to-buffer)

        :desc "Switch to last buffer" "`"    #'evil-switch-to-windows-last-buffer
        :desc "Resume last search"    "'"
        (cond ((featurep! :completion ivy)   #'ivy-resume)
              ((featurep! :completion helm)  #'helm-resume))

        :desc "Search for symbol in project" "*" #'+default/search-project-for-symbol-at-point

        :desc "Find file in project"  "SPC"  #'projectile-find-file
        :desc "Jump to bookmark"      "RET"  #'bookmark-jump

        ;;; <leader> TAB --- workspace
        (:when (featurep! :ui workspaces)
          (:prefix-map ("TAB" . "workspace")
            :desc "Display tab bar"           "TAB" #'+workspace/display
            :desc "Switch workspace"          "."   #'+workspace/switch-to
            :desc "Switch to last workspace"  "`"   #'+workspace/other
            :desc "New workspace"             "n"   #'+workspace/new
            :desc "Load workspace from file"  "l"   #'+workspace/load
            :desc "Save workspace to file"    "s"   #'+workspace/save
            :desc "Delete session"            "x"   #'+workspace/kill-session
            :desc "Delete this workspace"     "d"   #'+workspace/delete
            :desc "Rename workspace"          "r"   #'+workspace/rename
            :desc "Restore last session"      "R"   #'+workspace/restore-last-session
            :desc "Next workspace"            "]"   #'+workspace/switch-right
            :desc "Previous workspace"        "["   #'+workspace/switch-left
            :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
            :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
            :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
            :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
            :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4
            :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5
            :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6
            :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7
            :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8
            :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final))

        ;;; <leader> b --- buffer
        (:prefix-map ("b" . "buffer")
          :desc "Toggle narrowing"            "-"   #'doom/toggle-narrow-buffer
          :desc "Previous buffer"             "["   #'previous-buffer
          :desc "Next buffer"                 "]"   #'next-buffer
          (:when (featurep! :ui workspaces)
            :desc "Switch workspace buffer" "b" #'persp-switch-to-buffer
            :desc "Switch buffer"           "B" #'switch-to-buffer)
          (:unless (featurep! :ui workspaces)
            :desc "Switch buffer"           "b" #'switch-to-buffer)
          :desc "Kill buffer"                 "d"   #'kill-current-buffer
          :desc "ibuffer"                     "i"   #'ibuffer
          :desc "Kill buffer"                 "k"   #'kill-current-buffer
          :desc "Kill all buffers"            "K"   #'doom/kill-all-buffers
          :desc "Switch to last buffer"       "l"   #'evil-switch-to-windows-last-buffer
          :desc "Set bookmark"                "m"   #'bookmark-set
          :desc "Delete bookmark"             "M"   #'bookmark-delete
          :desc "Next buffer"                 "n"   #'next-buffer
          :desc "New empty buffer"            "N"   #'evil-buffer-new
          :desc "Kill other buffers"          "O"   #'doom/kill-other-buffers
          :desc "Previous buffer"             "p"   #'previous-buffer
          :desc "Revert buffer"               "r"   #'revert-buffer
          :desc "Save buffer"                 "s"   #'basic-save-buffer
          :desc "Save all buffers"            "S"   #'evil-write-all
          :desc "Save buffer as root"         "u"   #'doom/sudo-save-buffer
          :desc "Pop up scratch buffer"       "x"   #'doom/open-scratch-buffer
          :desc "Switch to scratch buffer"    "X"   #'doom/switch-to-scratch-buffer
          :desc "Bury buffer"                 "z"   #'bury-buffer
          :desc "Kill buried buffers"         "Z"   #'doom/kill-buried-buffers)

        ;;; <leader> c --- code
        (:prefix-map ("c" . "code")
          :desc "LSP Execute code action"               "a"   #'lsp-execute-code-action
          :desc "Compile"                               "c"   #'compile
          :desc "Recompile"                             "C"   #'recompile
          :desc "Jump to definition"                    "d"   #'+lookup/definition
          :desc "Jump to references"                    "D"   #'+lookup/references
          :desc "Evaluate buffer/region"                "e"   #'+eval/buffer-or-region
          :desc "Evaluate & replace region"             "E"   #'+eval:replace-region
          :desc "Format buffer/region"                  "f"   #'+format/region-or-buffer
          :desc "LSP Format buffer/region"              "F"   #'+default/lsp-format-region-or-buffer
          :desc "LSP Organize imports"                  "i"   #'lsp-organize-imports
          (:when (featurep! :completion ivy)
            :desc "Jump to symbol in current workspace" "j"   #'lsp-ivy-workspace-symbol
            :desc "Jump to symbol in any workspace"     "J"   #'lsp-ivy-global-workspace-symbol)
          (:when (featurep! :completion helm)
            :desc "Jump to symbol in current workspace" "j"   #'helm-lsp-workspace-symbol
            :desc "Jump to symbol in any workspace"     "J"   #'helm-lsp-global-workspace-symbol)
          :desc "Jump to documentation"                 "k"   #'+lookup/documentation
          :desc "LSP Rename"                            "r"   #'lsp-rename
          :desc "Send to repl"                          "s"   #'+eval/send-region-to-repl
          :desc "Delete trailing whitespace"            "w"   #'delete-trailing-whitespace
          :desc "Delete trailing newlines"              "W"   #'doom/delete-trailing-newlines
          :desc "List errors"                           "x"   #'flymake-show-diagnostics-buffer
          (:when (featurep! :checkers syntax)
            :desc "List errors"                         "x"   #'flycheck-list-errors))

        ;;; <leader> f --- file
        (:prefix-map ("f" . "file")
          :desc "Open project editorconfig"   "c"   #'editorconfig-find-current-editorconfig
          :desc "Copy this file"              "C"   #'doom/copy-this-file
          :desc "Find directory"              "d"   #'dired
          :desc "Delete this file"            "D"   #'doom/delete-this-file
          :desc "Find file in emacs.d"        "e"   #'+default/find-in-emacsd
          :desc "Browse emacs.d"              "E"   #'+default/browse-emacsd
          :desc "Find file"                   "f"   #'find-file
          :desc "Find file from here"         "F"   #'+default/find-file-under-here
          :desc "Jump to Dired buffer"        "j"   #'dired-jump
          :desc "Locate file"                 "l"   #'locate
          :desc "Find file in private config" "p"   #'doom/find-file-in-private-config
          :desc "Browse private config"       "P"   #'doom/open-private-config
          :desc "Recent files"                "r"   #'recentf-open-files
          :desc "Rename/move file"            "R"   #'doom/move-this-file
          :desc "Save file"                   "s"   #'save-buffer
          :desc "Save file as..."             "S"   #'write-file
          :desc "Sudo find file"              "u"   #'doom/sudo-find-file
          :desc "Sudo this file"              "U"   #'doom/sudo-this-file
          :desc "Yank filename"               "y"   #'+default/yank-buffer-filename)

        ;;; <leader> g --- git
        (:prefix-map ("g" . "git")
          :desc "Git revert file"             "R"   #'vc-revert
          :desc "Copy link to remote"         "y"   #'+vc/browse-at-remote-kill-file-or-region
          :desc "Copy link to homepage"       "Y"   #'+vc/browse-at-remote-kill-homepage
          (:when (featurep! :ui hydra)
            :desc "SMerge"                    "m"   #'+vc/smerge-hydra/body)
          (:when (featurep! :ui vc-gutter)
            :desc "Git revert hunk"           "r"   #'git-gutter:revert-hunk
            :desc "Git stage hunk"            "s"   #'git-gutter:stage-hunk
            :desc "Git time machine"          "t"   #'git-timemachine-toggle
            :desc "Jump to next hunk"         "]"   #'git-gutter:next-hunk
            :desc "Jump to previous hunk"     "["   #'git-gutter:previous-hunk)
          (:when (featurep! :tools magit)
            :desc "Magit dispatch"            "/"   #'magit-dispatch
            :desc "Forge dispatch"            "'"   #'forge-dispatch
            :desc "Magit switch branch"       "b"   #'magit-branch-checkout
            :desc "Magit status"              "g"   #'magit-status
            :desc "Magit file delete"         "D"   #'magit-file-delete
            :desc "Magit blame"               "B"   #'magit-blame-addition
            :desc "Magit clone"               "C"   #'magit-clone
            :desc "Magit fetch"               "F"   #'magit-fetch
            :desc "Magit buffer log"          "L"   #'magit-log
            :desc "Git stage file"            "S"   #'magit-stage-file
            :desc "Git unstage file"          "U"   #'magit-unstage-file
            (:prefix ("f" . "find")
              :desc "Find file"                 "f"   #'magit-find-file
              :desc "Find gitconfig file"       "g"   #'magit-find-git-config-file
              :desc "Find commit"               "c"   #'magit-show-commit
              :desc "Find issue"                "i"   #'forge-visit-issue
              :desc "Find pull request"         "p"   #'forge-visit-pullreq)
            (:prefix ("o" . "open in browser")
              :desc "Browse file or region"     "o"   #'browse-at-remote
              :desc "Browse homepage"           "h"   #'+vc/browse-at-remote-homepage
              :desc "Browse remote"             "r"   #'forge-browse-remote
              :desc "Browse commit"             "c"   #'forge-browse-commit
              :desc "Browse an issue"           "i"   #'forge-browse-issue
              :desc "Browse a pull request"     "p"   #'forge-browse-pullreq
              :desc "Browse issues"             "I"   #'forge-browse-issues
              :desc "Browse pull requests"      "P"   #'forge-browse-pullreqs)
            (:prefix ("l" . "list")
              (:when (featurep! :tools gist)
                :desc "List gists"              "g"   #'+gist:list)
              :desc "List repositories"         "r"   #'magit-list-repositories
              :desc "List submodules"           "s"   #'magit-list-submodules
              :desc "List issues"               "i"   #'forge-list-issues
              :desc "List pull requests"        "p"   #'forge-list-pullreqs
              :desc "List notifications"        "n"   #'forge-list-notifications)
            (:prefix ("c" . "create")
              :desc "Initialize repo"           "r"   #'magit-init
              :desc "Clone repo"                "R"   #'magit-clone
              :desc "Commit"                    "c"   #'magit-commit-create
              :desc "Fixup"                     "f"   #'magit-commit-fixup
              :desc "Branch"                    "b"   #'magit-branch-and-checkout
              :desc "Issue"                     "i"   #'forge-create-issue
              :desc "Pull request"              "p"   #'forge-create-pullreq)))

        ;;; <leader> i --- insert
        (:prefix-map ("i" . "insert")
          :desc "Current file name"             "f"   #'+default/insert-file-path
          :desc "Current file path"             "F"   (λ!! #'+default/insert-file-path t)
          :desc "Evil ex path"                  "p"   (λ! (evil-ex "R!echo "))
          :desc "From evil register"            "r"   #'evil-ex-registers
          :desc "Snippet"                       "s"   #'yas-insert-snippet
          :desc "Unicode"                       "u"   #'unicode-chars-list-chars
          :desc "From clipboard"                "y"   #'+default/yank-pop)

        ;;; <leader> n --- notes
        (:prefix-map ("n" . "notes")
          :desc "Search notes for symbol"      "*" #'+default/search-notes-for-symbol-at-point
          :desc "Org agenda"                   "a" #'org-agenda
          :desc "Toggle org-clock"             "c" #'+org/toggle-clock
          :desc "Cancel org-clock"             "C" #'org-clock-cancel
          :desc "Open deft"                    "d" #'deft
          :desc "Find file in notes"           "f" #'+default/find-in-notes
          :desc "Browse notes"                 "F" #'+default/browse-notes
          :desc "Org store link"               "l" #'org-store-link
          :desc "Tags search"                  "m" #'org-tags-view
          :desc "Org capture"                  "n" #'org-capture
          :desc "Active org-clock"             "o" #'org-clock-goto
          :desc "Todo list"                    "t" #'org-todo-list
          :desc "Search notes"                 "s" #'+default/org-notes-search
          :desc "Search org agenda headlines"  "S" #'+default/org-notes-headlines
          :desc "View search"                  "v" #'org-search-view
          :desc "Org export to clipboard"        "y" #'+org/export-to-clipboard
          :desc "Org export to clipboard as RTF" "Y" #'+org/export-to-clipboard-as-rich-text

          (:when (featurep! :lang org +journal)
            (:prefix ("j" . "journal")
              :desc "New Entry"      "j" #'org-journal-new-entry
              :desc "Search Forever" "s" #'org-journal-search-forever)))

        ;;; <leader> o --- open
        (:prefix-map ("o" . "open")
          :desc "Org agenda"       "A"  #'org-agenda
          (:prefix ("a" . "org agenda")
            :desc "Agenda"         "a"  #'org-agenda
            :desc "Todo list"      "t"  #'org-todo-list
            :desc "Tags search"    "m"  #'org-tags-view
            :desc "View search"    "v"  #'org-search-view)
          :desc "Default browser"    "b"  #'browse-url-of-file
          :desc "Start debugger"     "d"  #'+debugger/start
          :desc "New frame"          "f"  #'make-frame
          :desc "REPL"               "r"  #'+eval/open-repl-other-window
          :desc "REPL (same window)" "R"  #'+eval/open-repl-same-window
          :desc "Dired"              "-"  #'dired-jump
          (:when (featurep! :ui neotree)
            :desc "Project sidebar"              "p" #'+neotree/open
            :desc "Find file in project sidebar" "P" #'+neotree/find-this-file)
          (:when (featurep! :ui treemacs)
            :desc "Project sidebar" "p" #'+treemacs/toggle
            :desc "Find file in project sidebar" "P" #'+treemacs/find-file)
          (:when (featurep! :term shell)
            :desc "Toggle shell popup"    "t" #'+shell/toggle
            :desc "Open shell here"       "T" #'+shell/here)
          (:when (featurep! :term term)
            :desc "Toggle terminal popup" "t" #'+term/toggle
            :desc "Open terminal here"    "T" #'+term/here)
          (:when (featurep! :term vterm)
            :desc "Toggle vterm popup"    "t" #'+vterm/toggle
            :desc "Open vterm here"       "T" #'+vterm/here)
          (:when (featurep! :term eshell)
            :desc "Toggle eshell popup"   "e" #'+eshell/toggle
            :desc "Open eshell here"      "E" #'+eshell/here)
          (:when (featurep! :tools macos)
            :desc "Reveal in Finder"           "o" #'+macos/reveal-in-finder
            :desc "Reveal project in Finder"   "O" #'+macos/reveal-project-in-finder
            :desc "Send to Transmit"           "u" #'+macos/send-to-transmit
            :desc "Send project to Transmit"   "U" #'+macos/send-project-to-transmit
            :desc "Send to Launchbar"          "l" #'+macos/send-to-launchbar
            :desc "Send project to Launchbar"  "L" #'+macos/send-project-to-launchbar)
          (:when (featurep! :tools docker)
            :desc "Docker" "D" #'docker))

        ;;; <leader> p --- project
        (:prefix-map ("p" . "project")
          :desc "Browse project"               "." #'+default/browse-project
          :desc "Browse other project"         ">" #'doom/browse-in-other-project
          :desc "Run cmd in project root"      "!" #'projectile-run-shell-command-in-root
          :desc "Add new project"              "a" #'projectile-add-known-project
          :desc "Switch to project buffer"     "b" #'projectile-switch-to-buffer
          :desc "Compile in project"           "c" #'projectile-compile-project
          :desc "Repeat last command"          "C" #'projectile-repeat-last-command
          :desc "Remove known project"         "d" #'projectile-remove-known-project
          :desc "Discover projects in folder"  "D" #'+default/discover-projects
          :desc "Edit project .dir-locals"     "e" #'projectile-edit-dir-locals
          :desc "Find file in project"         "f" #'projectile-find-file
          :desc "Find file in other project"   "F" #'doom/find-file-in-other-project
          :desc "Configure project"            "g" #'projectile-configure-project
          :desc "Invalidate project cache"     "i" #'projectile-invalidate-cache
          :desc "Kill project buffers"         "k" #'projectile-kill-buffers
          :desc "Find other file"              "o" #'projectile-find-other-file
          :desc "Switch project"               "p" #'projectile-switch-project
          :desc "Find recent project files"    "r" #'projectile-recentf
          :desc "Run project"                  "R" #'projectile-run-project
          :desc "Save project files"           "s" #'projectile-save-project-buffers
          :desc "Pop up scratch buffer"        "x" #'doom/open-project-scratch-buffer
          :desc "Switch to scratch buffer"     "X" #'doom/switch-to-project-scratch-buffer
          :desc "List project tasks"           "t" #'magit-todos-list
          :desc "Test project"                 "T" #'projectile-test-project)

        ;;; <leader> q --- quit/session
        (:prefix-map ("q" . "quit/session")
          :desc "Restart emacs server"         "d" #'+default/restart-server
          :desc "Delete frame"                 "f" #'delete-frame
          :desc "Clear current frame"          "F" #'doom/kill-all-buffers
          :desc "Kill Emacs (and daemon)"      "K" #'save-buffers-kill-emacs
          :desc "Quit Emacs"                   "q" #'save-buffers-kill-terminal
          :desc "Quit Emacs without saving"    "Q" #'evil-quit-all-with-error-code
          :desc "Quick save current session"   "s" #'doom/quicksave-session
          :desc "Restore last session"         "l" #'doom/quickload-session
          :desc "Save session to file"         "S" #'doom/save-session
          :desc "Restore session from file"    "L" #'doom/load-session
          :desc "Restart & restore Emacs"      "r" #'doom/restart-and-restore
          :desc "Restart Emacs"                "R" #'doom/restart)

        ;;; <leader> r --- remote
        (:when (featurep! :tools upload)
          (:prefix-map ("r" . "remote")
            :desc "Upload local"               "u" #'ssh-deploy-upload-handler
            :desc "Upload local (force)"       "U" #'ssh-deploy-upload-handler-forced
            :desc "Download remote"            "d" #'ssh-deploy-download-handler
            :desc "Diff local & remote"        "D" #'ssh-deploy-diff-handler
            :desc "Browse remote files"        "." #'ssh-deploy-browse-remote-handler
            :desc "Detect remote changes"      ">" #'ssh-deploy-remote-changes-handler))

        ;;; <leader> s --- search
        (:prefix-map ("s" . "search")
          :desc "Search buffer"                "b" #'swiper
          :desc "Search current directory"     "d" #'+default/search-cwd
          :desc "Search other directory"       "D" #'+default/search-other-cwd
          :desc "Locate file"                  "f" #'locate
          :desc "Jump to symbol"               "i" #'imenu
          :desc "Jump to visible link"         "l" #'link-hint-open-link
          :desc "Jump to link"                 "L" #'ffap-menu
          :desc "Jump list"                    "j" #'evil-show-jumps
          :desc "Jump to bookmark"             "m" #'bookmark-jump
          :desc "Look up online"               "o" #'+lookup/online
          :desc "Look up online (w/ prompt)"   "O" #'+lookup/online-select
          :desc "Look up in local docsets"     "k" #'+lookup/in-docsets
          :desc "Look up in all docsets"       "K" #'+lookup/in-all-docsets
          :desc "Search project"               "p" #'+default/search-project
          :desc "Search other project"         "P" #'+default/search-other-project
          :desc "Jump to mark"                 "r" #'evil-show-marks
          :desc "Search buffer"                "s" #'swiper-isearch
          :desc "Search buffer for thing at point" "S" #'swiper-isearch-thing-at-point
          :desc "Dictionary"                   "t" #'+lookup/dictionary-definition
          :desc "Thesaurus"                    "T" #'+lookup/synonyms)

        ;;; <leader> t --- toggle
        (:prefix-map ("t" . "toggle")
          :desc "Big mode"                     "b" #'doom-big-font-mode
          :desc "Flymake"                      "f" #'flymake-mode
          :desc "Menubar"                      "m" #'menu-bar-mode
          :desc "Toolbar"                      "t" #'tool-bar-mode
          (:when (featurep! :checkers syntax)
            :desc "Flycheck"                   "f" #'flycheck-mode)
          :desc "Frame fullscreen"             "F" #'toggle-frame-fullscreen
          :desc "Evil goggles"                 "g" #'evil-goggles-mode
          (:when (featurep! :ui indent-guides)
            :desc "Indent guides"              "i" #'highlight-indent-guides-mode)
          :desc "Indent style"                 "I" #'doom/toggle-indent-style
          :desc "Line numbers"                 "l" #'doom/toggle-line-numbers
          (:when (featurep! :lang org +present)
            :desc "org-tree-slide mode"        "p" #'org-tree-slide-mode)
          :desc "Read-only mode"               "r" #'read-only-mode
          (:when (featurep! :checkers spell)
            :desc "Flyspell"                   "s" #'flyspell-mode)
          :desc "Soft line wrapping"           "w" #'visual-line-mode
          (:when (featurep! :ui word-wrap)
            :desc "Soft line wrapping"         "w" #'+word-wrap-mode)
          :desc "Zen mode"                     "z" #'writeroom-mode))

  (after! which-key
    (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
      (cl-pushnew `((,(format "\\`\\(?:C-w\\|%s w\\) m\\'" prefix-re))
                    nil . "maximize")
                  which-key-replacement-alist)))
#+end_src

* modules/gwp
- [[file:pkg/.doom.d/modules/gwp/org/config.el::;;; lang/org/config.el -*- lexical-binding: t; -*-][org/config.el]]

* theme
[[file:emacs-material-theme/][file:~/Workspace/Programming/emacs/emacs-material-theme/]]
