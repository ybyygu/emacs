:PROPERTIES:
:ID:       a58b86ad-a96e-4b4f-b9de-acbaf9e5910f
:END:
#+TITLE: 个人文本交互系统(based on doom-emacs)
#+SETUPFILE: ~/Notes/common.org

* 参考
- [[https://github.com/daviwil/emacs-from-scratch/tree/master][daviwil/emacs-from-scratch: An example of a fully custom Emacs configuration developed live on YouTube!]]

* Memo [1/3]
** DONE [2022-01-11 Tue] 如何配置 meow localleader?
- State "DONE"       from "TODO"       [2022-01-13 Thu 08:56]
- Note taken on [2022-01-13 Thu 08:56] \\
  升级至新版问题解决.

参考: [[https://github.com/meow-edit/meow/pull/126#issuecomment-992004368][localleader 的设置]]

meow 下如果仅在 normal-state 下绑定按键?

使用 general 绑定, 无法区分 meow normal 及 insert state.

使用 C-x M-t 等方式也不通, 会把后面序列中"g"键吃掉, 使这些绑定无效. [2022-01-13 Thu] 发现仅影响 g, 见 [[https://github.com/meow-edit/meow/issues/164][Issue #164]]
(meow-leader-define-key
 '("p" . "C-x p")                       ; SPC p g  doesn't work
 `("P" . ,project-prefix-map))          ; SPC P g  does work

使用 map 来定义不太好处理 mode specific 行为.

** TODO [2022-01-10 Mon] 以 doom-core 为起点就行配置?
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#install-doom-manually][https://github.com/hlissner/doom-emacs]]
- [[https://github.com/Not-Leader/doom-meow][Not-Leader/doom-meow: A meow module for Doom Emacs]]
- [[https://github.com/meow-edit/meow/discussions][Discussions · meow-edit/meow]]

** TODO [2021-10-14 Thu] 简简单单从零开始, 配一个完全合心意的
* Meow
- [[https://github.com/linuxing3/.dog.emacs.d/blob/master/README.md][.dog.emacs.d/README.md at master · linuxing3/.dog.emacs.d]]
- [[https://github.com/meow-edit/meow/blob/master/CUSTOMIZATIONS.org][meow/CUSTOMIZATIONS.org at master · meow-edit/meow]]

** 如何切换 meow state?
一共有四种模式: Normal, Insert, Motion, Keypad

** 如何为特定的模式定义相关的按键, 比如 dired?
可以按 keypad 模式来处理, 按键序列来对应过去.

缺点:
- 没有 which-key 提示
- 不能使用 C-, M- 等修饰键

* helix

* bindings
:PROPERTIES:
:header-args: :tangle modules/gwp/bindings/config.el
:END:
使用 general/map! 来绑定按键. 注意, 不能有 evil 中 state 相关的限制.

也许定义 keymap, 在其它模块中动态添加更易维护. 比如 help-map?
** goto
:PROPERTIES:
:header-args: :tangle no
:END:
#+name: 38249b42
#+begin_src elisp
(general-define-key :prefix-map 'gwp::goto-map)

(map! :map gwp::goto-map
      "g" #'beginning-of-buffer
      "G" #'end-of-buffer
      )
#+end_src

** core
保存文件同时标记当前位置, 方便随后跳回.
#+name: 2d76b8e4
#+begin_src elisp
;; https://emacsredux.com/blog/2013/04/28/switch-to-previous-buffer/
(require 'init-proxy)

(defun gwp::switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(map! :leader
      :desc "Save buffer" "SPC"             #'gwp::mark-and-save-buffer
      :desc "Universal argument"    "u"     #'universal-argument
      :desc "Pop up scratch buffer" "x"     #'doom/open-scratch-buffer
      :desc "Jump to previous mark" ","     #'gwp::jump-to-previous-mark
      :desc "Switch to previous buffer" "`" #'gwp::switch-to-previous-buffer
      )

(map!
 "C-`"                             #'+popup/toggle
 "C-~"                             #'+popup/raise
 "C-x p"                           #'+popup/other)
#+end_src

** w: window
#+name: 46f457b2
#+begin_src elisp
(map! :leader
      :desc "window/frame" "w" gwp::window-map
      )
#+end_src

** f: file/find
*** recent files
#+name: 493c2a26
#+begin_src emacs-lisp
(use-package recentf
  :custom
  ;; then run M-x recentf-cleanup to make it work.
  (recentf-exclude '("/tmp/"
                     "/ssh:"
                     "/sudo:"
                     "/scp:"
                     "/scpx:"
                     "/ssh:"
                     ;; "\\.pdf$"
                     "\\.png$"
                     "autosave$"
                     ;; "\\.odt$"
                     "\\.note_archive$"
                     "_workspaces"
                     ".*/COMMIT_EDITMSG$" ; magit 临时编辑文件
                     ;; ".*/$"               ; 剔除目录
                     ))
  (recentf-max-saved-items 9999)   ; the default is only 20
  (recentf-keep '(gwp::recentf-keep-p))
  ;; clean up items when has been idle 1 hour
  ;; (recentf-auto-cleanup 3600)
  (recentf-auto-cleanup 'never)         ; doom 在退出时清理
  )

(defun gwp::recentf-keep-p (file)
  "仅保留本地可读文件"
  (not (file-remote-p file))
  ;; (and (not (file-remote-p file))
  ;;      (not (file-directory-p file)))
  )
#+end_src

*** open-file-externally
从spacemacs中改过来的
#+name: e13c7903
#+begin_src emacs-lisp
(defun spacemacs/open-in-external-app (file-path)
  "Open `file-path' in external application."
  (let ((process-connection-type nil))
    (start-process "" nil "xdg-open" file-path)))

(defun spacemacs/open-file-or-directory-in-external-app (arg)
  "Open current file in external application.
If the universal prefix argument is used then open the folder
containing the current file by the default explorer.
If two universal prefix arguments are used, then prompt for command to use."
  (interactive "P")
  (if (equal arg '(4))                  ; C-u
      (spacemacs/open-in-external-app (expand-file-name default-directory))
    (let ((file-path (if (derived-mode-p 'dired-mode)
                         (dired-get-file-for-visit)
                       buffer-file-name)))
      (if file-path
          (if (equal arg '(16))         ; C-u C-u
              (progn
                (let ((program (read-shell-command "Open current file with: ")))
                  (call-process program nil 0 nil file-path)))
            (spacemacs/open-in-external-app file-path))
        (message "No file associated to this buffer.")))))
#+end_src

*** keymap
#+name: d7dce976
#+begin_src elisp
(map! :leader
      ;; 注意 "file/find"特意与+evil-bindings.el中定义的不同, 用于覆盖原按键
      (:prefix-map ("f" . "file/find")
       :desc "Open bookmarks"              "b"   #'counsel-bookmark ; 有用
       :desc "Recent files"                "r"   #'recentf-open-files
       :desc "Jump to Dired buffer"        "j"   #'dired-jump ; 有用
       :desc "Find .note files"            "n"   #'gwp/find-file-in-notes
       :desc "Delete this file"            "D"   #'doom/delete-this-file
       :desc "Find file in emacs.d"        "e"   #'doom/find-file-in-emacsd
       :desc "Browse emacs.d"              "E"   #'doom/browse-in-emacsd
       :desc "Find file"                   "f"   #'find-file
       :desc "Locate file"                 "l"   #'locate
       :desc "Open file/dir externally"    "o"   #'spacemacs/open-file-or-directory-in-external-app
       :desc "Find file in private config" "p"   #'doom/find-file-in-private-config
       :desc "Browse private config"       "P"   #'doom/open-private-config
       :desc "Copy this file"              "C"   #'doom/copy-this-file
       :desc "Rename/move file"            "R"   #'doom/move-this-file
       :desc "Save file"                   "s"   #'save-buffer
       :desc "Save file as..."             "S"   #'write-file
       :desc "Sudo find file"              "u"   #'doom/sudo-find-file
       :desc "Sudo this file"              "U"   #'doom/sudo-this-file
      ))
#+end_src
** s: search
#+name: 321efaf0
#+begin_src elisp
(map! :leader
      (:prefix-map ("s" . "search")
       :desc "Search buffer"                "s" #'swiper ; 一行仅一个匹配?
       :desc "Search buffer at point"       "S" #'swiper-isearch-thing-at-point
       :desc "Search all notes"             "n" #'gwp/search-all-notes ; 全局搜索.note文件
       :desc "Search buffer from clipboard" "y" #'gwp::swiper-from-clipboard
       :desc "Search all open buffers"      "B" #'swiper-all
       :desc "Jump to search occurrence"    ";" #'gwp/evil-ex-search-avy-jump
       :desc "搜索当前文件夹文件名"         "f" #'find-file-in-current-directory-by-selected ; 搜索文件名
       :desc "Jump to symbol"               "i" #'imenu
       :desc "Locate file"                  "l" #'counsel-locate
       :desc "Jump to bookmark"             "m" #'bookmark-jump
       (:prefix-map ("h" . "highlight")
        :desc "highlight symbol at point"         "." #'highlight-symbol-at-point
        :desc "highlight REGEXP"                  "h" #'highlight-regexp
        :desc "unhighlight regexp"                "u" #'unhighlight-regexp)))
#+end_src

** r: resume/rings
emacs可以记录所有mark操作的位置(mark-ring), 也可以用m命令(evil-set-marke)手动设置位置记录, 然后随时跳转回来.

#+name: 1c637dc8
#+begin_src elisp
(map! :leader
      (:prefix-map ("r" . "resume/rings")
       :desc "Open bookmarks"        "b" #'counsel-bookmark
       :desc "Resume last search"    "l" #'ivy-resume
       :desc "Last change"           "c" #'gwp::hydra-last-change/body
       ))
#+end_src

** t: toggle
#+name: 95d4be8a
#+begin_src elisp
(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "Read-only mode"             "r" #'read-only-mode
       :desc "切换终端(vterm)"            "t" #'vterm-toggle
       :desc "Big mode"                   "b" #'doom-big-font-mode
       :desc "Debug on error"             "d" #'toggle-debug-on-error
       :desc "Frame fullscreen"           "F" #'toggle-frame-fullscreen
       :desc "Indent style"               "I" #'doom/toggle-indent-style
       :desc "Line numbers"               "l" #'gwp::toggle-line-numbers
       :desc "Spell checker"              "s" #'spell-fu-mode
       :desc "Socks proxy"                "p" #'proxy-socks-toggle
       :desc "Soft line wrapping"         "w" #'visual-line-mode
       ))
#+end_src

** h: help
帮助系统
- apropos-value

#+name: e7792733
#+begin_src elisp
(map! :leader
      :desc "help"                  "h"    help-map
      )
#+end_src

** b: buffer
#+name: 19c9e88c
#+begin_src elisp
;; https://stackoverflow.com/a/10395406/173271
(require 'cl-lib)
(require 'recentf)

(defun gwp::find-last-killed-file ()
  (interactive)
  (let ((active-files (cl-loop for buf in (buffer-list)
                            when (buffer-file-name buf) collect it)))
    (cl-loop for file in recentf-list
          unless (member file active-files) return (find-file file))))

(map! :leader
      (:prefix-map ("b" . "buffer/bookmark")
       :desc "Switch workspace buffer"     "b"   #'persp-switch-to-buffer
       :desc "Switch buffer"               "B"   #'switch-to-buffer
       :desc "Kill buffer"                 "d"   #'kill-current-buffer
       :desc "delete buffer file"          "D"   #'doom/delete-this-file
       :desc "Kill buffer"                 "k"   #'kill-current-buffer
       :desc "Kill all buffers"            "K"   #'doom/kill-all-buffers
       :desc "Revert buffer"               "r"   #'revert-buffer
       :desc "Previous buffer"             "p"   #'previous-buffer
       :desc "Next buffer"                 "n"   #'next-buffer
       :desc "Save buffer"                 "s"   #'basic-save-buffer
       :desc "Save file as..."             "S"   #'write-file
       :desc "Clone indirect buffer"       "c"   #'clone-indirect-buffer-other-window
       :desc "Toggle narrowing"            "-"   #'doom/toggle-narrow-buffer
       :desc "Switch to last buffer"       "l"   #'evil-switch-to-windows-last-buffer
       :desc "New empty buffer"            "N"   #'evil-buffer-new
       :desc "ibuffer"                     "i"   #'ibuffer
       :desc "Open in new frame"           "o"   #'gwp::display-current-buffer-other-frame
       :desc "Kill other buffers"          "O"   #'doom/kill-other-buffers
       :desc "reopen killed file"          "u"   #'gwp::find-last-killed-file
       :desc "copy file path"              "y"   #'+default/yank-buffer-path
       :desc "Bury buffer"                 "z"   #'bury-buffer
       :desc "Kill buried buffers"         "Z"   #'doom/kill-buried-buffers
       :desc "Set bookmark"                "m"   #'bookmark-set
       ))
#+end_src
** q: quit
#+name: 9a5a2bc3
#+begin_src elisp
;;; <leader> q --- quit/session
(map! :leader
      (:prefix-map ("q" . "quit/session")
       :desc "Quit Emacs"                   "q" #'save-buffers-kill-terminal
       :desc "Reloads your private config"  "r" #'doom/reload
       :desc "Delete frame"                 "f" #'delete-frame
       :desc "Clear current frame"          "F" #'doom/kill-all-buffers
       :desc "Kill Emacs (and daemon)"      "K" #'save-buffers-kill-emacs
       :desc "Quit Emacs without saving"    "Q" #'evil-quit-all-with-error-code
       :desc "Quick save current session"   "s" #'doom/quicksave-session
       :desc "Restore last session"         "l" #'doom/quickload-session
       :desc "Save session to file"         "S" #'doom/save-session
       :desc "Restore session from file"    "L" #'doom/load-session
       :desc "Restart Emacs"                "R" #'doom/restart
       ))
#+end_src
** l: load/workspace
禁止workspace在退出emacs时自动保存, 避免不同机器同步冲突
*** dwim
#+name: 6b10b827
#+begin_src elisp
(after! persp-mode
  (setq persp-auto-save-opt 0))

;;;###autoload
(defun gwp::workspace/load-or-switch (name)
  "Load or switch to a workspace."
  (interactive
   (list
    (completing-read
     "Workspace to load: "
     (persp-list-persp-names-in-file
      (expand-file-name +workspaces-data-file persp-save-dir)))))
  (if (+workspace-exists-p name)
      (+workspace/switch-to name)
    (if (not (+workspace-load name))
        (+workspace-error (format "Couldn't load workspace %s" name))
      (+workspace/switch-to name)))
  (+workspace/display))

;;;###autoload
(defun gwp::workspace/new-named (name)
  "Create a new workspace with a given NAME."
  (interactive "sWorkspace Name: ")
  (+workspace/new name)
  (+workspace/switch-to name))
#+end_src

*** keymap
#+name: 2598d642
#+begin_src elisp
(map! :leader
      (:prefix-map ("l" . "load/workspace") ;; 用tab不方便
       :desc "Load or witch workspace"   "l"   #'gwp::workspace/load-or-switch
       :desc "Switch workspace"          "TAB" #'+workspace/switch-to ; 调整下
       :desc "Switch to last workspace"  "b"   #'+workspace/other ; 换个好按的
       :desc "Next workspace"            "n"   #'+workspace/switch-right
       :desc "Previous workspace"        "p"   #'+workspace/switch-left
       :desc "Display tab bar"           "."   #'+workspace/display
       :desc "Switch to last workspace"  "`"   #'+workspace/other
       :desc "New named workspace"       "N"   #'gwp::workspace/new-named
       :desc "Save workspace to file"    "s"   #'+workspace/save
       :desc "Delete session"            "x"   #'+workspace/kill-session
       :desc "Delete this workspace"     "d"   #'+workspace/delete
       :desc "Rename workspace"          "r"   #'+workspace/rename
       :desc "Restore last session"      "R"   #'+workspace/restore-last-session
       :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
       :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
       :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
       :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
       :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4
       :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5
       :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6
       :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7
       :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8
       :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final
       ))
#+end_src

** o: org/open
*** open in terminal
emacs版的 "Open in Terminal": 在gnome-terminal中打开当前目录.
#+name: 12a811d1
#+begin_src emacs-lisp
(defun gwp/open-in-gnome-terminal (the-directory)
  "Open `the-directory' in external gnome-terminal."
  (let ((process-connection-type nil))
    ;; (start-process "" nil "terminal-dwim.sh" (concat "--working-directory=" the-directory) "-e" "tmux")
    (start-process "" nil "alacritty" (concat "--working-directory=" the-directory) "-e" "tmux")
    ))

(defun gwp/open-terminal-here ()
  "Open the current dir in a new terminal window"
  (interactive)
  (let ((default-directory (or (and (eq major-mode 'dired-mode)
                                    (dired-current-directory))
                               default-directory)))
    (gwp/open-in-gnome-terminal (expand-file-name default-directory))))
#+end_src

*** keymap
#+name: fc304196
#+begin_src elisp
(map! :leader
      (:prefix-map ("o" . "org/open")
       :desc "Org attachment"        "a" #'org-attach
       :desc "org-agenda (GTD)"      "n" (cmd! (org-agenda nil "gt"))
       :desc "org-capture"           "c" #'org-capture
       :desc "Tags search"           "m" #'org-tags-view
       :desc "View search"           "v" #'org-search-view
       :desc "New frame"             "f" #'make-frame
       :desc "Select frame"          "F" #'select-frame-by-name
       :desc "REPL"                  "r" #'+eval/open-repl-other-window
       :desc "REPL (same window)"    "R" #'+eval/open-repl-same-window
       :desc "Toggle vterm popup"    "t" #'+vterm/toggle
       :desc "Open termerinal here"  "T" #'gwp/open-terminal-here ; 打开外部terminal
       ))
#+end_src

* doom
- [[file:init.el]]
- [[file:config.el]]
- [[file:packages.el]]

* core
:PROPERTIES:
:header-args: :tangle modules/gwp/core/config.el
:END:
** docs
希望重新绑定 meow 按键, 能与 [[id:0a71bf20-d804-499f-ab73-27988ee9f399][helix]] 基本一致, 这样习惯后可以用 helix 代替
vi/emacs 完成一些基本的编辑任务.

- helix [[https://docs.helix-editor.com/keymap.html][Keymap]]
- [[https://github.com/meow-edit/meow/blob/master/COMMANDS.org][meow/COMMANDS.org at master · meow-edit/meow]]

移动类
: hjkl
: web

基本编辑
: d
: c
: i I
: a A

选择
: x

复制粘贴
: y
: p P

g 应保留用于跳转 goto
: gg
: ge
: gh => 行首
: gl => 行尾

** undo
感觉emacs的undo比evil的强

默认绑定:
C-x u, C-_ C-/

C-u C-/ 如果选中区域, 则仅撤销当前内容.

#+name: 9f41280c
#+begin_src elisp
(defun gwp::undo-dwim ()
  (interactive)
  (if (region-active-p)
      (let ((current-prefix-arg '(4)))     ; C-u
        (call-interactively #'undo))
    (call-interactively #'undo)))

;; 默认evil的undo会将多个小操作合并为一个大的, undo时很不适应.
;; (setq evil-want-fine-undo t)
#+end_src

** meow
代码参考这里:
- [[https://github.com/Not-Leader/doom-meow][Not-Leader/doom-meow: A meow module for Doom Emacs]]

[2022-01-13 Thu] 问题: 不知如何在 meow 中使用 const

#+name: e08c1132
#+begin_src elisp
;;; editor/core/config.el -*- lexical-binding: t; -*-

;; Leader Key
(defun meow/setup-leader ()
  (meow-normal-define-key
   ;; local leader keys
   '("w" . "C-x M-t w")
   '("g" . "C-x M-t g")
   '("," . "C-x M-t ,")
   )

  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   ;; local leader
   '("g" . "C-x M-t g")
   )

  (map! :leader
        "?" #'meow-cheatsheet
        "/" #'meow-keypad-describe-key
        "1" #'meow-digit-argument
        "2" #'meow-digit-argument
        "3" #'meow-digit-argument
        "4" #'meow-digit-argument
        "5" #'meow-digit-argument
        "6" #'meow-digit-argument
        "7" #'meow-digit-argument
        "8" #'meow-digit-argument
        "9" #'meow-digit-argument
        "0" #'meow-digit-argument))

;; Keypad
(defun meow/setup-keypad ()
  (map! :map meow-leader-keymap
        "?" #'meow-cheatsheet
        "/" #'meow-keypad-describe-key
        "1" #'meow-digit-argument
        "2" #'meow-digit-argument
        "3" #'meow-digit-argument
        "4" #'meow-digit-argument
        "5" #'meow-digit-argument
        "6" #'meow-digit-argument
        "7" #'meow-digit-argument
        "8" #'meow-digit-argument
        "9" #'meow-digit-argument
        "0" #'meow-digit-argument
        "h" #'help-command))

;; 比如 dired, magit 生成的 buffer, 也许单独处理更好?
(defun meow/setup-motion ()
  (meow-motion-overwrite-define-key
   '("j" "meow-next")
   '("k" "meow-prev")
   )
  (when (featurep! :editor meow +leader)
    (meow-motion-overwrite-define-key
     '("\\ j" "H-j")
     '("\\ k" "H-k")))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" "H-j")
   '("k" "H-k"))
  )

;; Qwerty, normal state
(defun meow/setup-normal ()
  ;; normal commands
  (meow-normal-define-key
   '("<escape>" . keyboard-quit)
   '("1" . meow-1)
   '("2" . meow-2)
   '("3" . meow-3)
   '("4" . meow-4)
   '("5" . meow-5)
   '("6" . meow-6)
   '("7" . meow-7)
   '("8" . meow-8)
   '("9" . meow-9)
   '("0" . meow-0)
   '("-" . negative-argument)
   '("h" . meow-left)
   '("j" . meow-next)
   '("k" . meow-prev)
   '("l" . meow-right)
   '("i" . meow-insert)
   '("x" . meow-line)
   '("d" . meow-delete)
   '("c" . meow-change)
   '("a" . meow-append)
   '("y" . meow-save)
   '("p" . meow-yank)
   '("u" . gwp::undo-dwim)
   ))

(use-package! meow
  :hook (doom-init-modules . meow-global-mode)
  :demand t
  :custom
  (setq meow-expand-hint-remove-delay 3.0)
  :config
  (meow/setup-normal)
  (cond
   ((featurep! :gwp core +leader)
    (map! :map meow-normal-state-keymap
          doom-leader-key doom-leader-map)
    (map! :map meow-motion-state-keymap
          doom-leader-key doom-leader-map)
    (map! :map meow-beacon-state-keymap
          doom-leader-key nil)
    (meow/setup-leader))
   (t (meow/setup-keypad)))
  (map! :map meow-keymap [remap describe-key] #'helpful-key))
#+end_src

** init.el
:PROPERTIES:
:header-args: :tangle modules/gwp/core/init.el
:END:
定义 "," 及 "g", "w" 开头的按键序列.

#+name: 6e0da3f7
#+begin_src elisp
;;; editor/core/init.el -*- lexical-binding: t; -*-
(use-package general
  :config
  ;;  prevent Key sequence starts with a non-prefix key errors
  (general-auto-unbind-keys)
  ;; (general-override-mode 1)
  (general-create-definer gwp::goto-leader-def
    :keymaps 'general-override-mode-map
    :prefix gwp::goto-leader-key)
  (general-create-definer gwp::local-leader-def
    :keymaps 'general-override-mode-map
    :prefix gwp::local-leader-key)
  (general-create-definer gwp::dwim-leader-def
    :keymaps 'meow-normal-state-keymap
    :prefix gwp::dwim-leader-key)
  )

;; Rewriting the doom-localleader-key! macro to add support for meow mode
(when (featurep! :gwp core +leader)
  (defmacro define-localleader-key! (&rest args)
    `(progn
       (general-define-key
        :keymaps '(meow-normal-state-keymap meow-motion-state-keymap)
        :major-modes t
        :prefix doom-localleader-key
        ,@args)
       (general-define-key
        :keymaps 'meow-insert-state-keymap
        :major-modes t
        :prefix doom-localleader-alt-key
        ,@args)))
  )
#+end_src

** packages.el
:PROPERTIES:
:header-args: :tangle modules/gwp/core/packages.el
:END:
#+name: db68897a
#+begin_src elisp
(package! meow :pin "b4dd3135cc")
#+end_src

* ui
:PROPERTIES:
:header-args: :tangle modules/gwp/ui/config.el
:END:
** chinese/input method
默认使用 Ctrl-\ 切换输入法
*** rime
- [[https://github.com/DogLooksGood/emacs-rime][DogLooksGood/emacs-rime: RIME ㄓ in Emacs]]

可以用TAB来临时输入英文. 可以用Ctrl-.来临时切换中英文标点. 在输入过程中, 按z键临时拼音模式.
rime-inline-predicates

rime 会根据输入状态, 智能进入英文输入模式. 此时, 可用 C-i 键来强制临时录入(一个)
中文单字, 随后继续英文输入模式. 为了更流畅的中英文状态智能切换, 得记得回归空格分
隔中英文字符这一优秀传统.

**** setup
#+name: 155b72b3
#+begin_src elisp
(use-package! rime
  :custom
  (default-input-method "rime")
  :config
  (setq rime-user-data-dir "~/.local/share/fcitx5/rime")
  ;; 这个设置与rime的一致, 不然emacs中的inline ascii无法生效
  ;;; support shift-l, shift-r, control-l, control-r
  (setq rime-inline-ascii-trigger 'shift-l)
  ;; 临时英文中阻止标点直接上屏
  (setq rime-inline-ascii-holder ?x)      ; Any single character that not trigger auto commit
  ;; 添加C-.快捷键, 方便切换中英文标点(需要在rime输入时有效)
  (setq rime-translate-keybindings
        '("C-f" "C-b" "C-n" "C-p" "C-g" "C-."))
  ;; 在输入且有码上屏的状态下, 可用TAB临时切换英文.
  (map! :map rime-active-mode-map :after ivy [tab] 'rime-inline-ascii)
  ;; NOTE: 以下有时会让emacs crash
  (setq rime-posframe-properties
        (list :background-color "#333333"
              :foreground-color "#dcdccc"
              :internal-border-width 10))
  (setq default-input-method "rime"
        rime-show-candidate 'posframe)

  ;; 自动进入英文录入状态, 相当于直接输入英文
  (setq rime-disable-predicates
        '(
          ;; evil-normal-state-p
          meow-normal-mode-p
          meow-motion-mode-p
          meow-beacon-mode-p
          ;; 首字母为是英文字母时进入英文模式
          rime-predicate-after-alphabet-char-p
          ;; 将要输入的为大写字母时
          rime-predicate-current-uppercase-letter-p
          ;; 在 prog-mode 和 conf-mode 中除了注释和引号内字符串之外的区域
          rime-predicate-prog-in-code-p
          ;; 在 (La)TeX 数学环境中或者输入 (La)TeX 命令时
          rime-predicate-tex-math-or-command-p
          ;; 在中文字符且有空格之后
          ;; rime-predicate-space-after-cc-p
          ))
  ;; 进入连续英文状态, 空格或回车键上屏
  (setq rime-inline-predicates
        '(
          rime-predicate-space-after-cc-p
          )))
#+end_src

**** convert string at point
有时没开中文输入, 会误输几个英文, 此时切换中文时自动将误录的英文转成中文
#+name: b254d4bc
#+begin_src elisp
;; https://github.com/jadestrong/dotfiles/blob/master/home/.doom.d/modules/input/chinese2/config.el
(defun gwp::rime-convert-string-at-point (&optional return-cregexp)
  "将光标前的字符串转换为中文."
  (interactive "P")
  (let ((string
         (if mark-active
             (buffer-substring-no-properties
              (region-beginning) (region-end))
           (buffer-substring-no-properties
            (point) (max (line-beginning-position) (- (point) 80)))))
        code
        length)
    (cond ((string-match "\\([a-z]+\\) *$" string)
           (setq code (match-string 0 string))
           (setq length (length code))
           (setq code (replace-regexp-in-string " +" "" code))
           (if mark-active
               (delete-region (region-beginning) (region-end))
             (when (> length 0)
               (delete-char (- 0 length))))
           (when (> length 0)
             (setq unread-command-events
                   (append (listify-key-sequence code)
                           unread-command-events))))
          (t (message "`rime-convert-string-at-point' did nothing.")))))
#+end_src

**** toggle
#+name: 37aafacc
#+begin_src elisp
(defun gwp::rime-toggle-input ()
  "切换 rime 中文输入状态."
  (interactive)

  (let ((input-method "rime"))
    (toggle-input-method)
    ;; evil 下, 直接进入 insert 模式
    (when (rime-predicate-evil-mode-p)
      (if (= (+ 1 (point)) (line-end-position))
          (evil-append 1)
        (evil-insert 1)))

    ;; 进入 rime 输入状态后, 把误按的字符转换中文
    (when (meow-insert-mode-p)
      (when (string= current-input-method input-method)
      (gwp::rime-convert-string-at-point))
      )

    ;; 提示当前输入状态, 比看图标更醒目
    (if current-input-method
        (message "IME on")
      (message "IME off"))))
#+end_src

**** bindings
#+name: c457613c
#+begin_src elisp
;; 这里需要与fcitx配合: 去掉GTK_IM_MODULE, XMODIFIERS等FCITX输入法设置变量.
(map! :nieg "C-SPC" 'gwp::rime-toggle-input)
;; (map! :nieg "C-SPC" 'gwp::rime-force-enable)
;; NOTE: 因为与ivy的默认绑定有冲突, minibuffer下不能切换
;; ivy-call-and-recenter
;; 2021-10-13: 直接map不太有效, 时灵不灵的
;; (map! :map ivy-minibuffer-map "C-SPC" #'toggle-input-method)
;; NOTE: 可用M-RET来预览选中条目, 而不退出ivy窗口
(map! :after ivy :map ivy-minibuffer-map [remap ivy-call-and-recenter] 'toggle-input-method)

;; 将光标英文字符转化为中文录入
(map! :map rime-mode-map "M-i" #'gwp::rime-convert-string-at-point)
;; 在自动英文模式下强制进入中文状态
;; 2022-01-13: 在 org-mode + meow 中的 TAB 键有冲突
;;(map! :map rime-mode-map "C-i" #'rime-force-enable)
#+end_src

** chinese/fonts setup
最早用cnfonts, 不过这个也比较麻烦. 现在用Sarasa之类的中英文等宽字体, 可较完美解
决中英文表格对齐问题

查看字体:
: describe-char
#+name: f6668074
#+begin_src elisp :comments nil
;; 2021-08-25: 留着, 但暂时用不上
;; https://emacs-china.org/t/doom-emacs/10390
(defun gwp/set-fonts()
  (interactive)
  (if (display-graphic-p)
      (progn
        ;; english font
        ;; (set-face-attribute 'default nil :font (format "%s:pixelsize=%d" "Monaco" 16)) ;; 11 13 17 19 23
        ;; (setq doom-font (font-spec :family "Monaco" :size 16))
        ;; (setq doom-font (font-spec :family "Monaco"))
        ;; chinese font
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
          (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "Adobe Heiti Std")))) ;; 14 16 20 22 28
    ))

;; 2021-08-25: 不需要单独设置了
;; org-mode表格中文混排对齐
;; (after! org
;;   ;; (call-interactively 'gwp/set-fonts)
;;   (custom-set-faces!
;;     `(org-table :family "Ubuntu Mono")
;;     )
;;   )

;; for doom-emacs only
;; https://emacs-china.org/t/emacs/15676/20
;; https://github.com/ztlevi/doom-config/blob/main/%2Bui.el
(when (display-graphic-p)
  (setq user-font
        (cond
         ((find-font (font-spec :name  "Sarasa Fixed SC")) "Sarasa Fixed SC")
         ((find-font (font-spec :name  "Iosevka")) "Iosevka")
         ((find-font (font-spec :name  "Inconsolata Nerd Font")) "Inconsolata Nerd Font")
         ((find-font (font-spec :name  "Ubuntu Mono")) "Ubuntu Mono")))
  ;; (setq resolution-factor (eval (/ (x-display-pixel-height) 1080)))
  (setq resolution-factor 2)
  (setq ideal-font-size (eval (* 15 resolution-factor)))
  (setq big-font-size (eval (* 18 resolution-factor)))
  (setq doom-font (font-spec :family user-font :size ideal-font-size)
        ;; doom-serif-font (font-spec :family user-font)
        doom-variable-pitch-font (font-spec :family user-font)
        ;; doom-unicode-font (font-spec :family user-font)
        doom-big-font (font-spec :family user-font :size big-font-size))
  )
#+end_src

** line numbers
如果能显示相对行号, avy-goto-line可能就没必要了?
#+name: 885c9fa9
#+begin_src elisp
;; 方便绑定到 SPC-t-l
;;
;; 仅切换relative和none两种状态, doom的要切三种
(defun gwp::toggle-line-numbers ()
  (interactive)
  (if display-line-numbers
      (setq display-line-numbers 'nil)
    (setq display-line-numbers 'relative)))

(defun gwp::display-line-numbers ()
  (setq display-line-numbers 'relative))

;; NOTE: org-mode在折叠状态下, 相对行号显示的是实际数目, 而非折叠后的, 这对编辑操作没多大帮助了.
;; ;; (add-hook 'org-mode-hook #'gwp::display-line-numbers)
(add-hook 'org-src-mode-hook #'gwp::display-line-numbers)
;; (add-hook 'prog-mode-hook #'gwp::display-line-numbers)
(add-hook 'rust-mode-hook #'gwp::display-line-numbers)

;; 全局设置
;; (setq display-line-numbers-type 'relative)
#+end_src
** window/frame
*** core
#+name: 44d5ec48
#+begin_src elisp
(general-define-key :prefix-map 'gwp::window-map)

(map! :map gwp::window-map
      :desc "split window below"
      "s" #'split-window-below
      :desc "split window right"
      "v" #'split-window-right
      :desc "delete this window"
      "d" #'delete-window
      "q" #'delete-window
      "h" #'windmove-left
      "l" #'windmove-right
      "k" #'windmove-up
      "j" #'windmove-down
      "u" #'winner-undo
      )
#+end_src

*** ace window
[[https://github.com/abo-abo/ace-window][abo-abo/ace-window: Quickly switch windows in Emacs]]

用avy在多个窗口下跳转也很方便. 默认使用数字, 现改为字母, 更好按一些
#+name: 34bcfc6f
#+begin_src elisp
(use-package ace-window
  :custom
  ;; Set window selection keys to the home row ones.
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

(map! :map gwp::window-map
      "w" #'ace-window
      "r" #'ace-swap-window
      )
#+end_src

*** save layout
可保存窗口的布局及对应的 buffer, 可正常处理 narrowed, indirect buffers 等特殊情
况.

使用 SPC-W-s 来保存窗口布局, 使用 SPC-r-b 加载.
#+name: a207c706
#+begin_src elisp
(use-package burly
  :config
  (map! :map gwp::window-map "S" #'burly-bookmark-windows))
#+end_src

*** new frame
tear-off-window
#+name: 19e08aef
#+begin_src elisp
(defun gwp::display-current-buffer-other-frame ()
  "在其它 frame 中显式当前 buffer"
  (interactive)
  (switch-to-buffer-other-frame (current-buffer)))
#+end_src

*** switch buffer
这几个命令挺有用, 不过在 ivy 框架下使用应更便利. 比如 ivy-switch-buffer 时, 可按
C-o 选取相应的 action, 来操作选定的 buffer.

: switch-to-buffer-other-window
: switch-to-buffer-other-frame
: switch-to-buffer-other-tab
: switch-to-buffer

从以下变量可查看 ivy 默认定义的 actions
: ivy--actions-list

#+name: bf66c13f
#+begin_src elisp
(require 'ivy)
(ivy-set-actions
 ;; 以下会覆盖默认定义的, 所以需要补回
 'ivy-switch-buffer
 '(
   ("f" ivy--find-file-action "find file")
   ("j" switch-to-buffer-other-window "other window")
   ("k" ivy--kill-buffer-action "kill")
   ("r" ivy--rename-buffer-action "rename")
   ("x" counsel-open-buffer-file-externally "open externally")
   ("f" switch-to-buffer-other-frame "other frame") ; 默认没有
   ("t" switch-to-buffer-other-tab "other tab")     ; 默认没有
   ))
#+end_src

*** 修改 frame 标题 方便 gnome-shell 桌面切换
#+begin_src elisp
;; workspace@buffer-name: ~/foo/bar
(setq frame-title-format
      '((:eval (+workspace-current-name)) ;
        " | %b : "
        (:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))))
        ))
#+end_src

*** 放大窗口
自动放大当前窗口. 注意, 这类工具通过和doom的popup window有冲突. 需要的时候命令手
动开启.
- https://github.com/hlissner/doom-emacs/issues/2225

对应命令: SPC-w z
#+name: bfacbb8e
#+begin_src elisp
(use-package! golden-ratio
  :config
  (map! :map gwp::window-map
        "z" #'golden-ratio))
#+end_src

doom内置了几个命令:
- 水平放大: SPC-w-m-s
- 垂直放大: SPC-w-m-v

#+name: 9a32eb12
#+begin_src elisp
;; 新建frame时最大化窗口
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; 切换窗口最大化状态
;; ;; from https://gist.github.com/3402786
;; (defun gwp::toggle-maximize-window ()
;;   (interactive)
;;   (save-excursion
;;     (if (and (= 1 (length (window-list)))
;;              (assoc ?_ register-alist))
;;         (jump-to-register ?_)
;;       (progn
;;         (window-configuration-to-register ?_)
;;         (delete-other-windows)))))

;;;###autoload
(defun gwp::toggle-maximize-window ()
  "仅显示当前窗口?"
  (interactive)
  ;; (if (= 1 (length (window-list)))
  ;;     (winner-undo)
  ;;   (delete-other-windows))
  (if (and winner-mode
           (equal (selected-window) (next-window)))
      (winner-undo)
    (delete-other-windows)))

(defun gwp::maximize-window-vertically ()
  "纵向仅显示当前窗口"
  (interactive)
  (require 'windmove)
  (let* ((w1 (window-in-direction 'below))
         (w2 (window-in-direction 'above)))
    (cond ((or w1 w2)
           (save-excursion
             (while (ignore-errors (windmove-up)) (delete-window))
             (while (ignore-errors (windmove-down)) (delete-window))))
          ((and (not w1) (not w2))
           ;; 手动 undo 更合适些
           ;; (winner-undo)
           ))))

;; https://github.com/purcell/emacs.d/blob/master/lisp/init-windows.el
(defun sanityinc/split-window()
  "Split the window to see the most recent buffer in the other window.
Call a second time to restore the original window configuration."
  (interactive)
  (if (eq last-command 'sanityinc/split-window)
      (progn
        (jump-to-register :sanityinc/split-window)
        (setq this-command 'sanityinc/unsplit-window))
    (window-configuration-to-register :sanityinc/split-window)
    (switch-to-buffer-other-window nil)
    ))

(map! :map gwp::window-map
      "1"       #'gwp::toggle-maximize-window
      "o"       #'gwp::toggle-maximize-window     ; show "only"
      "t"       #'gwp::maximize-window-vertically ; show top
      "`"       #'sanityinc/split-window
      )
#+end_src


*** 窗口管理
#+name: 19f082d3
#+begin_src elisp
(use-package! avy
  :config
  (setq avy-all-windows t))

;; 替代 SPC-w-w
;; (global-set-key [remap evil-window-next] #'ace-window)
;; (map! [remap evil-window-next] #'ace-window)

(map! :map gwp::window-map
      "r" #'ace-swap-window   ; rotate
      "c" #'ace-delete-window ; close
      "f" #'tear-off-window   ; 类似于firefox中的标签变窗口 (float, move to new frame)
      "F" #'follow-mode       ; 同步滚动窗口, 可用于双窗口内容对比等
      )
#+end_src

切换至前一个最近访问的buffer所在的window, evil-window-mru
: SPC-w-p

撤消或恢复之前的窗口布局
: SPC-w-u, SPC-w C-r

*** 弹出窗口
打开doom popup窗口, 默认仅在normal state下可用.
#+begin_src emacs-lisp
(map! :i "C-`" #'+popup/toggle)
#+end_src

*** 窗口大小
:PROPERTIES:
:header-args: :tangle no
:END:
使用滚轮来修改窗口大小. Ctrl-Alt-scroll-up, Ctrl-Alt-scroll-down
#+name: 032e71c0
#+begin_src elisp
(map! :nvi
      [C-M-mouse-4] #'evil-window-increase-width
      [C-M-mouse-5] #'evil-window-decrease-width
      )
#+end_src

- [[https://stackoverflow.com/questions/51879921/emacs-find-file-other-window-command-splits-buffer-vertically][Emacs find-file-other-window command splits buffer vertically - Stack Overflow]]

设置分屏阈值, 避免 find-file-other-window 垂直向分割为多个windows
#+begin_src elisp
(setq split-width-threshold 200)        ; default is 160
#+end_src

hydra特别适合需要重复按键来完成的操作, 比如调整窗口大小.
#+name: f07dc327
#+begin_src elisp
(defhydra gwp/adjust-window-size ()
  "resize-window"
  ("h" evil-window-decrease-width "decrease width")
  ("j" evil-window-decrease-height "decrease height")
  ("k" evil-window-increase-height "increase height")
  ("l" evil-window-increase-width "increase width")
  ("q" nil "quit")
  )

(map! :map evil-window-map
      "a"       #'gwp/adjust-window-size/body ; adjust
      )
#+end_src

*** clone buffer
clone 出的 buffer 可独立编辑, 视图变化互不影响. 有用.
: clone-indirect-buffer-other-window
: clone-indirect-buffer
** wrap long line
更习惯手动折行
#+name: a6f83332
#+begin_src elisp
;; 默认不要显示折行
(global-visual-line-mode -1)

(defun gwp::turn-off-wrap-long-line()
  (global-visual-line-mode -1))
(add-hook 'org-mode-hook 'gwp::turn-off-wrap-long-line)
#+end_src

** blink cursor
让光标动起来, 更醒目
#+name: 4e3b4060
#+begin_src elisp
(blink-cursor-mode 1)
#+end_src

** switch to message buffer
#+name: 79a17a52
#+begin_src elisp
(defun gwp::switch-to-messages-buffer (&optional arg)
  (interactive "P")
  (with-current-buffer (messages-buffer)
    (goto-char (point-max))
    (if arg
        (switch-to-buffer-other-frame (current-buffer))
      (switch-to-buffer (current-buffer)))))

(map! :leader :desc "switch *Message* buffer" "M" #'gwp::switch-to-messages-buffer)
#+end_src

** highlight
- [[https://emacs-china.org/t/package-symbol-overlay-symbol/7706][论坛讨论]]

非常好用. 要点:
- 光标置于symbol左右, symbol-overlay-put 可切换高亮状态. 切n/p可跳转至前后高亮的位置.
- 可同时高亮多组symbols. 每组独立控制.
- 当光标在symbol外时, 可用 symbol-overlay-switch-forward 来跳回到最近那组高亮的
  symbols. 要跳回起跳位置可按e键.
- symbol-overlay没法定义搜索的字符, 这时可用highlight-regexp命令来替代.

#+name: fae9a6ea
#+begin_src elisp
;; symbol-overlay
;;;  a highlight-symbol replacement.
(use-package symbol-overlay
  :config
  ;; 用 transient 不如下面的好. 下面的可以用"."命令来重做上次的操作.
  (general-define-key :prefix-map 'gwp::symbol-overlay-map
                      "h" 'symbol-overlay-put
                      "r" 'symbol-overlay-rename
                      "t" 'symbol-overlay-toggle-in-scope
                      "n" 'symbol-overlay-switch-forward ; 当在高亮的字符外时, 可快速返回.
                      "p" 'symbol-overlay-switch-backward
                      "d" 'symbol-overlay-remove-all
                      "R" 'symbol-overlay-query-replace)
  ;; 等价设置; 备忘
  ;; (setq symbol-overlay-map (make-sparse-keymap))
  ;; (setq gwp::symbol-overlay-map (make-sparse-keymap))
  ;; (define-key gwp::symbol-overlay-map (kbd "h") 'symbol-overlay-put)
  ;; (define-key gwp::symbol-overlay-map (kbd "n") 'symbol-overlay-jump-next)
  ;; (define-key gwp::symbol-overlay-map (kbd "p") 'symbol-overlay-jump-prev)
  ;; (define-key gwp::symbol-overlay-map (kbd "w") 'symbol-overlay-save-symbol)
  ;; (define-key gwp::symbol-overlay-map (kbd "t") 'symbol-overlay-toggle-in-scope)
  ;; (define-key gwp::symbol-overlay-map (kbd "e") 'symbol-overlay-echo-mark)
  ;; (define-key gwp::symbol-overlay-map (kbd "d") 'symbol-overlay-jump-to-definition)
  ;; (define-key gwp::symbol-overlay-map (kbd "s") 'symbol-overlay-isearch-literally)
  ;; (define-key gwp::symbol-overlay-map (kbd "q") 'symbol-overlay-query-replace)
  ;; (define-key gwp::symbol-overlay-map (kbd "r") 'symbol-overlay-rename)
  )

(map! :map help-map
      :desc "highlight symbols"
      "h" gwp::symbol-overlay-map)
#+end_src


** chinese/goldendict
[[https://github.com/stardiviner/goldendict.el][stardiviner/goldendict.el: Query word at point or region selected with goldendict.]]
#+name: 725e9ab6
#+begin_src elisp
;; https://github.com/stardiviner/goldendict.el
(defun goldendict-ensure ()
  "Ensure goldendict is running."
  (unless (string-match "goldendict" (shell-command-to-string "ps -C 'goldendict' | sed -n '2p'"))
    (start-process-shell-command
     "*goldendict*"
     " *goldendict*"
     "goldendict")))

;;;###autoload
(defun gwp::goldendict (word)
  (interactive (list (read-string "word: ")))
  (goldendict-ensure)
  ;; use Goldendict API: "Scan Popup"
  (call-process "goldendict" nil nil nil word))

;;;###autoload
(defun gwp::goldendict-from-clipboard ()
  (interactive)
  (let ((word (simpleclip-get-contents)))
    (gwp::goldendict word)))
#+end_src

** TODO theme
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src elisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-acario-light)
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-material)
(setq doom-theme 'doom-nova)
;; (setq doom-theme 'doom-vibrant)
;; (load-theme 'material t)
(custom-set-faces!
  '(org-todo :foreground "yellow" :weight bold :background "#263238")
  '(org-done :foreground "yellow" :weight bold :background "#263238")
  '(org-table :foreground "#e3f2fd")
  '(hl-line :background "#37474f")
  '(org-level-1 :foreground "#e3f2fd" :height 1.1 :background nil :weight bold :box nil)
  '(org-level-2 :foreground "#e3f2fd" :height 1.0 :background nil :weight normal :box nil)
  '(org-headline-done :foreground "gray" :weight normal)
  )

;; 当前行
(custom-set-faces!
  '(hl-line :background "#37474f")
  '(solaire-hl-line-face :background "#37474f")
  '(region :background "#555555")
  )
#+end_src

** big font mode
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src elisp
;; HiDPI下可用大字模式: SPC-t-b
(setq doom-font (font-spec :family "Monaco" :size 14))
(setq doom-big-font-increment 4)

;; (add-hook! doom-big-font-mode-hook #'(gwp/set-fonts))
;; 上面的不管用
(setq doom-big-font-mode-hook '(gwp/set-fonts))
(doom-big-font-mode -1)
#+end_src

** misc
#+name: 6013493c
#+begin_src elisp
;; View images inside Emacs
(auto-image-file-mode t)

;; 相当于行间距
(setq-default line-spacing 4)
#+end_src

** TODO bm.el
主要用 bm, 书签持久化是从 bm.el 里抄来的.
[2019-07-11 Thu] spacemacs有bm layer, 用那个吧.

#+BEGIN_SRC emacs-lisp :tangle no
(defun gwp/init-bm ()
  (defun gwp-mouse-toggle-bm (e)
    "Toggle bookmarking
This command should be bound to a mouse key.
Argument E is a mouse event used by `mouse-set-point'."
    (interactive "@e")
    (save-excursion
      (mouse-set-point e)
      (bm-toggle)
      ))

  ;; adopted from: https://github.com/joodland/bm
  (use-package bm
    :ensure t
    :demand t

    :init
    ;; restore on load (even before you require bm)
    (setq bm-restore-repository-on-load t)

    :config
    ;; Allow cross-buffer 'next'
    (setq bm-cycle-all-buffers nil)

    ;; save bookmarks
    (setq-default bm-buffer-persistence t)

    ;; Loading the repository from file when on start up.
    (add-hook 'after-init-hook 'bm-repository-load)

    ;; Saving bookmarks
    (add-hook 'kill-buffer-hook #'bm-buffer-save)

    ;; Saving the repository to file when on exit.
    ;; kill-buffer-hook is not called when Emacs is killed, so we
    ;; must save all bookmarks first.
    (add-hook 'kill-emacs-hook #'(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save)))

    ;; The `after-save-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state.
    (add-hook 'after-save-hook #'bm-buffer-save)

    ;; Restoring bookmarks
    (add-hook 'find-file-hooks   #'bm-buffer-restore)
    (add-hook 'after-revert-hook #'bm-buffer-restore)

    ;; The `after-revert-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state. This hook might cause trouble when using packages
    ;; that automatically reverts the buffer (like vc after a check-in).
    ;; This can easily be avoided if the package provides a hook that is
    ;; called before the buffer is reverted (like `vc-before-checkin-hook').
    ;; Then new bookmarks can be saved before the buffer is reverted.
    ;; Make sure bookmarks is saved before check-in (and revert-buffer)
    (add-hook 'vc-before-checkin-hook #'bm-buffer-save)

    :bind (
            ([left-fringe mouse-3] . gwp-mouse-toggle-bm)
            ([left-margin mouse-3] . gwp-mouse-toggle-bm)
            ([left-fringe mouse-5] . bm-next-mouse)
            ([left-margin mouse-5] . bm-next-mouse)
            ([left-fringe mouse-4] . bm-previous-mouse)
            ([left-margin mouse-4] . bm-previous-mouse)
            )))
#+END_SRC

** packages.el
:PROPERTIES:
:header-args: :tangle modules/gwp/ui/packages.el
:END:
#+name: d6a037d0
#+begin_src elisp
(package! winner)
(package! ace-window)
(package! symbol-overlay)
(package! burly :recipe (:host github :repo "alphapapa/burly.el"))
(package! rime)
(package! golden-ratio)

;; pangu-spacing 自动给中英文字加空格, 这严重影响响应速度.
(disable-packages! pangu-spacing)
;; 避免与rime的设置有冲突
(disable-packages! pyim)
#+end_src

* dired
:PROPERTIES:
:header-args: :tangle modules/gwp/dired/config.el
:END:
** dwim
#+name: 6be89afb
#+begin_src elisp
(defun gwp::dired-hook ()
  ;; 高亮当前行, 醒目
  (hl-line-mode 1)
  ;; 不显示隐藏文件
  (dired-omit-mode 1)
  ;; 启用折叠空目录模式
  (dired-collapse-mode 1))

;;;###autoload
(defun gwp::dired-quit-all ()
  "Kill all `dired-mode' buffers."
  (interactive)
  (mapc #'kill-buffer (doom-buffers-in-mode 'dired-mode))
  (message "Killed all dired buffers"))

;;;###autoload
(defun gwp::dired-goto-first ()
  (interactive)
  (goto-char (point-min))
  (dired-hacks-next-file))

;;;###autoload
(defun gwp::dired-goto-last ()
  (interactive)
  (goto-char (point-max))
  (dired-hacks-previous-file))

;;;###autoload
(defun gwp::dired-quit-window ()
  "退出 dired 时, kill 对应的 buffer"
  (interactive)
  ;; 在 split window 情况下, 我希望仅关掉当前窗口, 而非 bury 或 kill 对应的 buffer
  (let* ((same-buffer-in-window (delq (selected-window) (get-buffer-window-list))))
    (if same-buffer-in-window
        (progn
          (message "keep window buffer alive")
          (delete-window))
      ;; kill dired buffer
      (quit-window t))))

;;;###autoload
(defun gwp::dired-find-alternate-file ()
  "访问文件时避免新开多余的 buffer"
  (interactive)
  (cond
   ;; if the same buffer in other window
   ((delq (selected-window) (get-buffer-window-list))
    (dired-find-file))
   (t
    (dired-find-alternate-file))))

;; (defun gwp::dired-up-directory ()
;;   (interactive)
;;   (let* ((dir (dired-current-directory))
;;          (orig (current-buffer))
;;          (up (file-name-directory (directory-file-name dir))))
;;     (or (dired-goto-file (directory-file-name dir))
;;         ;; Only try dired-goto-subdir if buffer has more than one dir.
;;         (and (cdr dired-subdir-alist)
;;              (dired-goto-subdir up))
;;         (progn
;;           (kill-buffer orig)
;;           (dired up)
;;           (dired-goto-file dir)))))

;; https://www.emacswiki.org/emacs/DiredReuseDirectoryBuffer
;;;###autoload
(defun gwp::dired-up-directory ()
  (interactive)
  (cond
   ;; if the same buffer in other window
   ((delq (selected-window) (get-buffer-window-list))
    (dired-up-directory))
   (t
    (find-alternate-file ".."))))

;;;###autoload
(defun gwp::dired::symbol-link-at-point-to-home ()
  "在 dired 中, 将光前文件软链接到 HOME 下, 方便快速访问(比如在
virtualbox /windows 中)"
  (interactive)

  (if (derived-mode-p 'dired-mode)
      (let ((this-file (dired-get-file-for-visit))
            (target-path "~/00-dired-tmp-entry-point"))
        (make-symbolic-link this-file target-path)
        (message "symlink to: %s" target-path))
    (user-error "not in dired buffer")))

;;;###autoload
(defun gwp::dired-fd ()
  "用于递归搜索文件名, 生成 dired 视图"
  (interactive)
  (require 'fd-dired)
  (let ((args (read-string
               "Run fd (with args and search): "
               fd-dired-input-fd-args
               '(fd-dired-args-history . 1))))
    (fd-dired "." args)))
#+end_src

** core
#+name: 67caa559
#+begin_src emacs-lisp
(use-package dired
  :custom
  ;; 方便多个文件夹文件互动
  ;; Set this variable to non-nil, Dired will try to guess a default
  ;; target directory. This means: if there is a dired buffer
  ;; displayed in the next window, use its current subdir, instead
  ;; of the current subdir of this dired buffer. The target is used
  ;; in the prompt for file copy, rename etc.
  (dired-dwim-target t)
  (dired-auto-revert-buffer t)          ; don't prompt to revert; just do it
  (dired-recursive-copies  'always)
  (dired-recursive-deletes 'top)

  ;; Dired listing switches
  ;;  -a : Do not ignore entries starting with .
  ;;  -l : Use long listing format.
  ;;  -G : Do not print group names like 'users'
  ;;  -h : Human-readable sizes like 1K, 234M, ..
  ;;  -v : Do natural sort .. so the file names starting with . will show up first.
  (dired-listing-switches "-alhvG --group-directories-first") ; default: "-al"

  :config
  (add-hook! 'dired-mode-hook #'gwp::dired-hook)
  ;; Don't complain about this command being disabled when we use it
  (put 'dired-find-alternate-file 'disabled nil)
  ;; 安全第一
  (setq delete-by-moving-to-trash t)
  (progn
    ;; 用于在dired中复制当前文件的全路径.
    (defun gwp/dired-copy-file-path()
      (interactive)
      (let ((current-prefix-arg '(0)))
        (call-interactively 'dired-copy-filename-as-kill)))

    ;; 使用BACKSPACE来上一级目录, 使用Ctrl-shift-n来新建目录(默认为"+")
    (map! :map dired-mode-map
          "q"     #'gwp::dired-quit-window
          "j"     #'dired-hacks-next-file     ; 下一文件, 忽略非文件行
          "k"     #'dired-hacks-previous-file ; 上一文件, 忽略非文件行
          "h"     #'gwp::dired-up-directory
          "l"     #'dired-view-file
          "DEL"   #'gwp::dired-up-directory   ; BACKSPACE
          "RET"   #'gwp::dired-find-alternate-file
          "K"     #'dired-kill-line           ; 移除 dired buffer 中某行, 不影响文件, 相当于过滤
          "C-S-n" #'dired-create-directory
          "C-S-f" #'dired-create-empty-file
          )

    (gwp::local-leader-def
     :keymaps 'dired-mode-map
     "k" '(gwp::dired-quit-all :which-key "kill all dired buffers")
     "c" '(dired-collapse-mode :which-key "collapse empty dirs")
     "h" '(dired-omit-mode :which-key "toggle hidden files")
     "f" '(gwp::dired-fd :which-key "fd files")
     "y" '(gwp/dired-copy-file-path :which-key "Copy file path")
     "l" '(dired-do-symlink :which-key "Make symlink")
     "o" '(dired-find-file-other-window :which-key "display in other window")
     "SPC" '(dired-view-file :which-key "preview file")
     "!" '(dired-do-async-shell-command :which-key "Async shell command")
     "S" '(gwp::dired-open-current-as-sudo :which-key "sudo open file")
     )
    (gwp::goto-leader-def
     :keymaps 'dired-mode-map
     "g" '(gwp::dired-goto-first :which-key "goto first entry")
     "e" '(gwp::dired-goto-last :which-key "goto last entry")
     )))
#+end_src

** dired-omit
隐藏.dotfiles, doom中默认omit的太少
#+name: 5af5f8db
#+begin_src emacs-lisp
(use-package dired-x
  :custom
  (dired-omit-verbose t)
  (dired-omit-files (rx (or
                         (seq bol (? ".") "#")
                         (seq bol "." (* anychar) eol) ; example: ".", "..", ".foo"
                         ))))
#+end_src

** TODO dired-sidebar
#+name: 38a0a087
#+begin_src elisp
(use-package dired-sidebar
  :commands (dired-sidebar-toggle-sidebar))
#+end_src

** packages.el
:PROPERTIES:
:header-args: :tangle modules/gwp/dired/packages.el
:END:
#+name: 6c6adad5
#+begin_src elisp
(package! dired-filter)
(package! dired-collapse)
(package! dired-sidebar)
(package! fd-dired)
#+end_src

* edit
:PROPERTIES:
:header-args: :tangle modules/gwp/edit/config.el
:END:
** mark ring
mark-ring用于保存上次标记或选择的位置, 用于跳转很有用.

emacs 的 mark ring [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html#Mark-Ring][doc]]. emacs 会自动记录标记, 称为 mark ring. 鼠标选择, shift 选
择都算C-x C-x: 交换当前光标位置和 mark, 这样会跳转到上前 mark 的位置上, 不过会有
高亮, 按 C-g 取消

: set-mark-command
C-x C-@: 这是轮换全局 mark
C-u C-@: 这是轮换当前的 mark ring

- [[https://github.com/rolandwalker/back-button][rolandwalker/back-button: Visual navigation through mark rings in Emacs]]
- [[https://stackoverflow.com/questions/3393834/how-to-move-forward-and-backward-in-emacs-mark-ring][How to move forward and backward in Emacs' mark ring - Stack Overflow]]
- https://github.com/rolandwalker/back-button/blob/master/back-button.el
- [[https://github.com/slewsys/emacs-extensions/blob/main/mark-navigation.el][emacs-extensions/mark-navigation.el]]
- [[https://github.com/rolandwalker/back-button][rolandwalker/back-button: Visual navigation through mark rings in Emacs]]

*** core
#+name: e4fc036b
#+begin_src elisp
;; 要保证 C-u C-@ 连续调用有效
(setq set-mark-command-repeat-pop nil)

(defun gwp::jump-to-previous-mark ()
  (interactive)
  (let ((current-prefix-arg '(4)))     ; C-u
    (call-interactively #'set-mark-command)))

;; 根据手册: C-SPC C-SPC两次
;; 仅标记当前位置(push to mark ring), 但不选择
(defun gwp::mark-current-position ()
  (interactive)
  (call-interactively #'set-mark-command)
  (deactivate-mark)
  )

(defun gwp::mark-and-save-buffer()
  "标记光标所在位置, 并保存buffer"
  (interactive)
  (call-interactively #'gwp::mark-current-position)
  (save-buffer))

(setq global-mark-ring-max 99
      mark-ring-max 99)
#+end_src

*** global mark ring
#+name: e48dc36a
#+begin_src elisp
;; https://stackoverflow.com/a/27661338
(defun marker-is-point-p (marker)
  "test if marker is current point"
  (and (eq (marker-buffer marker) (current-buffer))
       (= (marker-position marker) (point))))

(defun push-mark-maybe ()
  "push mark onto `global-mark-ring' if mark head or tail is not current location"
  (if (not global-mark-ring) (error "global-mark-ring empty")
    (unless (or (marker-is-point-p (car global-mark-ring))
                (marker-is-point-p (car (reverse global-mark-ring))))
      (push-mark))))


(defun backward-global-mark ()
  "use `pop-global-mark', pushing current point if not on ring."
  (interactive)
  (push-mark-maybe)
  (when (marker-is-point-p (car global-mark-ring))
    (call-interactively 'pop-global-mark))
  (call-interactively 'pop-global-mark))

(defun forward-global-mark ()
  "hack `pop-global-mark' to go in reverse, pushing current point if not on ring."
  (interactive)
  (push-mark-maybe)
  (setq global-mark-ring (nreverse global-mark-ring))
  (when (marker-is-point-p (car global-mark-ring))
    (call-interactively 'pop-global-mark))
  (call-interactively 'pop-global-mark)
  (setq global-mark-ring (nreverse global-mark-ring)))
#+end_src

*** marker-visit.el
#+name: ebb32bb1
#+begin_src elisp
;; https://github.com/deestan/emacs/blob/master/emacs-goodies-el/marker-visit.el
;;
;;; marker-visit.el --- navigate through a buffer's marks in order

;; Copyright (C) 2001 Benjamin Rutt
;;
;; Maintainer: Benjamin Rutt <brutt@bloomington.in.us>
;; Version: 1.1

;; This file is not part of GNU Emacs.

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published
;; by the Free Software Foundation; either version 2, or (at your
;; option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, send e-mail to
;; this program's maintainer or write to the Free Software Foundation,
;; Inc., 59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.

;;; Commentary:

;; This file provides a simple way to navigate among marks in a
;; buffer.  C-u C-SPC is similar, but takes you haphazardly around the
;; buffer.  Setting bookmarks is a lot of extra work if you just want
;; to jump around your buffer quickly; plus, you have to come up with
;; a name for every bookmark.

;; All the marks you've left while editing a buffer serve as bread
;; crumb trails of areas in the buffer you've edited.  It is
;; convenient to navigate back and forth among these marks in order.
;; This file provides two methods to do just that, marker-visit-prev
;; and marker-visit-next.  These two functions will take you, from
;; point, to the nearest mark in either direction.  The function
;; marker-visit-truncate-mark-ring will truncate the mark ring.

;; The marks you can visit in a buffer consist of: "the mark" plus the
;; contents of the mark-ring.

;;; Usage:

;; put this file in your load-path and add the line
;;
;; (require 'marker-visit)
;;
;; to your ~/.emacs file.
;;
;; This package is most useful when some easy-to-press keys are bound
;; to the functions marker-visit-prev and marker-visit-next.  See C-h
;; i m Emacs RET m Key Bindings RET for info on emacs key bindings.

;;; History:

;; 1.0 -> 1.1 Incorporated patch from Colin Walters to make the code
;; consistent with elisp code conventions mentioned in
;; (Info-goto-node "(elisp) Coding Conventions").

;;; Code:

;;utility remove-dupes function
(defun marker-visit-remove-dupes (ls)
  (cond
   ((null ls) '())
   ((member (car ls) (cdr ls)) (marker-visit-remove-dupes (cdr ls)))
   (t (cons (car ls) (marker-visit-remove-dupes (cdr ls))))))

;;create a sorted list of marks, including the point as mark, the
;;mark, and the contents of the mark-ring.
(defun marker-visit-get-sorted-mark-set (current-point-mark)
  (marker-visit-remove-dupes
   (sort
    (append (cons current-point-mark
		  (if (mark-marker) (list (mark-marker)) nil))
	    (mapcar (lambda (id) id) mark-ring))
    (lambda (a b) (< a b)))))

(defun marker-visit-no-markers-p ()
  (and (null mark-ring)
       (or (not (mark-marker))
	   (not (marker-position (mark-marker))))))

(defun marker-visit-warn (error-message)
  (message error-message)
  (beep))

;;;###autoload
(defun marker-visit-prev ()
  "From point, visit the nearest mark earlier in the buffer."
  (interactive)
  (if (marker-visit-no-markers-p)
      (marker-visit-warn "Mark does not point anywhere")
    (let* ((current-point-mark (point-marker))
	   (sorted-marks (marker-visit-get-sorted-mark-set current-point-mark))
	   (dest-mark nil))
      (while (not (equal current-point-mark (car sorted-marks)))
	(setq dest-mark (car sorted-marks))
	(setq sorted-marks (cdr sorted-marks)))
      (if dest-mark
	  (goto-char dest-mark)
	(marker-visit-warn "No previous mark to visit")))))

;;;###autoload
(defun marker-visit-next ()
  "From point, visit the nearest mark later in the buffer."
  (interactive)
  (if (marker-visit-no-markers-p)
      (marker-visit-warn "Mark does not point anywhere")
    (let* ((current-point-mark (point-marker))
	   (sorted-marks (marker-visit-get-sorted-mark-set current-point-mark))
	   (dest-mark nil)
	   (done nil))
      (while (not done)
	(if (equal current-point-mark (car sorted-marks))
	    (progn
	      (setq dest-mark (cadr sorted-marks))
	      (setq done t))
	  (setq sorted-marks (cdr sorted-marks))))
      (if dest-mark
	  (goto-char dest-mark)
	(marker-visit-warn "No next mark to visit")))))

;;;###autoload
(defun marker-visit-truncate-mark-ring ()
  "Truncate the `mark-ring'."
  (interactive)
  (setq mark-ring nil))
#+end_src

*** hydra
#+name: 00b43976
#+begin_src elisp
(defhydra gwp::hydra-mark-ring-pop ()
  "goto last location"
  ("SPC" gwp::jump-to-previous-mark "prev mark")          ; 在org中可自动打开折叠的内容
  ("n" marker-visit-next "next mark")
  ("p" marker-visit-prev "prev mark")                     ; NOTE: org折叠的内容不会打开
  ("P" backward-global-mark "prev mark (global)")         ;
  ("N" forward-global-mark "next mark (global)")          ;
  ("o" gwp::org-show-context-at-point "org show context") ; 在org时: 跳转到被折叠的headline中很有用
  ("q" nil "quit"))
#+end_src
** movement
[[https://github.com/bbatsov/crux][bbatsov/crux: A Collection of Ridiculously Useful eXtensions for Emacs]]
: back-to-indentation
#+name: d1047b4d
#+begin_src elisp
(use-package crux
  :config
  (define-key! [remap move-beginning-of-line] #'crux-move-beginning-of-line)
  ;; 这个不管用, define-key! 管用
  ;; (map! :ni "C-a" 'crux-move-beginning-of-line)
  ;; (map! [remap move-beginning-of-line] #'crux-move-beginning-of-line)
  )
#+end_src

** auto-save
开启自动保存
#+begin_src elisp
(setq
 ;; doom里已默认为true
 auto-save-default t
 ;; 默认为5秒. 这里改大一些, 避免编辑时自动保存太快, 光标前的空格被吞掉
 auto-save-visited-interval 30)

;; 自动保存至当前文件名, 而临时文件
(auto-save-visited-mode +1)
#+end_src

** kill/delete/yank
#+name: b5a74212
#+begin_src elisp
(setq kill-ring-max 999)

;; 粘贴时删除区域中的内容, 不污染clipboard, 方便连续yank.
(defun gwp::yank-dwim (arg)
  "粘贴并覆盖选定区域. 如果以C-u调用则提示从kill-ring中选择"
  (interactive "P")
  (when (region-active-p)
    (call-interactively #'delete-region))
  (if (equal arg '(4))                  ; C-u
      (call-interactively #'counsel-yank-pop)
    (call-interactively #'yank)))
(map! "C-y" #'gwp::yank-dwim)

;; 保持和terminal中的行为一致: 删除选定区域或向后一个单词
(defun gwp::ctrl-w-dwim ()
  (interactive)
  (if (region-active-p)
      (call-interactively #'kill-region)
    (call-interactively #'backward-kill-word)))

(map! "C-w" #'gwp::ctrl-w-dwim); cut, copy: Alt-w
;; 删除到行尾或删除整行
(map! "C-k"  #'crux-smart-kill-line)
#+end_src

删除字符或选定区域, 但不经过kill-ring
: delete-char (C-d, DELETE), delete-backward-char (BACKSPACE)
: delete-region

比如, 希望删除选定内容, 粘贴之前复制的内容. 因为不污染clipboard, 这样就没必要从clipboard中选择内容了.
#+name: 7d5caf69
#+begin_src elisp
(defun gwp::ctrl-d-dwim (prefix)
  "清除区域或复制区域"
  (interactive "P")
  (if prefix                  ; C-u
      (call-interactively #'gwp::duplicate-line-or-region)
    (call-interactively #'gwp::delete-char-or-region)))

(defun gwp::delete-char-or-region()
  "清除光标前字符或选定区域"
  (interactive)
  (if mark-active
      (call-interactively #'delete-region)
    (delete-char 1)))

(map! "C-d" #'gwp::ctrl-d-dwim)
#+end_src

供参考
[[https://github.com/Wilfred/.emacs.d/blob/gh-pages/init.el][.emacs.d/init.el at gh-pages · Wilfred/.emacs.d]]
#+begin_src elisp :tangle no
;; I sometimes want to simply delete a region, rather than
;; saving it to the kill-ring. I've added a function that allows me to
;; type =C-u C-w= to delete the region, whilst =C-w= works as normal.

(defun gwp::kill-or-delete-region (beg end prefix)
  "Delete the region, storing it in the kill-ring.
If a prefix argument is given, don't change the kill-ring."
  (interactive "r\nP")
  (if prefix
      (delete-region beg end)
    (kill-region beg end)))
#+end_src

** keyfreq
[[https://github.com/dacap/keyfreq][dacap/keyfreq: Track Emacs commands frequency]]
可用keyfreq-show查看按键统计排序
#+begin_src elisp
(require 'keyfreq)
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+end_src

** insert date
#+name: ab440ea2
#+begin_src emacs-lisp
(defun gwp/insert-date (arg)
  "Insert date at point. With prefix argument, insert date and time."
  (interactive "P")
  (insert (format-time-string "%Y-%m-%d"))
  (when arg
    (insert (format-time-string " %H:%M"))))

;; make it easier to update time-stamp
(map! "C-c i" #'gwp/insert-date)
#+end_src

** disable mouse
笔记本输入时大拇指容易误碰触控板, 禁用鼠标可避免这一问题.
*** 方案1: disable mouse event
以下代码仍有问题, evil中仍能点击鼠标. 为简易见, 在KDE中禁用touchpad的tap功能.
#+name: 7628d03d
#+begin_src elisp
;; https://endlessparentheses.com/disable-mouse-only-inside-emacs.html
(define-minor-mode disable-mouse-mode
  "A minor-mode that disables all mouse keybinds."
  :global t
  :lighter " 🐭"
  :keymap (make-sparse-keymap)

  (dolist (type '(mouse
                  down-mouse
                  drag-mouse
                  double-mouse
                  triple-mouse))
    (dolist (prefix '("" C- M- S- M-S- C-M- C-S- C-M-S-))
      ;; Yes, I actually HAD to go up to 7 here.
      (dotimes (n 3)
        (let ((k (format "%s%s-%s" prefix type n)))
          (define-key disable-mouse-mode-map
            (vector (intern k)) #'ignore))))))

(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "禁用鼠标" "m" #'disable-mouse-mode
       ))

(defun turn-off-disable-mouse-mode ()
  (disable-mouse-mode -1))

(defun turn-on-disable-mouse-mode ()
  (disable-mouse-mode 1))

;; 在insert状态下禁用鼠标, 避免误碰触控板
(add-hook! 'evil-insert-state-entry-hook #'turn-on-disable-mouse-mode)
(add-hook! 'evil-insert-state-exit-hook #'turn-off-disable-mouse-mode)
#+end_src

*** 方案2: disable-mouse package
:PROPERTIES:
:header-args: :tangle no
:END:
以下代码可彻底禁用鼠标事件, 但evil得重启后才能重新启用, 无法动态切换. 这个问题比
较复杂, 不好解决. [[https://github.com/purcell/disable-mouse/issues/7][requiring restart #7]]
#+name: a791c065
#+begin_src elisp
(defun gwp/disable-mouse ()
  (interactive)
  (require 'disable-mouse)
  (global-disable-mouse-mode)
  (mapc #'disable-mouse-in-keymap
        (list evil-motion-state-map
              evil-normal-state-map
              evil-visual-state-map
              evil-insert-state-map))
  )
#+end_src

*** 方案3: xinput
:PROPERTIES:
:header-args: :tangle no
:END:
[[https://www.reddit.com/r/emacs/comments/38o0tr/i_have_to_share_this_switch_your_touchpad_off/][I have to share this: Switch your touchpad off when emacs gets focus and on again when she loses focus. : emacs]]

需要xinput命令
: pac -S xorg-xinput
: xinput list
: xinput enable "SYNA2393:00 06CB:CD48 Touchpad"
: xinput disable "SYNA2393:00 06CB:CD48 Touchpad"

#+begin_src elisp
(defun gwp/turn-off-touchpad (&optional frame)
  (interactive)
  (let ((inhibit-message t) (default-directory "~"))
    (shell-command "xinput disable \"SYNA2393:00 06CB:CD48 Touchpad\""))
  (message "touchpad disabled.")
  )

(defun gwp/turn-on-touchpad (&optional frame)
  (interactive)
  (let ((inhibit-message t) (default-directory "~"))
    (shell-command "xinput enable \"SYNA2393:00 06CB:CD48 Touchpad\""))
  (message "touchpad enabled.")
  )

(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "禁用鼠标" "m" #'gwp/turn-off-touchpad
       :desc "禁用鼠标" "M" #'gwp/turn-on-touchpad
       ))
#+end_src
** last changes
快速跳转到修改的位置, 非常方便.
#+name: 1c79ba79
#+begin_src elisp
(defhydra gwp::hydra-last-change ()
  ("N" goto-last-change "last change")  ; 用 p 按键容易误操作, 用N 安全些
  ("n" goto-last-change-reverse "previous change")
  ("c" recenter "recenter")
  ("o" gwp::org-show-context-at-point "org show context")
  ("q" nil "quit"))
#+end_src

** yasnippet
:PROPERTIES:
:ID:       63f45c9e-fbd3-41b5-93bf-50ae61557144
:END:
#+name: 7db2aa5a
#+begin_src elisp
;; Get rid of `yas-expand' binding on TAB. Cannot do this from the `:bind'
;; section, annoyingly. And other annoyinglies as well. See:
;;   (spydez/help/issue/visit "yasnippet" "unbind-tab.org")
;; for more details.
(use-package yasnippet
  :config
  (unbind-key "TAB" yas-minor-mode-map)
  (unbind-key "<tab>" yas-minor-mode-map)
  (define-key yas-minor-mode-map (kbd "<C-i>") 'yas-expand)
  )
#+end_src

** parens
#+name: 9786fedc
#+begin_src elisp
(defhydra gwp/hydra-smartparens (:hint nil)
  ("v" evil-visual-char)
  ("u" evil-undo)
  ("h" evil-backward-char)
  ("l" evil-forward-char)
  ("j" evil-next-line)
  ("k" evil-previous-line)
  ("(" sp-wrap-round "wrap in (round)")
  ("[" sp-wrap-square)
  ("{" sp-wrap-curly)
  ("'"  (lambda (&optional arg) (interactive "P") (sp-wrap-with-pair "'")))
  ("\""  (lambda (&optional arg) (interactive "P") (sp-wrap-with-pair "\"")))
  ("d" sp-unwrap-sexp "unwrap pair")
  ("q" nil "quit")
  )
#+end_src

** mark/selection
*** advanced selection
- [[https://stackoverflow.com/questions/18102004/emacs-evil-mode-how-to-create-a-new-text-object-to-select-words-with-any-non-sp][create a new text object in Evil]]

#+name: be09bc09
#+begin_src emacs-lisp
;; expand selection
;; http://xahlee.org/emacs/modernization_mark-word.html
;; by Nikolaj Schumacher, 2008-10-20. Released under GPL.
(defun semnav-up (arg)
  (interactive "p")
  (when (nth 3 (syntax-ppss))
    (if (> arg 0)
        (progn
          (skip-syntax-forward "^\"")
          (goto-char (1+ (point)))
          (decf arg))
      (skip-syntax-backward "^\"")
      (goto-char (1- (point)))
      (incf arg)))
  (up-list arg))

(defun gwp/select-text-in-quote ()
  "Select text between the nearest left and right delimiters.
Delimiters are paired characters: ()[]<>«»“”‘’「」, including \"\"."
  (interactive)
  (let (b1)
    (skip-chars-backward "^<>(“{[「«\"‘")
    (setq b1 (point))
    (skip-chars-forward "^<>)”}]」»\"’")
    (point)
    (set-mark (- b1 1))))

(defun gwp/select-none-blank-text ()
  "选择光标下非空格文字"
  (interactive)
  (let (b1)
    (skip-chars-backward "^ \n")
    (setq b1 (point))
    (skip-chars-forward "^ \n")
    (backward-char 1)
    (point)
    (set-mark b1)))

(defun gwp/select-word-dwim ()
  "选择连续的英文字词(不包括汉字)"
  (interactive)
  (let ((regexp "[\.-_A-Za-z0-9]") b1)
    (when (or (looking-at regexp)
              (er/looking-back-on-line regexp))
      (skip-chars-backward regexp)
      (setq b1 (point))
      (skip-chars-forward regexp)
      (backward-char)
      (point)
      (set-mark b1))))

;; https://github.com/magnars/expand-region.el
;; (require 'expand-region)
;; (global-set-key (kbd "M-4") 'er/expand-region)
#+end_src

*** evil
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src elisp
;; https://stackoverflow.com/a/22418983
(defmacro define-and-bind-text-object (key start-regex end-regex)
  (let ((inner-name (make-symbol "inner-name"))
        (outer-name (make-symbol "outer-name")))
    `(progn
       (evil-define-text-object ,inner-name (count &optional beg end type)
         (evil-select-paren ,start-regex ,end-regex beg end type count nil))
       (evil-define-text-object ,outer-name (count &optional beg end type)
         (evil-select-paren ,start-regex ,end-regex beg end type count t))
       (define-key evil-inner-text-objects-map ,key (quote ,inner-name))
       (define-key evil-outer-text-objects-map ,key (quote ,outer-name)))))

; between pipe characters:
(define-and-bind-text-object "|" "|" "|")
(define-and-bind-text-object "d" "\"" "\"")
#+end_src

*** transient key
#+name: 8fac8bf1
#+begin_src elisp
;; (use-package expand-region :after evil :config
;;   (map! :leader :v "v"
;;         (function er/expand-region)))

(require 'transient)
(transient-define-prefix gwp/advanced-selection ()
  "Advanced selection"
  [["常规选择"
    ("p" "select paragraph" er/mark-paragraph)
    ("c" "select comment" er/mark-comment)
    ("b" "select none blank" gwp/select-none-blank-text)
    ("t" "select text in quote" gwp/select-text-in-quote)
    ("w" "select word" gwp/select-word-dwim)
    ]]
  [["特殊选择"
    ("u" "mark url" er/mark-url)
    ("c" "mark org code block" er/mark-org-code-block)
    ("e" "mark email" er/mark-email)
    ]]
  )
#+end_src

** smartparens
[2021-10-05 Tue] 基本上没使用过, 禁用之
#+begin_src elisp :tangle no
(map! :leader
      :nvi
      "DEL" #'sp-backward-kill-sexp     ; BACKSPACE
      [deletechar] #'sp-kill-sexp       ; DELETE
      [right] #'sp-forward-slurp-sexp   ; Array right ==>
      [left]  #'sp-backward-slurp-sexp  ; Array left  <==
      "C-k"   #'sp-unwrap-sexp
      )
#+end_src

kill
: (foo |(abc) bar)  -> (foo | bar) ;; nil, defaults to 1
: (1 2 3 |4 5 6)    -> (|)         ;; 0
: (foo |(bar) baz)  -> |           ;; SPC u SPC u
: (1 |2 3 4 5 6)    -> (1|)        ;; SPC u

slurp
: (foo |bar) baz        -> (foo |bar baz)
: [(foo |bar)] baz      -> [(foo |bar) baz]
: ((|foo) bar baz quux) -> ((|foo bar baz quux)) ;; with SPC u

unwrap
: |(foo bar baz)     -> |foo bar baz
: (foo bar| baz)     -> foo bar| baz

** upcase/downcase
解决大小写, 首字母大写等问题. 在evil visual state中, 也可直接用u/U来实现相同功能.
#+name: b9054953
#+begin_src elisp
(map! "M-u" #'upcase-dwim
      "M-l" #'downcase-dwim
      "M-c" #'capitalize-dwim)
#+end_src

** clipboard
#+name: e571c476
#+begin_src elisp
(use-package simpleclip)

;; 从其它程序复制的内容也放至在kill-ring中, 不会因为emacs的操作而覆盖之前的内容
(setq save-interprogram-paste-before-kill t)
#+end_src

** duplicate
可用的
- delete-duplicate-lines

#+name: 3eff5fa2
#+begin_src elisp
(defun gwp::duplicate-region (beg end)
  (interactive "r")
  (save-excursion
    (let* ((beg (or beg (region-beginning)))
           (end (or end (region-end)))
           (region (buffer-substring beg end)))
      (goto-char end)
      (insert region))))

(defun gwp::duplicate-line (&optional stay)
  (save-excursion
    (move-end-of-line nil)
    (save-excursion
      (insert (buffer-substring (point-at-bol) (point-at-eol))))
    (newline)))

(defun gwp::duplicate-line-or-region()
  "复制当前行或选定区域"
  (interactive)
  (if (region-active-p)
      ;; 也可用 crux-duplicate-current-line-or-region
      (call-interactively #'gwp::duplicate-region)
    (gwp::duplicate-line)))

(map! :leader "C-d" #'delete-duplicate-lines)

;; (use-package move-dup
;;   :config
;;   (map! :iv "M-j" #'move-dup-move-lines-down)
;;   (map! :iv "M-k" #'move-dup-move-lines-up)
;;   (map! :iv "C-M-j" #'move-dup-duplicate-down)
;;   (map! :iv "C-M-k" #'move-dup-duplicate-up))
#+end_src

** jump
*** better jump
使用鼠标滚轮来跳转位置
- [[https://github.com/gilbertw1/better-jumper][gilbertw1/better-jumper: A configurable jump list implementation for Emacs]]

还有以两个字符为搜索依据的, 比如avy-goto-char-2
#+name: 6ded2bf1
#+begin_src elisp
(map!
      [M-mouse-4] #'better-jumper-jump-backward
      [M-mouse-5] #'better-jumper-jump-forward)

(map! :leader
      (:prefix-map ("j" . "jump")
       (:prefix-map ("a" . "avy")
        :desc "Search and jump (pinyin)"        "c" #'evil-avy-goto-char-2
        :desc "Search and jump"                 "s" #'evil-avy-goto-char-timer
        :desc "jump to line"                    "l" #'avy-goto-line
        )))
#+end_src

*** avy
可以用isearch(C-s)时, 调用avy实现侯选项跳转.
#+name: 08a09ddb
#+begin_src elisp
(map! :map isearch-mode-map
      :desc "avy跳转" "C-c ;" #'avy-isearch
      )
#+end_src

也可以在evil用"/"搜索后再jump
#+name: 0ed10c98
#+begin_src elisp
(defun gwp/evil-ex-search-avy-jump ()
  (interactive)
  (when evil-ex-search-pattern
    (let ((regex (car evil-ex-search-pattern)))
      (avy-jump regex)
      (evil-ex-search-stop-session))))

;; (map! :map evil-ex-search-keymap
;;       :desc "avy jump" "C-c ;" #'gwp/evil-ex-search-avy-jump)
;;
#+end_src

*** ivy
swiper搜索中, 如果一行内有多个结果, 得按好几次C-n才能到下一条. 这里用avy来跳转就方便了.

- 可用 ivy-restrict-to-matches进行二次过滤, 默认按键为S-SPC.
- ivy-avy用于快速跳转, 默认按键为C-', 得换个好按一些的.

#+name: dde3ee55
#+begin_src elisp
(map! :map ivy-minibuffer-map
      ;; 修改后的命令会报错, 原按键可以. 原因不明.
      ;; "C-c ;" #'ivy-avy
      :desc "二次过滤" "C-c r" (general-simulate-key "S-SPC")
      :desc "avy跳转" "C-c ;" (general-simulate-key "C-'")
      :desc "上一页" "C-c C-p" #'ivy-scroll-down-command
      :desc "下一页" "C-c C-n" #'ivy-scroll-up-command
      )
#+end_src



** newline
在注释环境下如何在行上或行下开新行, 而非延续注释?
#+name: 1a0721e0
#+begin_src elisp
(defun gwp::smart-open-line-above ()
  (interactive)
  (if (featurep 'evil)
      (when (evil-normal-state-p)
        (evil-insert 1)))
  (call-interactively #'crux-smart-open-line-above))

(defun gwp::smart-open-line ()
  (interactive)
  (if (featurep 'evil)
      (call-interactively 'evil-open-below)
    (end-of-line)
    (newline-and-indent)))

;; 默认为set-face之类的东西
;; (map! "M-o" #'just-one-space)
(map! "M-o" #'gwp::smart-open-line-above)
(map! "C-j" #'gwp::smart-open-line)
#+end_src

** search/replace
emacs默认搜索光标处的字词:
: C-s C-w
按C-c ;后可跳转(avy)

在evil中可用*或/. 感觉evil更方便.
#+name: b23f833f
#+begin_src elisp
(defun gwp::swiper-from-clipboard (prefix)
  "从clipboard取词来搜索"
  (interactive "P")
  (let ((keyword
         (simpleclip-get-contents)))
    (swiper-isearch keyword)))
#+end_src

** white space
just-one-space
cycle-spacing
#+name: f75f80bd
#+begin_src emacs-lisp
(setq show-trailing-whitespace t)
;; 保留时会自动清理, 以下已不必要
;; (global-set-key (kbd "<f5> SPC") 'delete-trailing-whitespace)

(map! "C-o" #'cycle-spacing)

;; 删除多余空行, 仅保留一行
(map! "C-x C-o" #'delete-blank-lines)
;; (global-set-key (kbd "C-x C-o") 'delete-blank-lines)
(map! :leader "C-o" #'delete-blank-lines)
#+end_src

** old
:PROPERTIES:
:header-args: :tangle no
:END:
[2022-01-12 Wed] evil 相关, 用不上了
*** evil
可以用来定义 leader 的键
- z
- b: evil-backward-word-begin
- w/W
- q/Q
- ,
- \: evil-execute-in-emacs-state
- -: evil-previous-line-first-non-blank
- =: evil-indent
- F5
#+name: 73388047
#+begin_src elisp
;; 默认q为macro键, 我很少用. 改为快速移动类按键.
(map! :n "q" #'evil-forward-paragraph)
(map! :n "Q" #'evil-backward-paragraph)

;; 默认为word-end类移动
(map! :n "e" #'evil-forward-sentence-begin)
(map! :n "E" #'evil-backward-sentence-begin)

;; 下面可以用 M-f/M-b 代替
;; (map! :n "w" #'evil-forward-word-begin)
;; (map! :n "W" #'evil-backward-word-begin)

;; C-v: evil默认为quoted-insert, 可以 ctrl-q代替
(map! :i "C-v" #'yank)
(map! :i "C-y" #'yank)

;; 禁用evil中的ctrl-e, 默认为向上滚动, 不太习惯.
(map! :nvim "C-a" nil)
(map! :nvim "C-e" nil)
(map! :nvim "C-d" #'gwp::ctrl-d-dwim)
(map! :nvim "C-k" nil)
(map! :nvim "C-n" nil)
(map! :nvim "C-p" nil)
(map! :nvim "C-u" nil)                  ; universal argument

(after! evil-org
  (map! :map evil-org-mode-map
        :nvim "C-d" #'gwp::ctrl-d-dwim
        :nvim "C-k" nil
        :i "M-l" nil))

;; insert state下用emacs默认按键
;; 2021-10-13: 设置无效
;; (setq evil-disable-insert-state-bindings t)
#+end_src

*** hydra
特别适合需要重复按键来完成的操作, 比如调整窗口大小.
#+name: 356a926a
#+begin_src elisp
(use-package hydra)
#+end_src

*** ctrl-z
默认切换为emacs-state, 经常按错.
#+name: 9edb7f25
#+begin_src elisp
(after! evil
  ;; 如何误入evil-emacs-state, 按ESC返回normal state
  (define-key evil-emacs-state-map [escape] 'evil-normal-state))
#+end_src

*** join next line
doom的引入的"改进"导致很诡异的行为, 应禁用掉.

[[https://github.com/hlissner/doom-emacs/commit/40cf6139ed53b635fec37ce623c4b1093c78a11e][Make evil-join remove comment delimiters · hlissner/doom-emacs@40cf613]]

#+name: 2286a7d2
#+begin_src elisp
(after! evil
  (advice-remove #'evil-join #'+evil-join-a))
#+end_src

*** multiedit
: SPC-v-m-m
进行多点编辑模式, 选中当前symbol或选中的词. 按n/N选择下一个或前一个. 不需
要的可用Enter取消掉. C-n/C-p跳到后一个match或前一个.
: SPC-v-m-i
进入多点编辑模式, 插入一个光标. 或M-i后再插入另一个.

#+name: 4593181c
#+begin_src elisp
(use-package evil-multiedit
  :after evil
  :config
  (setq evil-multiedit-follow-matches t))

(defhydra gwp::hydra-multiedit ()
  "resize-window"
  ("I" evil-multiedit-toggle-marker-here "insert cursor here")
  ("m" evil-multiedit-match-and-next "match symbol at point")
  ("r" evil-multiedit-restore "restore prev matches")
  ("q" nil "quit"))

(map!
 (:after evil-multiedit
  (:map evil-multiedit-state-map
   "n"  #'evil-multiedit-match-and-next
   "N"  #'evil-multiedit-match-and-prev
   "M-i"  #'evil-multiedit-toggle-marker-here
   "C-p"  #'evil-multiedit-prev
   "C-n"  #'evil-multiedit-next
   "RET"    #'evil-multiedit-toggle-or-restrict-region
   [return] #'evil-multiedit-toggle-or-restrict-region)))
#+end_src

*** bibtex
用于搜索zotero导出的bibtex文献. bibtex中keywords对应zotero中的tags
#+begin_src elisp
(setq bibtex-completion-bibliography
      '("~/Data/zotero/my.bib"))
(setq bibtex-completion-pdf-field "file")
(setq bibtex-completion-additional-search-fields '(keywords annotation note))
#+end_src

** packages
:PROPERTIES:
:header-args: :tangle modules/gwp/edit/packages.el
:END:
#+name: 1dfc22ab
#+begin_src elisp
(package! crux)
(package! move-dup)
(package! simpleclip)
(package! keyfreq)
(package! yasnippet)
#+end_src

* org
:PROPERTIES:
:header-args: :tangle modules/gwp/org/config.el
:END:
** docs
这里放org配置相关的内容, 在config.el中以load!宏来加载.

关于Tab键
- 默认是expand outline. 如果连续按会展开更深层的. 此时可移动下光标, 再回去按TAB就会缩回outline状态.

配置参考:
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
- [[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-org.el][.emacs.d/setup-org.el at master · kaushalmodi/.emacs.d]]

** basic
#+name: b28b06dc
#+begin_src elisp
(require 'org)
(setq org-blank-before-new-entry nil)
(setq org-default-notes-file (concat org-directory "/life.note"))

;; 禁用字词检查, 需要了再开
(remove-hook! 'org-mode-hook #'flyspell-mode)
(remove-hook! 'text-mode-hook #'spell-fu-mode)
#+end_src

** view
#+name: 7341aa84
#+begin_src elisp
;; https://orgmode.org/manual/Clean-view.html
(setq org-startup-indented t)      ;Enable `org-indent-mode' on Org startup
(with-eval-after-load 'org-indent
  (setq org-indent-indentation-per-level 1)) ;; default = 2

;; 对齐headline中的TAGs
(setq org-tags-column -80)

;; 方便用 property 来控制 image 显示大小
(setq org-image-actual-width nil)

;; 避免误编辑
(setq org-catch-invisible-edits 'show-and-error)

;; 避免切换时闪烁
;; (setq org-startup-indented nil)
;; (remove-hook! 'org-mode-hook #'org-indent-mode)

;; 避免显示subtree之间多余的空行
(setq org-cycle-separator-lines 0)

(use-package org-superstar
  :init
  ;; ◉ ○ ◆ » ◇ ▶ ▷
  (setq org-superstar-headline-bullets-list '("☰" "▶" "▷" "»"))
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

;; 显示光标所在处的headline
(defun gwp::org-show-context-at-point ()
  (interactive)
  ;; 从下面的命令看来的
  ;; (call-interactively 'org-mark-ring-goto)
  ;; (org-show-context 'mark-goto)
  (org-show-subtree)
  (when (or (org-invisible-p) (org-invisible-p2)) (org-show-context 'mark-goto))
  (call-interactively 'org-reveal))

;; 禁用*bold*等标注的字体效果. 写代码时容易弄花显示. 比如__init__.
(setq org-fontify-emphasized-text nil)

;; (map! :map org-mode-map
;;       :n "zo" #'gwp::org-show-context-at-point
;;       :n "zc" #'org-hide-entry)
#+end_src

** insert/item
*** screenshot
- org-contrib: [[file:doom-emacs/.local/straight/repos/org-mode/contrib/lisp/org-screenshot.el][org-screenshot.el]]

目前最佳方案: 使用org-download来实现屏幕截图的功能
- 在firefox或screenshot等截图后复制到X11剪贴板.
- 调用org-download-clipboard完成图片插入操作.
  - 图片自动保存到org attachment目录
  - 自动添加图片显示参数, 设定在org中显示的大小
- 也可用 drag-and-drop 的方式来插入图片, 非常方便.
- 可以使用org-download-delete来删除当前image

目前的问题 ([2020-03-06 Fri])
- 第二次执行截图时, 如果clipboard无图, emacs会挂住, 现在无解.

#+name: 3b3471ee
#+begin_src emacs-lisp
(defun gwp/org-image-attributes-default (&optional caption)
  "default image attributes: caption, name label, width ..."
  "Annotate LINK with the time of download."
  (format (concat
           (concat  "#+caption: " (read-string "Caption: " caption) "\n")
           ;; set unique figure name
           (format "#+name: fig:%s\n" (substring (org-id-new) 0 8))
           ;; unit in px; for displaying in org-mode
           "#+attr_org: :width 800\n"
           ;; unit in cm; for exporting as odt
           "#+attr_odt: :width 10\n"
           )))

(defun gwp/org-insert-image-attributes (&optional caption)
  "insert image attributes such as caption and labels"
  (interactive)
  (insert (gwp/org-image-attributes-default caption)))

(defun gwp/org-download-annotate (link)
  "Annotate LINK with the time of download."
  (gwp/org-image-attributes-default))

(use-package! org-download
  :commands
  org-download-delete
  org-download-yank
  org-download-clipboard
  :hook ((org-mode . org-download-enable)) ; 启用拖放功能
  :bind (:map org-mode-map
         ("C-c v" . org-download-clipboard))
  :config
  (setq org-download-method 'attach
        org-download-annotate-function 'gwp/org-download-annotate
        ;; org-download-image-html-width 900 ; in px
        ;; org-download-image-latex-width 16 ; in cm
        ;; 2021-09-03: 直接调用org-download-clipboard即可, 以下代码不必要
        ;; org-download-screenshot-method
        ;; (cond ((executable-find "txclip")  "txclip paste --image -o %s")
        ;;       ((executable-find "scrot") "scrot -s %s"))
        ))
#+end_src

*** memo/item/timestap
#+name: 3d7188a4
#+begin_src elisp
(defun gwp::new-memo-time-stamp (arg)
  "Insert a new org-mode memo entry under heading at point."
  (interactive "P")
  (unless (org-at-heading-p)
    (org-up-element))
  (call-interactively 'crux-smart-open-line)
  (call-interactively 'org-insert-todo-subheading)
  (call-interactively 'org-time-stamp-inactive)
  (insert " "))

(defun gwp::new-item-time-stamp (arg)
  (interactive "P")
  (if (org-in-item-p)
      (progn
        (call-interactively 'org-beginning-of-item)
        (call-interactively 'org-insert-item))
    (insert "- "))
  (call-interactively 'org-time-stamp-inactive)
  (insert " "))
#+end_src

*** pairs
doom加了很多没用的pair, 比如 /, ~, *等. [2020-03-13 Fri] 折腾了一晚上才试好.
#+begin_src elisp :tangle pkg/.doom.d/packages.el
(package! smartparens-org :ignore t)
#+end_src

[2020-05-16 Sat] doom更新后没这些问题了
#+begin_src elisp :tangle no
(after! smartparens-org
  (sp-with-modes '(org-mode)
    (sp-local-pair "/" nil :actions :rem)
    (sp-local-pair "=" nil :actions :rem)
    (sp-local-pair "~" nil :actions :rem)
    (sp-local-pair "*" nil :actions :rem)
    (sp-local-pair "_" nil :actions :rem)))
#+end_src

*** keymap
#+name: bafd9bd3
#+begin_src elisp

(general-define-key :prefix-map 'gwp::org-insert-map)

(map! :map gwp::org-insert-map
      :desc "new memo entry"
      "m" #'gwp::new-memo-time-stamp ; 简化操作
      :desc "new item"
      "i" #'gwp::new-item-time-stamp
      :desc "inactive time-stamp"
      "t" #'org-time-stamp-inactive
      :desc "active time-stamp"
      "." #'org-time-stamp
      :desc "stored link"
      "l" #'org-insert-last-stored-link
      :desc "schedule"
      "s" #'org-schedule
      :desc "deadline"
      "d" #'org-deadline
      :desc "note"
      "n" #'org-add-note
      :desc "sort list"
      "S" #'org-sort-list ; 可用于给列表排序, 默认为C-c ^
      )

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "i" '(:keymap gwp::org-insert-map :which-key "insert/item")
 )
#+end_src


** subtree/search
*** refile
refile流程:
- 打开refile.note
- 检查其中的条目, 找到可能的合适的归档.note文件, 打开之.
- SPC-m-r-r, org-refile
- SPC-u SPC-m-r-r: 跳转至refile targets

#+name: 568eea25
#+BEGIN_SRC emacs-lisp
(defun gwp/org-get-refile-targets ()
  "Return the list of files currently opened in emacs"
  (delq nil
        (mapcar (lambda (x)
                  (if (and (buffer-file-name x)
                           (string-match "\\.note$"
                                         (buffer-file-name x)))
                      (buffer-file-name x)))
                (buffer-list))))

;;(setq org-refile-targets '((gwp/org-get-refile-targets :tag . "Incoming")))
(setq org-refile-targets '((gwp/org-get-refile-targets :regexp . "^* Memo")))
(setq org-refile-use-outline-path nil)

(setq org-reverse-note-order t)
(defun gwp/get-org-file-link-path ()
  (save-excursion
    (beginning-of-line)
    (search-forward "[[file:" (line-end-position))
    (if (org-in-regexp org-bracket-link-regexp 1)
        (org-link-unescape (match-string-no-properties 1)))))
#+END_SRC

*** narrow
[2021-10-02 Sat] 和org-tree-to-indirect-buffer相比, 以下代码功能类似, 但是先生成
整个indirect buffer再narrow, kill-buffer时不影响原buffer.

[[https://www.reddit.com/r/orgmode/comments/dbsngi/finally_solving_the_lack_of_a_treeview_navigation/][Finally solving the lack of a tree-view navigation window in Org : orgmode]]

#+name: 5ca48f79
#+begin_src elisp
(defun ap/org-tree-to-indirect-buffer (&optional arg)
  "Create indirect buffer and narrow it to current subtree.
The buffer is named after the subtree heading, with the filename
appended.  If a buffer by that name already exists, it is
selected instead of creating a new buffer."
  (interactive "P")
  (let* ((new-buffer-p)
         (pos (point))
         (buffer-name (let* ((heading (org-get-heading t t))
                             (level (org-outline-level))
                             (face (intern (concat "outline-" (number-to-string level))))
                             (heading-string (propertize (org-link-display-format heading)
                                                         'face face)))
                        (concat heading-string "::" (buffer-name))))
         (new-buffer (or (get-buffer buffer-name)
                         (prog1 (condition-case nil
                                    (make-indirect-buffer (current-buffer) buffer-name 'clone)
                                  (error (make-indirect-buffer (current-buffer) buffer-name)))
                           (setq new-buffer-p t)))))
    (switch-to-buffer new-buffer)
    (when new-buffer-p
      ;; I don't understand why setting the point again is necessary, but it is.
      (goto-char pos)
      (rename-buffer buffer-name)
      (org-narrow-to-subtree))))

(advice-add 'org-tree-to-indirect-buffer :override 'ap/org-tree-to-indirect-buffer)
#+end_src

narrow 到当前代码块对应的 tangle 文件所在的层级. 专注编辑, 也不用担心 tangle 出的代码不全的问题.
#+name: ab0515d6
#+begin_src elisp
;;;###autoload
(defun gwp::org-babel-narrow-to-tangle-heading ()
  "narrow至当前代码块对应的 tangle 文件所在级别"
  (interactive)
  (let ((tangle-file (cdr (assq :tangle (nth 2 (org-babel-get-src-block-info 'light)))))
        (start-position (point))
        offset)
    ;; :tangle no 不能算
    (if (and tangle-file (not (string= tangle-file "no")))
        (save-excursion
          (if (search-backward (format ":tangle %s" tangle-file) nil t)
              (progn
                (setq offset (- start-position (point)))
                (ap/org-tree-to-indirect-buffer)
                (forward-char offset)
                (message "narrowed to heading: %s" tangle-file))
            (message "no root headline found")))
      (message "narrowed to headline at point")
      (ap/org-tree-to-indirect-buffer))))
#+end_src

*** keymap
#+name: a393f96d
#+begin_src elisp
(general-define-key :prefix-map 'gwp::org-subtree-map)

(map! :map gwp::org-subtree-map
      :desc "Demote"
      "l" #'org-demote-subtree
      :desc "Promote"
      "h" #'org-promote-subtree
      :desc "Archive"
      "A" #'org-archive-subtree
      :desc "Narrow"
      "n" #'gwp::org-babel-narrow-to-tangle-heading
      ;; 仿SPC-s-s
      :desc "Goto"
      "s" #'counsel-org-goto
      :desc "Goto (all)"
      "S" #'counsel-org-goto-all
      :desc "Toggle org-sidebar-tree"
      "t" #'org-sidebar-tree-toggle
      :desc "refile subtree"
      "r" #'org-refile
      :desc "refile but preserve subtree"
      "R" #'org-refile-copy
      )

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "s" '(:keymap gwp::org-subtree-map :which-key "subtree/search")
 )
#+end_src

** babel
*** docs
参考
- [[https://org-babel.readthedocs.io/en/latest/][Org Babel reference card]]

如何察看noweb展开后的代码:
- C-c C-v v: org-babel-expand-src-block

*** init
#+begin_src emacs-lisp
;; 不缩进org-src块中的代码.
;; 注意: 不直接设置为"org-src-preserve-indentation t",
;; 只设置org-edit-src-content-indentation为0, 这样仅影响编辑的org, 不影响tangle
;; 出的代码. 以前的org文档可以逐步调回来
(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0) ;Default = 2

;; helper functions for literate programming
;; taking from: https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.org
(defun help/set-org-babel-default-header-args (property value)
  "Easily set system header arguments in org mode.

PROPERTY is the system-wide value that you would like to modify.

VALUE is the new value you wish to store.

Attribution: URL `http://orgmode.org/manual/System_002dwide-header-arguments.html#System_002dwide-header-arguments'"
  (setq org-babel-default-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args))))

;; 几个重要的header args:
(help/set-org-babel-default-header-args :padline "yes")
(help/set-org-babel-default-header-args :mkdirp "yes")
(help/set-org-babel-default-header-args :comments "link")
#+end_src
*** load
方便在 org 中直接执行某些脚本操作.

- [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html][Org-babel-gnuplot]]

#+name: 0d8e352a
#+begin_src elisp
;; activate languages for evaluation
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (emacs-lisp . t) ;; this is the default
   (python . t)
   (shell . t)
   (sqlite . t)
   (R . t)
   (restclient . t)                     ; 测试 http API
   (gnuplot . t)                        ; 需要安装 gnuplot 对应的两个包
   ))
#+end_src

*** enter
#+begin_src emacs-lisp
;; 禁用代码着色, 影响速度
;; (setq org-src-fontify-natively nil)

;; 编辑代码时在下方新开窗口
;;(setq org-src-window-setup 'split-window-below)
(setq org-src-window-setup 'current-window)
;(setq org-src-window-setup 'reorganize-frame)
;;(setq org-src-window-setup 'other-frame)

;; 进入代码编辑模式, 改成容易按的
(map! :map org-mode-map
      :ni "C-c ;" #'org-edit-special
      :ni "C-c C-;" #'org-edit-special
      :localleader ";" #'org-edit-special
      )
#+end_src
*** rest api
[[https://github.com/pashky/restclient.el][pashky/restclient.el: HTTP REST client tool for emacs]]

*** toml
方便写Cargo.toml, 指定为toml为conf-toml-mode, 而不用写全 "conf-toml".
#+begin_src elisp
;; Add convenience lang alias for markdown blocks
(add-to-list 'org-src-lang-modes '("toml" . conf-toml))
#+end_src

*** edit
- org-babel-demarcate-block: 可以用来将选中代码分割为不同的代码块.
- org-babel-do-key-sequence-in-edit-buffer: 在当前代码下直接执行src code语境下的命令

#+name: 84623fc4
#+begin_src emacs-lisp
;; 默认的不太好按. 不能用C-c C-c, 容易与别的模块冲突.
(map! :map org-src-mode-map
      "C-c ;"   #'org-edit-src-exit  ; 保存退出
      "C-c C-;" #'org-edit-src-exit  ; 保存退出
      "C-c C-k" #'org-edit-src-abort ; 放弃修改
      )
(map! :map org-src-mode-map
      :localleader
      ";" #'org-edit-src-exit
      "k" #'org-edit-src-abort
      )
(gwp::local-leader-def
  :keymaps 'org-src-mode-map
  "q" #'org-edit-src-exit
  )
#+end_src

*** jump to org blocks/links
#+name: 8aa4aca8
#+begin_src elisp
(defhydra gwp/org-jump-block ()
  "jump to org blocks"
  ("n" org-next-block "next block")
  ("p" org-previous-block "prev block")
  ("q" nil "quit")
  )

(defhydra gwp/org-jump-link ()
  "jump to org links"
  ("n" org-next-link "next link")
  ("p" org-previous-link "prev link")
  ("q" nil "quit")
  )
#+end_src

*** jump to file
从org文件跳转到tangled file
- 这个包可用于与compile等跳转配合使用 [[https://github.com/EricCrosson/help-find-org-mode][help-find-org-mode]]

#+name: fa928b1c
#+begin_src elisp
(defun gwp/org-babel-tangle-jump-to-file ()
  "Jump to tangle file for the source block at point."
  (interactive)
  (let ((mid (point))
        (element (org-element-at-point))
        (body-start (save-excursion
                      (progn
                        (org-babel-goto-src-block-head)
                        (next-line)
                        (point)
                        )))
        (tangle-file (cdr (assq :tangle (nth 2 (org-babel-get-src-block-info 'light)))))
        offset)
    (if tangle-file
        (let ((block-name (org-element-property :name element))
              (tangle-file (expand-file-name tangle-file)))
          (if (file-readable-p tangle-file)
              (progn
                ;; open tangled file
                (find-file tangle-file)
                ;; if code block has a name, we jump to that block
                (when block-name
                  (beginning-of-buffer)   ; if point restored, the searching could fail
                  (when (search-forward (format "::%s" block-name) nil t)
                    (next-line)
                    (beginning-of-line)
                    (setq offset (- mid body-start))
                    (forward-char offset)
                    (recenter)
                    )))
            (error "Cannot open tangle file %S" tangle-file)))
      (message "not in source block"))))
#+end_src

以下为网上淘来的代码, 可弃.
#+begin_src elisp :tangle no
;; https://emacs.stackexchange.com/questions/50649/jumping-from-a-source-block-to-the-tangled-file
(defun gwp/org-babel-tangle-jump-to-file ()
  "Jump to tangle file for the source block at point."
  (interactive)
  (let (file org-babel-pre-tangle-hook org-babel-post-tangle-hook)
    (cl-letf (((symbol-function 'write-region) (lambda (start end filename &rest _ignore)
                                                 (setq file filename)))
              ((symbol-function 'delete-file) #'ignore))
      (org-babel-tangle '(4)))
    (when file
      (setq file (expand-file-name file))
      (if (file-readable-p file)
          (find-file file)
        (error "Cannot open tangle file %S" file)))))
#+end_src

跳回来可用(需要配合src block name一起使用):
: org-babel-tangle-jump-to-org

将tangle file中的修改返回给org
: org-babel-detangle

还有一个https://github.com/mtekman/org-tanglesync.el. 但使用上有限制 [[https://github.com/mtekman/org-tanglesync.el/issues/13][issue 13]].
*** jump to org
原版的似有bug, 不能精确复原光标位置.
#+name: 9b40c7cf
#+begin_src elisp
(defun gwp/org-babel-tangle-jump-to-org ()
  "Jump from a tangled code file to the related Org mode file."

  (require 'ol)
  (interactive)
  (let ((mid (point))
	start body-start end target-buffer target-char link block-name body)
    (save-window-excursion
      (save-excursion
    (while (and (re-search-backward org-link-bracket-re nil t)
            (not ; ever wider searches until matching block comments
             (and (setq start (line-beginning-position))
              (setq body-start (line-beginning-position 2))
              (setq link (match-string 0))
              (setq block-name (match-string 2))
              (save-excursion
                (save-match-data
                  (re-search-forward
                   (concat " " (regexp-quote block-name)
                       " ends here")
                   nil t)
                  (setq end (line-beginning-position))))))))
	(unless (and start (< start mid) (< mid end))
	  (error "Not in tangled code"))
        (setq body (buffer-substring body-start end)))
      ;; Go to the beginning of the relative block in Org file.
      (org-link-open-from-string link)
      (message "%s" link)
      (setq target-buffer (current-buffer))
      ;; (search-forward body)
      (if (string-match "[^ \t\n\r]:\\([[:digit:]]+\\)" block-name)
          (let ((n (string-to-number (match-string 1 block-name))))
            (if (org-before-first-heading-p) (goto-char (point-min))
              (org-back-to-heading t))
            ;; Do not skip the first block if it begins at point min.
            (cond ((or (org-at-heading-p)
                       (not (eq (org-element-type (org-element-at-point))
                		'src-block)))
                   (org-babel-next-src-block n))
                  ((= n 1))
                  (t (org-babel-next-src-block (1- n)))))
        (org-babel-goto-named-src-block block-name))
      (goto-char (org-babel-where-is-src-block-head))
      (forward-line 1)
      ;; Try to preserve location of point within the source code in
      ;; tangled code file.
      (let ((offset (- mid body-start)))
        (when (< end (+ offset (point))) ; ybyygu hacked here
          (forward-char offset)))
      (setq target-char (point)))
    (org-src-switch-to-buffer target-buffer t)
    (goto-char target-char)))
#+end_src

*** noweb
org-babel-expand-src-block (可以展开noweb macro)

*** tangle
注意: tangle-subtree时得注意, 可能会以部分内容覆盖总文件.
#+name: f1b57cf1
#+begin_src elisp
;; tangle blocks for current file at point
;; http://stackoverflow.com/questions/28727190/org-babel-tangle-only-one-code-block
;; call org-babel-tangle with C-u C-u
(defun gwp/org-babel-tangle-blocks()
  (interactive)
  ;; tangle blocks only for target file at point
  (let ((current-prefix-arg '(16)))     ; C-u C-u
    (call-interactively 'org-babel-tangle)))

;; narrow to subtree before calling org-babel-tangle
(defun gwp/org-tangle-subtree()
  "Tange src blocks in current subtree"
  (interactive)
  (org-narrow-to-subtree)
  (org-babel-tangle)
  (widen)
  )
#+end_src

如何在代码编辑窗口中tangle?
#+name: 566a6ed9
#+begin_src elisp
(defun gwp/org-edit-save-and-tangle ()
  "When in a sub-editing buffer, swith to the parent buffer and tangle the file blocks"
  (interactive)
  (save-excursion
    (org-edit-src-exit)
    ;; insert an unique code block name
    (gwp/org-src-insert-name)
    (call-interactively 'gwp/org-babel-tangle-blocks)
    (org-edit-src-code)))

(defun gwp/org-babel-tangle-dwim()
  "Tangle current file at point whenever in a sub-editing buffer or not"
  (interactive)
  ;; 标记当前位置
  (gwp::mark-current-position)
  (if (org-src-edit-buffer-p)
      (gwp/org-edit-save-and-tangle)
    (if (eq 'src-block (org-element-type (org-element-at-point)))
        (progn
          ;; insert an unique code block name
          (gwp/org-src-insert-name)
          (call-interactively 'gwp/org-babel-tangle-blocks))
      (message "not in source block"))))
#+end_src

禁用当前代码块或整个headline. 如果再次使用即取消插入的header args. 还可以用
org-delete-property 删除 header-args
#+name: 661f0512
#+begin_src elisp
(defun gwp/org-babel-tangle-no()
  "Turn on or turn off tangling current code block"
  (interactive)
  (if (eq 'src-block (org-element-type (org-element-at-point)))
      (save-excursion
        (org-babel-goto-src-block-head)
        (if (re-search-forward ":tangle no" (line-end-position) t)
            (delete-region (match-beginning 0) (match-end 0))
          (org-babel-insert-header-arg "tangle" "no")))
    (org-set-property "header-args" ":tangle no")))
#+end_src

插入一个唯一的block name, 方便跳转
#+name: 1a4b128e
#+begin_src elisp
(defun gwp/org-src-insert-name ()
  "If it doesn't have a NAME property then assign it an unique name."
  (interactive)
  (let ((element (org-element-at-point)))
    (if (eq 'src-block (org-element-type element))
        (if (not (org-element-property :name element))
            (save-excursion
              (goto-char (org-babel-where-is-src-block-head))
              (let ((i (current-indentation)))
                (save-excursion (insert "#+name: " (substring (org-id-new) 0 8) "\n"))
                (indent-to i)))
          (message "source block alread named"))
      (message "not in source block"))))
#+end_src

*** template
- http://orgmode.org/manual/Languages.html

#+name: e9fca5dc
#+begin_src emacs-lisp
(with-eval-after-load 'ob
  (setq org-structure-template-alist
        '(
          ("py" . "src python :results output")
          ("rs" . "src rust")
          ("el" . "src emacs-lisp")
          ("sh" . "src sh")
          ))

  (defun gwp/org-babel-edit-structure-in-place (arg)
    "Insert source strcture and edit the source"
    (interactive "P")
    (call-interactively 'org-insert-structure-template)
    (call-interactively 'org-edit-src-code)
    ))
#+end_src

*** auto time-stamp
格式设置为类org-mode, 方便插入和修改. 参考: [[http://nullman.net/emacs/files/init-emacs.org][URL]]

#+begin_src emacs-lisp
(with-eval-after-load "ob-tangle"
  ;; update timestamps on tangled files
  (setq time-stamp-pattern "100/UPDATED:[ \t]+\\\\?[\"<]+%:y-%02m-%02d %3a %02H:%02M\\\\?[\">]")
  (defun org-babel-post-tangle-hook--time-stamp ()
    "Update timestamps on tangled files."
    (time-stamp)
    (save-buffer))
  (add-hook 'org-babel-post-tangle-hook 'org-babel-post-tangle-hook--time-stamp))
#+end_src

*** keymap
#+name: 21ae7ae2
#+begin_src elisp
(general-define-key :prefix-map 'gwp::org-babel-map)

;; 更多的命令定义在org-babel-map
(map! :map gwp::org-babel-map
      :desc "check src block headers"    "c" #'org-babel-check-src-block
      :desc "insert header argument"     "i" #'org-babel-insert-header-arg
      :desc "view header arguments"      "I" #'org-babel-view-src-block-info
      :desc "demarcate block"            "d" #'org-babel-demarcate-block
      :desc "edit src codes in place"    "s" #'gwp/org-babel-edit-structure-in-place
      :desc "jump to tangled file"       "j" #'gwp/org-babel-tangle-jump-to-file
      :desc "insert header tangle no"    "n" #'gwp/org-babel-tangle-no
      :desc "execute in edit buffer"     "x" #'org-babel-do-key-sequence-in-edit-buffer
      :desc "tangle blocks in subtree"   "t" #'gwp/org-tangle-subtree
      :desc "name code block at point"   "SPC" #'gwp/org-src-insert-name
      :desc "tangle blocks in buffer"    "T" #'org-babel-tangle
      :desc "switch org buffer"          "b" #'org-switchb ; 仿SPC-b-b
      )

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "P" '(org-previous-block :which-key "previous block")
 "N" '(org-next-block :which-key "next block")

 "b" '(:keymap gwp::org-babel-map :which-key "babel/buffer")
 )
#+end_src

** toggle/todo/tag
*** toggle
#+name: ebc6075d
#+begin_src elisp
(defun gwp::org-toggle-checkbox ()
  (interactive)
  (unless (org-at-item-p)
    (call-interactively #'org-toggle-item)
    )
  (let ((current-prefix-arg '(4)))     ; C-u
    (call-interactively #'org-toggle-checkbox)))
#+end_src

*** keymap
#+name: 1e605e7a
#+begin_src elisp
(general-define-key :prefix-map 'gwp::org-toggle-map)

(map! :map gwp::org-toggle-map
      :desc "preview inline images"
      "I" #'org-toggle-inline-images
      :desc "preview latex fragments"
      "L" #'org-latex-preview
      :desc "Paste image from clipboard"
      "C-v" #'org-download-clipboard
      :desc "change the TODO state"
      "t" #'org-todo
      :desc "heading"
      "h" #'org-toggle-heading
      :desc "item"
      "i" #'org-toggle-item
      :desc "tag"
      "s" #'counsel-org-tag
      :desc "fixed-width markup (:)"
      ":" #'org-toggle-fixed-width
      :desc "toggle checkbox"
      "c" #'gwp::org-toggle-checkbox)

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "-" '(org-ctrl-c-minus :which-key "toggle item (-)")
 "*" '(org-ctrl-c-star :which-key "toggle headline (*)")

 "t" '(:keymap gwp::org-toggle-map :which-key "toggle")
 )
#+end_src

** link/latex
*** delete link file
删除当前所在链接对应的文件. org-download-delete现在不可用(由于 attachment link).
#+name: 27b50206
#+begin_src elisp
(defun gwp/org-delete-link-file (arg)
  "Delete the file that link points to."
  (interactive "P")

  (save-excursion
    (org-next-link)
    (let ((file (gwp/org-file-path-at-point)))
      (if file
          (if (file-exists-p file)
              (when (yes-or-no-p (format "Delete link file: %s?" file))
                (progn (delete-file file)
                       (message "File deleted")))
            (error "No such attachment: %s" file))
        (user-error "Point is not on a file link")))))
#+end_src
*** zotero/ui                                                           :ATTACH:
:PROPERTIES:
:ID:       0cbea3c4-ceef-44b4-9d07-250080801511
:END:
[[file:rust-modules/rust-modules.note][rust-module.note]]

使用space-m-z-z打开zotero搜索界面
流程:
- 搜索文献
- 选中文献, 右键或Ctrl-o, 打开ivy actions界面
- 选择打开附件, ctrl-o, 打开action界面, 选择标注

#+caption: 文献PDF注解界面
#+name: fig:3381b8ba
#+attr_org: :width 800
#+attr_odt: :width 10
[[attachment:2021-08-25_16-19-20_screenshot.png]]

#+begin_src elisp
;; rust-modules
(add-to-list 'load-path "/home/ybyygu/Workspace/Programming/emacs/rust-modules")
(require 'zotero)

(defun gwp/zotero-search-by-tag (name)
  "Search Zotero entries by tag using ivy."
  (interactive "sTag: ")

  (let* ((candidates (zotero-search-items-by-tag name)))
    (ivy-read (format "Zotero entries: ")
              candidates
              :action '(2               ; set the default action to open attachments
                        ("o" gwp--ivy-action-open-link "Open link")
                        ("O" gwp--ivy-action-open-attachments "Open attachments")
                        ("r" gwp--ivy-action-show-related-items "Show Related Items")
                        ("i" gwp--ivy-action-insert-link "Insert link")))))

(defun gwp/zotero-search-by-collection (name)
  "Search Zotero entries by collection name using ivy."
  (interactive "sCollection: ")

  (let* ((candidates (zotero-search-items-by-collection name)))
    (ivy-read (format "Zotero entries: ")
              candidates
              :action '(2               ; set the default action to open attachments
                        ("o" gwp--ivy-action-open-link "Open link")
                        ("O" gwp--ivy-action-open-attachments "Open attachments")
                        ("r" gwp--ivy-action-show-related-items "Show Related Items")
                        ("i" gwp--ivy-action-insert-link "Insert link")))))

(defun gwp--ivy-action-show-related-items (x)
  "show related items from selection"
  (let* ((candidates (zotero-get-related-items x)))
    (ivy-read (format "Related: ")
              candidates
              :action '(2               ; set the default action to open attachments
                        ("o" gwp--ivy-action-open-link "Open link")
                        ("O" gwp--ivy-action-open-attachments "Open attachments")
                        ("r" gwp--ivy-action-show-related-items "Show Related Items")
                        ("i" gwp--ivy-action-insert-link "Insert link")))))

(defun gwp--ivy-action-annotate-attachment (pdf-file)
  "Annotate the attachment with org-noter."
  (let ((annotation-file (expand-file-name (car org-noter-default-notes-file-names) (file-name-directory pdf-file))))
    (progn
      ;; create an empty annotation file if not exists
      (unless (file-exists-p annotation-file) (write-region "" nil annotation-file))
      (org-open-file pdf-file)
      (org-noter))))

(defun gwp--ivy-action-open-attachments (x)
  "ivy completion for zotero attachments."
  (let* ((candidates (zotero-get-selected-item-attachment-paths x)))
    (ivy-read (format "Open attachment: ")
              candidates
              :action '(1               ; set the default action to open link
                        ("o" org-open-file "Open")
                        ("n" gwp--ivy-action-annotate-attachment "Annotate")))))

(defun gwp--ivy-action-insert-link (x)
  (let ((uri (zotero-get-selected-item-link x)))
    (if uri
        (progn
          (message "%s!" x)
          (insert "[[" uri "][" "zotero-item" "]]"))
      (error "No link extracted from: %s" x))))

(defun gwp--ivy-action-open-link (x)
  (let ((uri (zotero-get-selected-item-link x)))
    (if uri
        (progn
          (message "%s!" x)
          (org-link-open-from-string (format "[[%s]]" uri)))
      (error "No link extracted from: %s" x))))

(defun gwp/org-open-zotero-attachments-at-point (arg)
  "Handle zotero attachments in org-mode"
  (interactive "P")
  (let ((ct (org-element-context)))
    (if (eq 'link (org-element-type ct))
        (let ((link (org-element-property :raw-link ct)))
          (when link
            (let ((key (zotero-get-item-key-from-link link)))
              (if key
                  (gwp--ivy-action-open-attachments key)
                (error "Invalid zotero link!"))))))))

(defun gwp/org-open-zotero-related-at-point (arg)
  "Open related zotero items for zotero link at point"
  (interactive "P")
  (let ((ct (org-element-context)))
    (if (eq 'link (org-element-type ct))
        (let ((link (org-element-property :raw-link ct)))
          (when link
            (let ((key (zotero-get-item-key-from-link link)))
              (if key
                  (gwp--ivy-action-show-related-items key)
                (error "Invalid zotero link!"))))))))

(defun gwp/insert-new-zotero-item (arg)
  "Create a new zotero item (report)"
  (interactive "P")

  (let ((uri (zotero-create-new-note)))
    (if uri
        (progn
          (message "%s!" uri)
          (insert "[[" uri "][" "zotero-note" "]]"))
      (error "create zotero item failed!"))))

;; https://www.reddit.com/r/emacs/comments/f3o0v8/anyone_have_good_examples_for_transient/
(require 'transient)
(transient-define-prefix gwp/zotero-search-transient ()
  "Search zotero database"
  [["Search zotero items:"
    ("t" "search by tag" gwp/zotero-search-by-tag)
    ("c" "search by collection" gwp/zotero-search-by-collection)
    ("o" "open attachments at point" gwp/org-open-zotero-attachments-at-point)
    ("r" "open related items at point" gwp/org-open-zotero-related-at-point)
    ]]
  )
;; key bindings
(map! :map org-mode-map
      :localleader
      "z" #'gwp/zotero-search-transient
      "O" #'gwp/org-open-zotero-attachments-at-point)
#+end_src

*** zotero/link
#+name: 03af13ba
#+begin_src elisp
;; since org 9
(org-link-set-parameters "zotero" :follow #'gwp/org-zotero-open :export #'gwp/org-zotero-export)

(defun gwp/org-zotero-open (path)
  (setq url (format "zotero:%s" path))
  (browse-url url))
#+end_src

*** latex preview
默认公式预览图片太小, 改大一些([[https://emacs.stackexchange.com/questions/19880/font-size-control-of-latex-previews-in-org-files][URL]]).
- [[https://emacs.stackexchange.com/questions/30309/latex-preview-on-hidpi-display/30318#30318][LaTeX preview on HiDPI display - Emacs Stack Exchange]]
#+begin_src elisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.5))
#+end_src

*** keymap
#+name: 32a3b56a
#+begin_src elisp
(general-define-key :prefix-map 'gwp::org-link-map)

(map! :map gwp::org-link-map
      "l" #'org-insert-link
      "r" #'org-download-rename-at-point
      "D" #'gwp/org-delete-link-file
      )

(gwp::local-leader-def
 :keymaps 'org-mode-map
 [tab] '(org-next-link :which-key "goto next link")
 [backtab] '(org-previous-link :which-key "goto next link")

 "l" '(:keymap gwp::org-link-map :which-key "link")
 )
#+end_src

** note files
*** search all notes
搜索所有~/.cache/notes目录下所有.notes文件. 为了避免symlink文件不存在导致ivy报错,
我们使用自定义脚本ripgrep, 强制命令退出码为0. 注意~/.local/bin应在PATH变量中.

#+name: 21d90559
#+begin_src shell :tangle ~/.local/bin/ripgrep :shebang #! /bin/bash
/usr/bin/rg --follow "$@"

exit 0
#+end_src

#+name: 4971b464
#+begin_src emacs-lisp
;;;###autoload
(defun gwp/search-all-notes (&optional arg)
  "search all notes in ~/.cache/notes"
  (interactive)
  ;; (defun counsel-rg (&optional initial-input initial-directory extra-rg-args rg-prompt)
  (let ((counsel-rg-base-command (list
                                  "ripgrep"
                                  "-M" "240"
                                  "--with-filename"
                                  "--no-heading"
                                  "--line-number"
                                  "--color" "never"
                                  "%s")))
    (if arg
        (counsel-rg arg "~/.cache/notes")
      (counsel-rg "" "~/.cache/notes"))))
#+end_src

deadgrep与doom有冲突, 不能用了.
#+begin_src emacs-lisp :tangle no
(defun gwp/return-default-notes-dir ()
  "~/.cache/notes"
  )
(use-package! deadgrep
              :config
              (setq deadgrep-project-root-function #'gwp/return-default-notes-dir)
              )
#+end_src

*** find notes
#+name: 05419467
#+begin_src elisp
(defun gwp/find-file-in-notes ()
  "Find a file under `~/.cache/notes', recursively."
  (interactive) (doom-project-find-file "~/.cache/notes"))
#+end_src

*** org-noter/pdf-view
pdf-view-fit-width-to-window
#+name: 37fef008
#+begin_src elisp
(use-package! org-noter
  :custom
  (org-noter-default-notes-file-names '("annotation.note")))

(use-package! pdf-tools
  :custom
  ;; 一页页看更方便
  (pdf-view-continuous nil)
  :config
  ;; 容易被doom的pdf module中的设置覆盖, 以下直接在pdf/config.el中修改
  ;; (setq-default pdf-view-display-size 'fit-width)

  (map! :map pdf-view-mode-map
        ;; 鼠标操作
        [C-mouse-5] (cmd! (pdf-view-shrink 1.10))
        [C-mouse-5] (cmd! (pdf-view-shrink 1.10))
        [mouse-9] (cmd! (pdf-view-previous-page-command))
        [mouse-8] (cmd! (pdf-view-next-page-command))
        ;; 方便标注, 按d直接高亮选中文本
        :v "d" #'pdf-annot-add-highlight-markup-annotation
        ;; 方便单手操作
        :n "d" #'pdf-view-scroll-up-or-next-page
        :n "a" #'pdf-view-scroll-down-or-previous-page
        ;; org-noter很好用
        :localleader
        (:prefix ("n" . "org-noter")
         "n" #'org-noter
         "i" #'org-noter-insert-note
         "I" #'org-noter-insert-precise-note
         )))
#+end_src

*** capture
占位符:
| %:link                            | URL of the web-page                                  |
| %:description                     | The title of the web-page                            |
| %:initial / %i                    | Selected text.                                       |
| %x                                | Content of the X clipboard.                          |
| %(org-get-x-clipboard 'CLIPBOARD) | 强制使用X clipboard复制的内容, 而非primary clipboard |

#+begin_src emacs-lisp
(setq org-capture-templates
      '(
        ("n" "Note" entry (file "~/Notes/refile.note")
         "* %u %? %(org-get-x-clipboard 'CLIPBOARD)\n  %:initial\n" :prepend t)
        ("t" "Task" entry (file+headline "~/Notes/life.note" "Tasks")
         "* TODO %^T %? %(org-get-x-clipboard 'CLIPBOARD)\n  %i" :prepend t)
        ("r" "Research Memo" entry (file+headline "~/Notes/research.note" "Memo")
         "* %u %? %(org-get-x-clipboard 'CLIPBOARD)\n  %i\n" :prepend t)
        ("p" "Paper" entry (file+headline "~/Notes/research.note" "Literature")
         "* TODO %u %? %(org-get-x-clipboard 'CLIPBOARD)\n  %i\n" :prepend t)
        ("j" "Life Journal" entry (file+headline "~/Notes/life.note" "Journals")
         "* %u %? %(org-get-x-clipboard 'CLIPBOARD)\n  %i\n" :prepend t)
        ("N" "Note from protocol" entry (file "~/Notes/refile.note")
         "* %u %? [[%:link][%:description]]\n  %:initial\n" :prepend t)))
#+end_src

*** keymap
#+name: ac0d3d18
#+begin_src elisp
(general-define-key :prefix-map 'gwp::org-note-map)

(map! :map gwp::org-note-map
      "o" #'gwp::org-note::open-pdf
      "i" #'gwp::org-note::new-note
      "b" #'gwp::org-backlinks
      "s" #'org-sidebar-tree-toggle
      "n" #'gwp::org-note::dired-annotate-file-at-point
      )

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "n" '(:keymap gwp::org-note-map :which-key "note/noter")
 )
#+end_src

** export
*** zotero/export
支持 "zotero" 链接的点击行为及odt导出.

bibtex更新了item link的格式.
之前的:
: zotero://select/items/1_WZKAZKJG
新的
: zotero://select/items/6974

[[zotero://select/items/1_IIAJ9MX2][@Cao2011JMCC]]

#+begin_src emacs-lisp
(with-eval-after-load 'org-compat
  (defun gwp/org-zotero-export (path desc format)
    "Create the export version of zotero link specified by PATH and
DESC. FORMATs understood are 'odt','latex and 'html."
    (cond
     ((eq format 'html)
      (format "<a href=\"zotero:%s\">%s</a>" path desc))
     ((eq format 'latex)
      (format "\\href{zotero:%s}{%s}" path desc))
     ((eq format 'odt)
      ;; (format "<text:a xlink:type=\"simple\" xlink:href=\"zotero:%s\">%s</text:a>" path desc)
      (gwp/org-zotero-export-odt path desc)
      )
     (t desc)
     )
    )
  )

;;;; The magic string of zitem:
;; ZOTERO_ITEM CSL_CITATION
;; {
;; "properties": {
;; "formattedCitation": "[1]",
;; "plainCitation": "[1]"
;; },
;; "citationItems": [
;;                   {
;;                   "uri": [
;;                           "http://zotero.org/users/15074/items/S5JM4V35"
;;                           ]
;;                   }
;;                   ],
;; "schema": "https://github.com/citation-style-language/schema/raw/master/csl-citation.json"
;; } %s-rnd

;; adopted from https://www.mail-archive.com/emacs-orgmode@gnu.org/msg48905.html
(defun gwp/org-zotero-export-odt (path desc)
  (let
      ((refmark "<text:reference-mark-start text:name=\"%s\"/>%s<text:reference-mark-end text:name=\"%s\"/>")
       (zitem "ZOTERO_ITEM CSL_CITATION {
    &quot;properties&quot;: {
        &quot;formattedCitation&quot;: &quot;%s&quot;,
        &quot;plainCitation&quot;: &quot;%s&quot;
    },
    &quot;citationItems&quot;: [
        {
            &quot;uri&quot;: [
                &quot;http://zotero.org/users/15074/items/%s&quot;
            ]
        }
    ],
    &quot;schema&quot;: &quot;https://github.com/citation-style-language/schema/raw/master/csl-citation.json&quot;
} %s ")

       (item-key (car (cdr (split-string path "_"))))
       (rnd (concat "RND" (substring (org-id-new) -10))))
    (setq zitem
          (format zitem
                  desc
                  desc
                  item-key
                  rnd)
          )
    (setq desc (format "%s" desc))
    (format refmark zitem desc zitem))
  )

#+end_src

*** odt export
odt导出时, 图表默认以大纲级别来编号. 对于中文文档, 如果章节以中文一二三编号时,
图表编号默认为一.1, 二.3. 这很古怪, 还是取消的好.

odt使用dvipng导出公式时生成的图片分辨率太低, 这里放大3倍, 然后通过设置odt dpi为
300(默认为96), 将image缩小为原始大小.

注意latex公式图片对应的目录ltxpng在ox-odt.el代码里写死了, 没法修改为其它的.

#+name: 8fc79737
#+begin_src emacs-lisp
(use-package ox-odt
  :config
  (progn
    ;; continually numbering captions without outline level
    (setq org-odt-display-outline-level 0)

    ;; useful for odt export using dvipng
    (setq org-format-latex-options (plist-put org-format-latex-options :html-scale 3.0))
    (setq org-odt-pixels-per-inch 300.0)))
#+end_src

由于手动换行的原因, odt导出时, 中文字符间会有多余的空格. 下面的设置用于解决这个问题:
#+begin_src emacs-lisp
;; adopted from https://github.com/tumashu/emacs-helper/blob/master/eh-org.el
(defun gwp/clear-unwanted-space (text)
  "clear unwanted space when exporting org-mode to other formats"
  (let ((regexp "[[:multibyte:]]")
        (string text))
    ;; org-mode 默认将一个换行符转换为空格，但中文不需要这个空格，删除。
    (setq string
          (replace-regexp-in-string
           (format "\\(%s\\) *\n *\\(%s\\)" regexp regexp)
           "\\1\\2" string))
    ;; 删除粗体之后的空格
    (dolist (str '("</b>" "</code>" "</del>" "</i>"))
      (setq string
            (replace-regexp-in-string
             (format "\\(%s\\)\\(%s\\)[ ]+\\(%s\\)" regexp str regexp)
             "\\1\\2\\3" string)))
    ;; 删除粗体之前的空格
    (dolist (str '("<b>" "<code>" "<del>" "<i>" "<span class=\"underline\">"))
      (setq string
            (replace-regexp-in-string
             (format "\\(%s\\)[ ]+\\(%s\\)\\(%s\\)" regexp str regexp)
             "\\1\\2\\3" string)))
    string)
  )

(defun gwp/ox-odt-wash-text (text backend info)
  "导出 org file 时，删除中文之间不必要的空格。"
  (when (org-export-derived-backend-p backend 'odt 'html 'latex)
    (gwp/clear-unwanted-space text)
    )
  )

(add-hook 'org-export-filter-headline-functions #'gwp/ox-odt-wash-text)
(add-hook 'org-export-filter-paragraph-functions #'gwp/ox-odt-wash-text)
#+end_src

*** keymap
#+name: d7c4714d
#+begin_src elisp
(general-define-key :prefix-map 'gwp::org-export-map)

(map! :map gwp::org-export-map
      :desc "export dispatch" "e" #'org-export-dispatch
      )

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "e" '(:keymap gwp::org-export-map :which-key "export")
 )
#+end_src

** attach/agenda
*** setup
#+begin_src emacs-lisp
(require 'org-attach)
#+end_src

*** copy & paste attachments
#+name: aae629f1
#+begin_src emacs-lisp
(setq org-attach-store-link-p 'attached)
;; 子节点可使用父节点的 attach/ID 目录
(setq org-attach-use-inheritance t)

;; 1. store the ataach files into clipboard
(defun gwp/org-attach-copy (&optional force)
  "store org attachment directory of current enetry"
  (interactive "P")
  ;; make a temporary symlink to store the attachment path
  (if-let (attach-files (counsel-org-files))
      (let ((current-dir (if buffer-file-name (file-name-directory buffer-file-name) default-directory)))
        (zotero-attach-txclip-copy-files attach-files current-dir))
    (message "No attachment found")))

;; 2. paste the stored files to new location
(defun gwp/org-attach-paste (&optional force)
  "move stored attachments to current entry"
  (interactive "P")
  (let ((current-dir (file-name-directory buffer-file-name)))
    (zotero-attach-txclip-paste-files current-dir)))
#+end_src

**** old
:PROPERTIES:
:header-args: :tangle no
:END:
添加附件时生成指向附件的路径, 方便org-insert-link添加.

使用软链接保存当前entry的附件目录. 注意make-symbolic-link的特殊性:
- 如果dest是个目录, 会在目录下建立目录
- 如果dest是个文件或symlink, 会报错

file-exists-p函数对symlink的特殊性:
- 如果测试目标是个boken symlink, 该函数返回nil
- 此外后续再symlink, 仍然会报错.

#+begin_src emacs-lisp
;; 1. store the directory
(defun gwp/org-attach-copy (&optional force)
  "store org attachment directory of current enetry"
  (interactive "P")
  ;; make a temporary symlink to store the attachment path
  (setq file-attach-tmp (concat spacemacs-cache-directory ".gwp-attach-tmp"))
  (let ((attach-dir (org-attach-dir)))
    (when attach-dir
      (progn
        ;; remove existing directory
        (when (file-directory-p file-attach-tmp) (delete-directory file-attach-tmp t))
        ;; remove existing file and symlink
        (when (file-exists-p file-attach-tmp) (delete-file file-attach-tmp))
        ;; remove broken symlink
        (when (file-symlink-p file-attach-tmp) (delete-file file-attach-tmp))
        (make-symbolic-link attach-dir file-attach-tmp)
        (message (format "stored to: %s" file-attach-tmp))
        )
      )
    )
  )
#+end_src

从存储的软链接中读取之前的entry的附件, 并移动到当前entry的附件目录里.
#+begin_src emacs-lisp
;; 2. move the stored directory to new location
(defun gwp/org-attach-paste (&optional force)
  "move stored attachments to current entry"
  (interactive "P")
  ;; ~/.emacs.d/.cache/.gwp-attach-tmp
  (setq file-attach-tmp (concat spacemacs-cache-directory ".gwp-attach-tmp"))

  (if (file-exists-p file-attach-tmp)
      ;; create attachment directory if not exists using org-attach-dir function
      (let ((attach-dir (org-attach-dir t)))
        (progn
          ;; read old attach directory from previous stored symlink
          (setq attach-dir-old (file-chase-links file-attach-tmp))
          ;; sanity check
          (if (y-or-n-p (format "%s/* ==> %s ?" attach-dir-old attach-dir))
              (progn
                (shell-command (format "mv %s/* %s" attach-dir-old attach-dir))
                ;; remove stale tmp-link
                (delete-file file-attach-tmp)
                )
            (message "cancelled")
            )
          )
        )
    (message (format "no stored symbolic link found: %s" file-attach-tmp))
    )
  )
#+end_src

*** take file link as attachment
[2020-03-21 Sat] org里有对应的功能: [[file:doom-emacs/.local/straight/repos/org-mode/contrib/lisp/org-attach-embedded-images.el][org-attach-embedded-images.el]]
**** 从当前位置文件链接提取文件名.
#+name: b47bc445
#+begin_src emacs-lisp
(defun gwp/org-file-link-p (&optional element)
  (let ((el (or element (org-element-context))))
    (and (eq (org-element-type el) 'link)
         (or
          (string= (org-element-property :type el) "file")
          (string= (org-element-property :type el) "attachment")))))

(defun gwp/org-file-path-at-point()
  "get file path from link at point"
  (let ((el (org-element-context)))
    (when (eq (org-element-type el) 'link)
      (cond
       ((string= (org-element-property :type el) "file") (org-element-property :path el))
       ((string= (org-element-property :type el) "attachment") (org-attach-expand (org-element-property :path el)))
       (t nil)))))
#+end_src

**** 使用org-attach将文件move到当到附录中并更新文件链接
#+begin_src emacs-lisp
;; (require 'org-download)

(defun gwp/org-store-link-without-desc (file)
  "store file link without the description part -- a tweak to make odt image exporting correct."
  (setq org-stored-links
        (cons (list (org-attach-expand-link (file-name-nondirectory file)) "")
              org-stored-links)))

(defun gwp/org-take-as-local-attachment ()
  "move file link at point as local attachment"
  (interactive)
  (let ((file (gwp/org-file-path-at-point)))
    (if file
        (progn
          ;; 1. store the file using copy
          ;; or we can use the mv method: (org-attach-attach file nil 'mv)
          ;; do not store file link since it will corrupt odt image exporting
          (let ((org-attach-store-link-p nil))
            (org-attach-attach file))
          ;; 2. remove the old
          (call-interactively 'org-download-delete)
          ;; 3. insert the new
          ;; use file name as the default caption
          (gwp/org-insert-image-attributes (file-name-sans-extension (file-name-nondirectory file)))
          (insert "\n")
          (gwp/org-store-link-without-desc file)
          (call-interactively 'org-insert-last-stored-link)
          ;; refresh the image if possbile
          (org-display-inline-images))
      (user-error "Point is not on a link"))))
#+end_src

*** attach dir
:PROPERTIES:
:ID:       bb2e1c49-ddcf-4842-9c08-6cbfb4deb165
:END:
#+name: 55d587f4
#+begin_src elisp
(defun gwp/org-attach-auto-directory ()
  "为当前 headline 设置 DIR 属性 (基于 ID)"

  (interactive)
  (let* ((attach-dir (org-attach-dir-from-id (org-id-new)))
         (current-dir (file-name-directory (or default-directory
                                               buffer-file-name)))
         (attach-dir-relative (file-relative-name attach-dir current-dir)))
    (org-entry-put nil "DIR" attach-dir-relative)
    attach-dir))
#+end_src


*** agenda
基本设置
#+name: 43fd72e2
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org-agenda
  ;; 2013-01-20: less is more
  ;; (setq org-agenda-files (append (file-expand-wildcards "~/Notes/*.note") (file-expand-wildcards "~/Notes/*/*.note")))
  (setq org-agenda-files "~/Notes/.agenda_files")

  ;; the default is todo-start
  (setq org-icalendar-use-scheduled (quote (event-if-not-todo event-if-todo todo-start)))
  (setq org-icalendar-alarm-time 5)

  ;; Show all future entries for repeating tasks
  (setq org-agenda-repeating-timestamp-show-all t)

  ;; do not show agenda dates if they are empty
  (setq org-agenda-show-all-dates nil)

  ;; Sorting order for tasks on the agenda
  (setq org-agenda-sorting-strategy
        (quote ((agenda time-up priority-down category-up)
                (todo priority-down)
                (tags priority-down))))

  ;; Start the weekly agenda today
  (setq org-agenda-start-on-weekday nil)

  ;; do not include todo items
  (setq org-agenda-include-all-todo nil))
#+END_SRC

忽略已经完成的任务
#+begin_src emacs-lisp
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-scheduled-if-done t)
#+end_src

自定义agenda命令
#+begin_src emacs-lisp
(with-eval-after-load 'org-agenda
  (setq org-agenda-custom-commands
               '(
                 ("g" . "GTD contexts") ; description for "g" prefix
                 )
               )
  ;; project overview
  (add-to-list 'org-agenda-custom-commands
               '("gp" "Project"
                 (
                  (tags "Project+Action+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "Project\n------------------")
                         (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                         )
                        )
                  (tags "Action+Study+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "Topics\n------------------")
                         (org-agenda-files '("~/Notes/research.note"))
                         (org-agenda-sorting-strategy '(priority-down timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )
                  (tags "Action+TODO=\"TODO\""
                        (
                         (org-agenda-overriding-header "生活琐事\n------------------")
                         (org-agenda-files '("~/Notes/life.note"))
                         (org-agenda-sorting-strategy '(priority-down timestamp-up))
                         (org-agenda-max-entries 5)
                         )
                        )
                  ;; (tags "Computer+TODO=\"TODO\""
                  ;;       (
                  ;;        (org-agenda-overriding-header "电脑调优\n------------------")
                  ;;        (org-agenda-sorting-strategy '(priority-down timestamp-up))
                  ;;        (org-agenda-max-entries 5)
                  ;;        )
                  ;;       )
                  )
                 ;; options set here apply to the entire block
                 (
                  (org-tags-match-list-sublevels nil)
                  (org-agenda-prefix-format "%-20c ")
                  (org-agenda-todo-keyword-format "")
                  (org-agenda-remove-tags t)
                  (org-agenda-compact-blocks t)
                  )
                 )
               )

  (add-to-list 'org-agenda-custom-commands
               '("gr" "Reading"
                 (
                  (tags-todo "Reading|Read"
                             (
                              (org-agenda-overriding-header "待读列表\n------------------")
                              (org-agenda-sorting-strategy '(category-keep priority-down))
                              (org-agenda-remove-tags t)
                              (org-agenda-compact-blocks t)
                              )
                             )
                  (tags "REFILE"
                        (
                         (org-agenda-overriding-header "Tasks to Refile\n------------------")
                         (org-tags-match-list-sublevels nil)
                         )
                        )
                  )
                 ;; options set here apply to the entire block
                 ((org-agenda-compact-blocks t))
                 )
               )

  (add-to-list 'org-agenda-custom-commands
               '("gt" "Tasks"
                 (
                  (agenda ""
                          (
                           ;; (org-agenda-entry-types '(:deadline :scheduled))
                           (org-agenda-span (quote month)) ;; or (org-agenda-span 90)
                           (org-agenda-include-diary nil)
                           (org-agenda-overriding-header "Agenda\n------------------")
                           )
                          )
                  ;; (tags "ASAP+TODO=\"TODO\""
                  (tags-todo "ASAP"
                        (
                         (org-agenda-entry-types '(:timestamp))
                         (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                         (org-agenda-overriding-header "\nASAP\n------------------")
                         (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                         (org-agenda-max-entries 20)
                         (org-agenda-prefix-format "%-12c ")
                         (org-agenda-compact-blocks t)
                         )
                        )
                  )
                 ;; options set here apply to the entire block
                 (
                  (org-tags-match-list-sublevels nil)
                  ;; (org-agenda-files '("~/Notes/research.note" "~/Notes/life.note"))
                  (org-agenda-todo-keyword-format "")
                  (org-agenda-remove-tags t)
                  )
                 ;; agenda view exported with: Ctrl-C a e
                 ("~/Notes/agenda.html" "~/Notes/agenda.txt")
                 )
               )
  )
#+end_src

后台自动导出日程. 暂时禁用
#+BEGIN_SRC emacs-lisp :tangle no
;; disabled for upgrading to org-9.0
;; auto export agenda
(defun gwp/run-agenda-store ()
  ""
  (message "Exporting agenda... ")
  (org-batch-store-agenda-views)
  (message "Agenda exported."))

;; export agenda if I am away for 2 minutes
(run-with-idle-timer 600 t 'gwp/run-agenda-store)
#+END_SRC

闲时显示日程. 有兼容性问题, 暂时禁用.
#+begin_src emacs-lisp :tangle no
(use-package idle-org-agenda
  :after org-agenda
  :ensure t
  :config (idle-org-agenda-mode))

(custom-set-variables
 '(idle-org-agenda-interval 600) ;; 10 x 60 seconds
 '(idle-org-agenda-key "gt")     ;; Choose your specific agenda
 '(idle-org-agenda-mode t)
 )
#+end_src

*** keymap
#+name: c09b236a
#+begin_src elisp
(general-define-key :prefix-map 'gwp::org-attach-map)

(map! :map gwp::org-attach-map
       :desc "attachment" "a" #'org-attach
       :desc "set attach directory" "n" #'gwp/org-attach-auto-directory
      )

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "a" '(:keymap gwp::org-attach-map :which-key "attach/agenda")
 )
#+end_src
** goto
*** backlinks
:PROPERTIES:
:ID:       87c3209e-56e0-438e-bc9e-1a8143e22b9f
:END:
双向链接/反向链接是 roam research 里重要的特性.

[[https://github.com/landakram/org-z][landakram/org-z: Lightweight, Org-mode flavored zettelkasten links.]]

使用唯一的 ID 来管理 org heading 链接, 不依赖于文件名或 heading 字串, 可以保持链接的稳定性.
#+name: ac1d0086
#+begin_src elisp
(use-package org-id
  :custom
  (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
#+end_src

使用 counsel-org-link 也可用 ID 链接至本文档的 heading.

如何打开 ID 链接呢?
: org-id-track-globally
: org-link-parameters
: org-id-open
: org-id-find
: org-id-find-id-file
: org-id-locations-file

org 生成 ID 链接时, 会记录对应的文件路径, 然后在文件中搜索相应的 ID.
org-id-locations-file 默认在 ~/emacs/.org-id-locations

org 会自动扫描 org-directory 中的 org 文件, 找到有 ID 的文件名(org-id-find,
org-id-find-id-file).

ripgrep --files-with-matches "^\s*:ID: +ed7c"

以下代码用 patch 覆盖 org-id-find-id-file 函数, 让去从~/.cache/notes 下找?
#+name: 98fd4d7a
#+begin_src elisp
(require 'el-patch)
(defun gwp::org-id-find-id-file (id)
  (let* ((rg-command (format "ripgrep -l --color never -e '^\\s*:ID:\\s+%s' /home/ybyygu/.cache/notes" id))
         (output (shell-command-to-string rg-command))
         (file (car (split-string output "[\r\n]+" t))))
    ;; (message "%s" rg-command)
    file))

(el-patch-feature org-id)
(with-eval-after-load 'org-id
  (el-patch-defun org-id-find-id-file (id)
    "Query the id database for the file in which ID is located."
    (unless org-id-locations (org-id-locations-load))
    (or (and org-id-locations
             (hash-table-p org-id-locations)
             (gethash id org-id-locations))
        ;; Fall back on current buffer
        (or
         (gwp::org-id-find-id-file id)
         (buffer-file-name (or (buffer-base-buffer (current-buffer))
                               (current-buffer)))))))
#+end_src


org-sidebar 出现后可按在 item 上按 TAB 访问链接的文件位置(继承自 org-agenda?).

#+name: a4f269ca
#+begin_src elisp
(require 'org-sidebar)

(use-package org-sidebar
  :custom
  (org-sidebar-side 'left)                                                         ; 新版中 left 是默认
  (org-ql-sidebar-buffer-setup-hook nil)                                           ; 避免多行显示, 太乱
  (org-sidebar-default-fns '(gwp::org-sidebar--backlinks org-sidebar--todo-items)) ; 使用反链视图
  (org-sidebar-tree-jump-fn 'org-sidebar-tree-jump-source)                         ; 跳至源文件对应的位置, 而不是 narrowed heding
  :config
  ;; 避免误按
  (map! :map org-sidebar-tree-map
        [mouse-1] nil
        [drag-mouse-1] nil
        ))

;;;###autoload
(defun gwp::org-backlinks ()
  "显示指向当前 heading 的反向链接"
  (interactive)

  (let* ((org-sidebar-side 'right)
         (id (org-entry-get (point) "ID"))
         (custom-id (org-entry-get (point) "CUSTOM_ID"))
         (query (gwp::org-backlinks--get-query id custom-id)))
    (org-sidebar-ql (gwp::org-backlinks-search-files id)
      query :title (concat "Links to: " (org-get-heading t t)))))

(defun gwp::org-backlinks--get-query (id custom-id)
  (cond ((and id custom-id)
         ;; This will be slow because it isn't optimized to a single regexp.  :(
         (warn "Entry has both ID and CUSTOM_ID set; query will be slow")
         `(or (link :target ,(concat "id:" id))
              (link :target ,(concat "id:" custom-id))))
        ((or id custom-id)
         `(link :target ,(concat "id:" (or id custom-id))))
        (t (error "Entry has no ID nor CUSTOM_ID property"))))


;; reference:
;; (collection (funcall ffip-project-search-function cmd))
(defun gwp::org-backlinks-search-files (keyword)
  "搜索文件系统中所有的.note文件, 返回包含引用 keyword 的文件名"
  (let* (
         (rg-command (format "ripgrep -l --color never -e %s /home/ybyygu/.cache/notes" keyword))
         (output (shell-command-to-string rg-command))
         (collection (split-string output "[\r\n]+" t))
         result)
    ;; (message "shell output:\n%s\nshell output ends here" output)
    (dolist (file collection result) (push file result))
    result))

(defun gwp::org-sidebar--backlinks (source-buffer)
  "在 org-sidebar 中显示 backlinks buffer"
  (let* ((display-buffer (generate-new-buffer (format "org-sidebar<%s>" (buffer-name source-buffer))))
         (title (propertize (concat "反链条目: " (buffer-name source-buffer)) 'help-echo "含有指向当前heading链接的条目"))
         (id (org-entry-get (point) "ID"))
         (custom-id (org-entry-get (point) "CUSTOM_ID"))
         (source-buffers (gwp::org-backlinks-search-files id))
         query)
    (with-current-buffer display-buffer
      (setf org-sidebar-source-buffer source-buffer))

    ;; 如果当前 heading 无 ID, 不报错
    (condition-case err
        (setq query (gwp::org-backlinks--get-query id custom-id))
      (error
       (message "%s" (error-message-string err))
       (setq source-buffers nil)))
    (org-ql-search source-buffers
      query
      :buffer display-buffer
      :title title)

    display-buffer))
#+end_src

*** keymap
#+name: aa6a42b8
#+begin_src elisp
(general-define-key :prefix-map 'gwp::org-goto-map)

(map! :map gwp::org-goto-map
      :desc "previous position"
      "p" #'org-mark-ring-goto
      :desc "标记位置"
      "m" #'org-mark-ring-push
      :desc "Jump to org heading"
      "g" #'counsel-org-goto
      :desc "跳转至代码块"
      "b"   #'gwp/org-jump-block/body
      :desc "跳转至链接"
      "l"   #'gwp/org-jump-link/body
      :desc "跳转至 tangled 代码文件"
      "t"   #'gwp/org-babel-tangle-jump-to-file
      )

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "g" '(:keymap gwp::org-goto-map :which-key "goto/jump")
 )
#+end_src
** dwim/enter
优化最常用的按键
*** enter-at-point
+org/dwim-at-point, 在org-src环境, 直接编辑代码, 而非执行

#+name: fbbec921
#+begin_src elisp
;; 取自doom org moudle
(defun gwp::org-dwim-at-point (&optional arg)
  "Do-what-I-mean at point.

If on a:
- checkbox list item or todo heading: toggle it.
- clock: update its time.
- footnote reference: jump to the footnote's definition
- footnote definition: jump to the first reference of this footnote
- table-row or a TBLFM: recalculate the table's formulas
- table-cell: clear it and go into insert mode. If this is a formula cell,
  recaluclate it instead.
- babel-call: edit org-src
- statistics-cookie: update it.
- latex fragment: toggle it.
- link: follow it
- otherwise, refresh all inline images in current tree."
  (interactive "P")
  (if (button-at (point))
      (call-interactively #'push-button)
    (let* ((context (org-element-context))
           (type (org-element-type context)))
      ;; skip over unimportant contexts
      (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
        (setq context (org-element-property :parent context)
              type (org-element-type context)))
      (pcase type
        (`clock (org-clock-update-time-maybe))

        (`footnote-reference
         (org-footnote-goto-definition (org-element-property :label context)))

        (`footnote-definition
         (org-footnote-goto-previous-reference (org-element-property :label context)))

        ((or `planning `timestamp)
         (org-follow-timestamp-link))

        (`babel-call
         (org-babel-lob-execute-maybe))

        (`statistics-cookie
         (save-excursion (org-update-statistics-cookies arg)))

        ;; Hacked by ybyygu at 2021-04-13
        ((or `src-block `inline-src-block)
         (org-edit-special arg))

        ((or `latex-fragment `latex-environment)
         (org-latex-preview arg))

        (`link
         (let* ((lineage (org-element-lineage context '(link) t))
                (path (org-element-property :path lineage)))
           (if (or (equal (org-element-property :type lineage) "img")
                   (and path (image-type-from-file-name path)))
               (org-toggle-inline-images)
             ;; 强制在本窗口打开
             (let ((current-prefix-arg '(16)))     ; C-u C-u
               (call-interactively #'gwp::org-open-at-point-dwim)))))

        ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
         (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
           (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

        (_
         (if (or (org-in-regexp org-ts-regexp-both nil t)
                 (org-in-regexp org-tsr-regexp-both nil  t)
                 (org-in-regexp org-link-any-re nil t))
             (call-interactively #'org-open-at-point)
           ;; (+org--toggle-inline-images-in-subtree
           ;;  (org-element-property :begin context)
           ;;  (org-element-property :end context))
           ))))))
#+end_src


*** open-at-point
默认在另一窗口打开链接, 如果使用C-u参数, 则强制在本窗口打开.
#+name: 2f61258f
#+begin_src elisp
;; https://stackoverflow.com/questions/17590784/how-to-let-org-mode-open-a-link-like-file-file-org-in-current-window-inste
;; Depending on universal argument try opening link
(defun gwp::org-open-at-point-dwim (&optional arg)
  (interactive "P")
  (cond
   ((equal arg '(16))                    ; C-u C-u
    (let ((org-link-frame-setup (quote ((file . find-file)))))
      (org-open-at-point)))
   ((equal arg '(4))                     ; C-u
    (let ((org-link-frame-setup (quote ((file . find-file-other-frame)))))
      (org-open-at-point)))
   (t                                   ; the default behavior
    (let ((org-link-frame-setup (quote ((file . find-file-other-window)))))
      (org-open-at-point)
      (golden-ratio)))))

;; 注释代码时, 在org code block下特殊处理. 不然光标会跳开很远.
(defun gwp/comment-or-uncomment-dwim ()
  (interactive)
  (save-excursion
    (if (org-in-src-block-p)
        (progn
          (org-edit-src-code)
          (call-interactively 'evilnc-comment-or-uncomment-lines)
          (org-edit-src-exit))
      (call-interactively 'evilnc-comment-or-uncomment-lines))))

;; 覆盖默认按键
(map! :map org-mode-map "C-c C-o" #'gwp::org-open-at-point-dwim)
(map! :map org-mode-map
      :localleader
      "o" #'gwp::org-open-at-point-dwim)
#+end_src
*** keymap
#+name: c99c78d1
#+begin_src elisp
;; (map! :map org-mode-map
;;       [return]   #'gwp::org-dwim-at-point
;;       "RET"      #'gwp::org-dwim-at-point)

;; 避免与 org-sidebar 的设置冲突
(map! :map org-sidebar-tree-map
      [return] nil)

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "RET"    #'gwp::org-dwim-at-point
 [return] #'gwp::org-dwim-at-point
 )

(gwp::dwim-leader-def
 :keymaps 'org-mode-map
 "g" 'counsel-org-goto                        ; goto
 "t" 'org-todo                                ; todo
 "b" 'gwp/org-babel-tangle-dwim               ; babel
 "e" 'org-edit-special                        ; edit
 "a" 'org-attach                              ; attach
 "n" 'gwp::org-babel-narrow-to-tangle-heading ; narrow
 )

(gwp::dwim-leader-def
 :keymaps 'org-src-mode-map
 "b" 'gwp/org-babel-tangle-dwim
 "q" 'org-edit-src-exit
 )
#+end_src

** misc
*** encryption
#+name: e121f679
#+begin_src emacs-lisp
(require 'org-crypt)
(require 'epa-file)
(epa-file-enable)

;; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-crypt-tag-matcher "crypt")
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; GPG key to use for encryption
(setq org-crypt-key "38D95BC6411A87E7") ; ybyygu@gmail.com
(setq org-crypt-disable-auto-save nil)
#+end_src

*** protocol
#+name: d3403c99
#+begin_src elisp
(require 'org-protocol)
#+end_src

*** read/done
:PROPERTIES:
:header-args: :tangle no
:END:
基本弃用. 有待改进.
#+begin_src elisp
(defun gwp/enter-to-read-state()
  "evoke external shell script when entering READ state"
  (when (equal org-state "READ")
    (setq file (gwp/get-org-file-link-path))
    (if file
        (progn
          (setq cmd (concat "org-to-read.sh " (shell-quote-argument file)))
          (message cmd)
          (shell-command cmd))))
  (when (equal org-last-state "READ")
    (message "try to remove READ state")
    (setq file (gwp/get-org-file-link-path))
    (if file
        (progn
          (setq cmd (concat "org-read-done.sh " (shell-quote-argument file)))
          (message cmd)
          (shell-command cmd)))))
(add-hook 'org-after-todo-state-change-hook 'gwp/enter-to-read-state)

;; show a sparse-tree in READ keyword
(defun gwp/org-show-read-tree ()
  "show a sparse-tree in READ keyword"
  (interactive)

  (let ((base-vector [?\C-u ?\M-x ?o ?r ?g ?- ?s ?h ?o ?w ?- ?t ?o ?d ?o ?- ?t ?r ?e ?e return ?R ?E ?A ?D return]))
    ;; create new macro of the form
    ;; C-u M-x org-show-todo-tree RET READ RET
    (execute-kbd-macro (vconcat base-vector
                                (vector 'return)))))
#+end_src

*** org-file-apps
org-open-file调用pdf-tools打开PDF文件
#+begin_src elisp
(add-to-list 'org-file-apps
             '("\\.pdf\\'" . (lambda (file link)
                               (org-pdftools-open link))))
#+end_src

** bindings
*** core
#+name: 917381e9
#+begin_src elisp
;; 2021-10-20: 可用 gwp::local-leader-def 来代替
;; 定义一些特别常用的命令, 仅在org-mode中显示
;; (defun gwp/org-mode-keys-hook ()
;;   ;; (evil-local-set-key 'normal (kbd "SPC RET") '+org/dwim-at-point)
;;   ;; (evil-local-set-key 'normal (kbd "SPC j t") 'gwp/org-babel-tangle-jump-to-file)
;;   ;; (evil-local-set-key 'normal (kbd "SPC d d") 'gwp/org-babel-tangle-dwim)
;; )
;; (add-hook 'org-mode-hook 'gwp/org-mode-keys-hook)
;; (defun gwp/org-src-mode-keys-hook ()
;;   (evil-local-set-key 'normal (kbd "SPC d d") 'gwp/org-babel-tangle-dwim))
;; (add-hook 'org-src-mode-hook 'gwp/org-mode-keys-hook)

;; [2021-10-04 Mon] leader map是全局性的, 不能动态加载和卸载
;; (map! :mode org-mode
;;       :leader
;;       ;; :when (equal major-mode 'org-mode)
;;       :desc "tangle blocks at point"      "o b" #'gwp/org-babel-tangle-dwim
;;       ;; :desc "execute in edit buffer"      "SPC" #'org-babel-do-key-sequence-in-edit-buffer
;;       ;; :desc "org-babel"                   "a"   org-babel-map;  换个容易按的键位
;;       :desc "Enter-dwim"                  "RET" #'+org/dwim-at-point
;;       )
#+end_src

*** tweaks
#+name: d3c71916
#+begin_src elisp
;; 经常按错这个键, 禁用之 (Ctrl-c ;)
(put 'org-toggle-comment 'disabled t)
(define-key! :keymaps 'org-mode-map "C-a" #'crux-move-beginning-of-line)

;; 保留以前的 Alt-Return 键行为, Alt-Return
(org-defkey org-mode-map [(meta return)] 'org-meta-return)
#+end_src


*** move/movment
#+name: bbdcd834
#+begin_src elisp
(gwp::goto-leader-def
 :keymaps 'org-mode-map
 "e" '(end-of-buffer :which-key "last line")
 "h" '(org-beginning-of-line :which-key "goto the beginning of visible line")
 "l" '(org-end-of-line :which-key "goto the end of visible line")
 "k" '(org-up-element :which-key "goto up element")
 "j" '(org-next-visible-heading :which-key "next visible heading")
 "g" '(beginning-of-buffer :which-key "first line")
 ;; "C-w" '(beginning-of-buffer :which-key "first line")
 ;; "k" '(org-backward-heading-same-level :which-key "backward heading")
 ;; "j" '(org-forward-heading-same-level :which-key "forward heading")
 )

(map! :map org-mode-map
      "M-l" #'org-metaright   ; doom中默认为 demote-subtree
      "M-h" #'org-metaleft    ; doom中默认为 promote-subtree
      "M-k" #'org-metaup
      "M-j" #'org-metadown
      "M-p" #'org-backward-element
      "M-n" #'org-forward-element
      )
#+end_src
** packages.el
:PROPERTIES:
:header-args: :tangle modules/gwp/org/packages.el
:END:
#+name: bec6705d
#+begin_src elisp
(package! org)
(package! org-superstar)
(package! org-pdftools)
(package! org-download)
(package! org-noter)
(package! org-sidebar)
(package! el-patch)

;; for http api hacking
(package! restclient)
(package! ob-restclient)

(package! org-contrib
  :recipe (:host nil :repo "https://git.sr.ht/~bzg/org-contrib"))

;; for org-babel gnuplot
(package! gnuplot-mode)
(package! gnuplot)
#+end_src
* develop
:PROPERTIES:
:header-args: :tangle modules/gwp/develop/config.el
:END:
** magit
#+name: 8f612833
#+begin_src elisp
(require 'init-magit)
#+end_src

** completion
关于 [[https://github.com/universal-ctags/citre/blob/master/docs/user-manual/citre-peek.md][citre-peek]]
: M-n, M-p: Next/prev line.
: M-N, M-P: Next/prev definition.
: M-l j: Jump to the definition.
: C-g: Close the peek window.

#+name: d28bc89a
#+begin_src elisp
;; Use hippie-expand instead of dabbrev-expand
;; (global-set-key (kbd "M-/") #'dabbrev-expand)
(global-set-key (kbd "M-/") #'hippie-expand)
;; the same behavior as the original `dabbrev-expand'
(setq hippie-expand-dabbrev-skip-space t)

;; adjust the list of functions that hippie-expand will try
(setq hippie-expand-try-functions-list
      '(
        try-expand-dabbrev-visible      ; first try the expansions from the currently visible parts
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-line
        try-expand-dabbrev-from-kill
        ;; try-expand-all-abbrevs
        ;; try-expand-list
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol
        ))

(after! company
  (setq company-idle-delay 1.5
        company-minimum-prefix-length 2))

(use-package! citre
  :defer t
  :init
  ;; This is needed in `:init' block for lazy load to work.
  (require 'citre-config)
  (map! :leader
        (:prefix-map ("j" . "jump")
         (:prefix-map ("c" . "citre")
          :desc "citre jump to definition"                    "d" #'citre-jump
          :desc "citre jump back"                             "b" #'citre-jump-back
          :desc "citre peek"                                  "p" #'citre-peek
          ))))
#+end_src

** vc commit
自动更新时间戳
#+name: 3ac9a958
#+BEGIN_SRC emacs-lisp
(use-package vc
  :init
  (add-hook 'vc-before-checkin-hook #'time-stamp))

(use-package vc-hooks
  :init
  ;; Don't ask if I want to visit a sym-linked file under VC. I always want to!
  (setq vc-follow-symlinks t))
#+END_SRC

** TODO find file in project
- [[https://github.com/redguardtoo/find-file-in-project][redguardtoo/find-file-in-project: Quick access to project files in Emacs]]

#+name: 81cb1ab5
#+begin_src elisp
(use-package find-file-in-project
  :config
  (setq ffip-use-rust-fd t))
#+end_src

:PROPERTIES:
:header-args: :tangle no
:END:
** TODO rust-mode
*** task [0/2]
- [ ] (define-key rust-mode-map (kbd "C-c C-c") 'rust-run)
- [ ] [[https://github.com/ayrat555/cargo-mode][ayrat555/cargo-mode: Emacs minor mode which allows to dynamically select cargo command]]

*** docs
- 关于补全: lsp/rust-analyze太重了, racer更简单一些.
- 解决花括号中 "{|}" 中换行行为, 与spacemacs保持一致.
- https://emacs.stackexchange.com/questions/2837/automatically-formatting-brackets

重要资源
- [[https://github.com/rust-lang/rust-mode][rust-lang/rust-mode]]
- rustic相关 [[https://github.com/brotzeit/rustic][brotzeit/rustic: Rust development environment for Emacs]]
  (rustic-mode以后会是依赖于rust-mode的增强版 [[https://github.com/rust-lang/rust-mode/issues/405][Towards making rustic use rust-mode #405]])

*** edit
#+begin_src emacs-lisp
(after! smartparens
  (sp-local-pair 'rust-mode "{" nil :post-handlers '(:add ("||\n[i]" "RET")))
  ;; Rust closure中使用
  (sp-with-modes '(rust-mode)
    (sp-local-pair "|" "|"))
  )

(add-hook 'rust-mode-hook
          (lambda () (require 'smartparens-rust)))

(after! org-src
  (add-to-list 'org-src-lang-modes '("rust" . rust)))
#+end_src

*** cargo/rust-mode
使用 rust-mode中的cargo
- [[https://github.com/rust-lang/rust-mode/blob/master/rust-compile.el][rust-mode/rust-compile.el]]

基于compilation mode定制
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html][Compilation Mode - GNU Emacs Manual]]

以下自定义cargo命令, 比在term下执行更好一些.
- 使用Alt-n, Alt-p可以快速定位error或warning 或C-j, C-k
- 链接到的src文件可直接打开.

现有如下问题, 导致编译buffer无法基于出错信息跳转到对应文件:
- [[https://github.com/rust-lang/cargo/issues/5895][Error messages use relative paths differently if in a workspace · Issue #5895 · rust-lang/cargo]]

为此, 我们需要cargo.sh, 包装下cargo命令, 在emacs调用前, 切到workspace根目录, 但执行cargo时再换为到原buffer对应目录.
这样, 可仅编译当前包, 无不是所有workspace中的包, 同时还能解决error跳转的问题.

cargo默认输出warning太多, 以下命令调用cargo, 但忽略warnings. 同时编译信息里强制输出文件全路径

#+begin_src shell :tangle ~/.local/bin/cargo.sh :shebang #! /bin/bash
# a wrapper for cargo command to work around a cargo issue:
# https://github.com/rust-lang/cargo/issues/5450#issuecomment-732954248

# goto current workspace memeber directory
cd "$1"
shift

# supress warnings and print full file paths in compilation
export RUSTFLAGS="$RUSTFLAGS -Awarnings"
cargo $@
#+end_src

#+begin_src elisp
(require 'rust-mode)
(require 'cargo)

;; taken from rust-cargo.el
(defun gwp/cargo-compile (args)
  ;; taken from cargo.el
  ;;
  ;; workaround cargo issue: https://github.com/rust-lang/cargo/issues/5895
  ;;
  ;; to make "jump-to-error" work, we need start compilation in workspace root dir
  (let (
        ;; save current directory
        (old-directory default-directory)
        (default-directory (or (cargo-process--workspace-root)
                               default-directory))
        )
    (compile (format "cargo.sh \"%s\" %s" old-directory args))
    ))

(defun gwp/rust-cargo-tangle-watch-check ()
  "Compile using `cargo watch and check`
The org src will be tangled first before compiling.
"
  (interactive)
  (gwp/org-babel-tangle-dwim)
  (gwp/rust-cargo-watch-check))

(defun gwp/rust-cargo-watch-check ()
  "Compile using `cargo watch and check`
"
  (interactive)
  (gwp/cargo-compile "check -q"))

(defun gwp/rust-cargo-tangle-watch-test ()
  "Compile using `cargo watch and test`
The org src will be tangled first before compiling.
"
  (interactive)
  (gwp/org-babel-tangle-dwim)
  (gwp/rust-cargo-watch-test))

(defun gwp/rust-cargo-watch-test ()
  "Compile using `cargo watch and test`
The org src will be tangled first before compiling.
"
  (interactive)
  (gwp/cargo-compile "d"))

(defun gwp/rust-cargo-update ()
  "Execute `cargo update` command"
  (interactive)
  (gwp/cargo-compile "update"))

(defun gwp/rust-cargo-doc-open ()
  "Execute `cargo doc --open` command"
  (interactive)
  (gwp/cargo-compile "doc --open --no-deps"))

(defun gwp/rust-cargo-edit-upgrade ()
  "Execute `cargo upgrade --dry-run` command"
  (interactive)
  (gwp/cargo-compile "upgrade --dry-run"))

;; ;; 修改popup window, 放大一些, 方便查看.
;; (set-popup-rule! "^\\*compilation\\*" :size 0.85 :quit t :select t :ttl nil)
;; gwp/org-babel-tangle-dwim

(require 'transient)
(transient-define-prefix gwp/rust-cargo-transient ()
  "rust development tools"
  [["compile org src:"
    :if org-in-src-block-p
    ("o b" "tangle src only" gwp/org-babel-tangle-dwim)
    ("o c" "tangle src & cargo check" gwp/rust-cargo-tangle-watch-check)
    ("o t" "tangle src & cargo test" gwp/rust-cargo-tangle-watch-test)
    ]]
  [["compile rust project:"
    ("c" "cargo check" gwp/rust-cargo-watch-check)
    ("t" "cargo test" gwp/rust-cargo-watch-test)
    ("d" "cargo doc" gwp/rust-cargo-doc-open)
    ("u" "cargo update" gwp/rust-cargo-update)
    ("U" "cargo upgrade" gwp/rust-cargo-edit-upgrade)
    ]]
  )

(map! :map org-mode-map
      :localleader
      "1" #'gwp/rust-cargo-transient
      )
(map! :map rust-mode-map
      :localleader
      "1" #'gwp/rust-cargo-transient
      )
#+end_src

*** cargo/cargo.el
:PROPERTIES:
:header-args: :tangle no
:END:
- [[https://github.com/kwrooijen/cargo.el][kwrooijen/cargo.el: Emacs Minor Mode for Cargo, Rust's Package Manager.]]

[2021-09-20 Mon] 这里的问题: 执行时会切到workspace root执行, 如果hack后, 就与rust-mode中的功能相当了.

cargo命令如果使用C-u 调用, 可在minibuffer中修改cargo参数.

以下自定义cargo-watch命令, 比在term下执行更好一些.
- p, n来跳转到前一个或下一个error
- 使用Alt-n, Alt-p可以快速定位error或warning 或C-j, C-k
- 链接到的src文件可直接打开.
- 按q退出

使用el-path修改cargo-process调用方式, 不要切换至workspace根目录执行cargo命令, 更
匹配命令行使用习惯.
#+begin_src elisp
(eval-when-compile (require 'el-patch))

(use-package cargo
  :defer t
  :hook (rust-mode . cargo-minor-mode)
  :custom
  (cargo-process--custom-path-to-bin "cargo.sh")
  (cargo-process--command-check "check -q")
  (cargo-process--command-test "test -- --nocapture --test-threads=1")
  ;;   :config/el-patch
  ;;   (defun cargo-process--start (name command &optional last-cmd opens-external)
  ;;     "Start the Cargo process NAME with the cargo command COMMAND.
  ;; OPENS-EXTERNAL is non-nil if the COMMAND is expected to open an external application.
  ;; Returns the created process."
  ;;     (set-rust-backtrace command)
  ;;     (let* ((buffer (concat "*Cargo " name "*"))
  ;;            (project-root (cargo-process--project-root))
  ;;            (cmd
  ;;             (or last-cmd
  ;;                 (cargo-process--maybe-read-command
  ;;                  (cargo-process--augment-cmd-for-os opens-external
  ;;                                                     (mapconcat #'identity (list (shell-quote-argument cargo-process--custom-path-to-bin)
  ;;                                                                                 command
  ;;                                                                                 ;; (manifest-path-argument name)
  ;;                                                                                 cargo-process--command-flags)
  ;;                                                                " ")))))
  ;;            ;; (default-directory (or project-root default-directory))
  ;;            )
  ;;       (save-some-buffers (not compilation-ask-about-save)
  ;;                          (lambda ()
  ;;                            (and project-root
  ;;                                 buffer-file-name
  ;;                                 (string-prefix-p project-root (file-truename buffer-file-name)))))
  ;;       (setq cargo-process-last-command (list name command cmd))
  ;;       ;; (let ((default-directory (or (cargo-process--workspace-root)
  ;;       ;;                              default-directory)))
  ;;       ;;   (compilation-start cmd 'cargo-process-mode (lambda(_) buffer)))
  ;;       (compilation-start cmd 'cargo-process-mode (lambda(_) buffer))
  ;;       (let ((process (get-buffer-process buffer)))
  ;;         (set-process-sentinel process 'cargo-process--finished-sentinel)
  ;;         process)))

  :init
  (add-hook 'conf-toml-mode-hook 'cargo-minor-mode) ; when edit Cargo.toml
  )

(require 'cargo)
(require 'transient)
(transient-define-prefix gwp/rust-cargo-transient ()
  "Search zotero database"
  [["Search zotero items:"
    ("c" "cargo check" cargo-process-check)
    ("t" "cargo test" cargo-process-test)
    ("u" "cargo update" cargo-process-update)
    ("d" "cargo doc" cargo-process-doc-open)
    ]]
  )

(map! :map org-mode-map
      :localleader
      "1" #'gwp/rust-cargo-transient
      )
(map! :map rust-mode-map
      :localleader
      "1" #'gwp/rust-cargo-transient
      )
#+end_src

*** racer
用于自动补全, 比lsp更轻便些.
#+begin_src elisp
(use-package cargo
  :defer t
  :init
  (progn
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (add-hook 'racer-mode-hook #'company-mode)
    ))
#+end_src

*** rust-format
rust版比doom版的更好, 可自动跳转到出错点(c-c c-n)
#+name: 151a16d0
#+begin_src elisp
(map! :map rust-mode-map
      :localleader
      "f" #'rust-format-buffer
      "C-f" #'rust-format-buffer
      "=" #'rust-format-buffer)

(use-package rust-mode
  :hook (rust-mode . gwp/override-doom-format-buffer)
  )

(defun gwp/override-doom-format-buffer ()
  (evil-local-set-key 'normal (kbd "SPC =") 'rust-format-buffer)
  ;; 无效
  ;; (evil-local-set-key 'normal (kbd "SPC c f") 'rust-format-buffer)
  )

(gwp::dwim-leader-def
  :keymaps 'rust-mode-map
  "f" 'rust-format-buffer
  )
#+end_src

*** edit
#+name: 72f0d377
#+begin_src elisp
(defun gwp/rust-insert-option (&optional result)
  "Insert the Option type."
  (interactive)

  (when (region-active-p)
    (sp-wrap-with-pair "<")
    (backward-char)
    (insert (or result "Option"))
    ))

(defun gwp/rust-unwrap-option (&optional result)
  "Remove Option type wrapper"
  (interactive)

  (when (region-active-p)
    (when (> (mark) (point))
      (exchange-point-and-mark))
    (sp-unwrap-sexp)
    (when (search-backward (or result "Option") (line-beginning-position) t)
      (delete-region (match-beginning 0) (match-end 0))
      )))


;; https://github.com/Wilfred/.emacs.d/blob/gh-pages/user-lisp/rust-customisations.el
(defun gwp/rust-toggle-pub ()
  "Toggle the public visibility of the function at point."
  (interactive)
  (save-excursion
    ;; If we're already at the beginning of the function definition,
    ;; `beginning-of-defun' moves to the previous function, so move elsewhere.
    (end-of-line)
    (beginning-of-defun)
    (if (looking-at "pub ")
        (delete-char 4)
      (insert "pub "))))

(defun gwp/rust-insert-result ()
  (interactive)
  (gwp/rust-insert-option "Result"))

(defun gwp/rust-unwrap-result ()
  (interactive)
  (gwp/rust-unwrap-option "Result"))

(transient-define-prefix gwp/rust-edit-transient ()
  "rust development tools"
  [["Result"
    ("o" "Wrap in Option" gwp/rust-insert-option)
    ("u" "Unwrap Option" gwp/rust-unwrap-option)
    ]]
  [["Result"
    ("r" "Wrap in Result" gwp/rust-insert-result)
    ("k" "Unwrap Result" gwp/rust-unwrap-result)
    ]]
  [["Pub"
    ("p" "toggle pub at point" gwp/rust-toggle-pub)
    ]]
  )

;; (defhydra gwp/rust-edit-hydra ()
;;   ("o" gwp/rust-insert-option "wrap with Option")
;;   ("u" gwp/rust-unwrap-option "unwrap Option")
;;   ("q" nil "quit")
;;   )

(map! :map rust-mode-map
      :localleader
      "e" #'gwp/rust-edit-transient
      :desc "select inner type" "m" (general-simulate-key "vi<")
      )
#+end_src

xx <=> Option<xx>

** rustic-mode
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src elisp
(use-package rustic
  :custom
  (rustic-lsp-client nil)
  (rustic-format-on-save nil)
  (rustic-display-spinner nil)
  )
#+end_src

** python
[[file:doom-emacs/modules/tools/eval/README.org::+TITLE: tools/eval]]

: SPC-o-r 打开repl
: SPC-c-s send-region
默认的挺难用的
#+begin_src elisp :tangle no
(after! python
  (setq python-shell-interpreter "ipython"))
#+end_src

使用tmux/ipython组合来实现

#+name: 44b70ed9
#+begin_src elisp
(defun gwp/tmux-ipython-paste-region (beg end &optional region)
  "Execute \"%paste\" in tmux session"
  (interactive "r")
  (kill-ring-save beg end)
  (+tmux/run "%paste"))
#+end_src

** fortran
emacs 默认设置对 fortran 代码支持不好

#+name: 13061ec7
#+begin_src elisp
(setq fortran-continuation-string "&")
(setq fortran-do-indent 2)
(setq fortran-if-indent 2)
(setq fortran-structure-indent 2)

;; Fortran 90 settings
(setq f90-do-indent 2)
(setq f90-if-indent 2)
(setq f90-type-indent 2)
(setq f90-program-indent 2)
(setq f90-continuation-indent 4)
(setq f90-smart-end 'blink)

;; Set Fortran and Fortran 90 mode for appropriate extensions
(setq auto-mode-alist
      (cons '("\\.F90$" . f90-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.pf$" . f90-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.fpp$" . f90-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.F$" . f90-mode) auto-mode-alist))

;; Swap Return and C-j in Fortran 90 mode
(add-hook 'f90-mode-hook
	  '(lambda ()
	     (define-key f90-mode-map [return] 'f90-indent-new-line)
	     (define-key f90-mode-map "\C-j" 'newline)
	     (setq fill-column 180)
             (abbrev-mode)
             (setq-default indent-tabs-mode nil)
             (setq whitespace-line-column 180)
             (setq whitespace-style '(face tabs lines-tail empty))
             (whitespace-mode)
             ;;         (add-to-list 'write-file-functions 'delete-trailing-whitespace)
	     ))
#+end_src

** TODO nav
#+name: d95b49c5
#+begin_src elisp
(use-package block-nav
  :custom
  (block-nav-skip-comment t)
  (block-nav-move-skip-shallower  t)
  :config
  (map! :n "M-n" #'block-nav-next-block)
  (map! :n "M-p" #'block-nav-previous-block)
  (map! :n "M-l" #'block-nav-next-indentation-level)
  (map! :n "M-h" #'block-nav-previous-indentation-level)
  )
#+end_src

** TODO imenu
- [[https://emacs.stackexchange.com/questions/30673/next-prev-imenu-item-function/33747#33747][motion - next/prev-imenu-item function - Emacs Stack Exchange]]
- 也可以参考这个改(基于 counsel) [[file:redguardtoo-emacs.d/lisp/init-utils.el::defun my-closest-imenu-item-internal][my-closest-imenu-item-internal]]

#+name: f28734ed
#+begin_src elisp
;; https://emacs.stackexchange.com/a/33747
(defun gwp::imenu-goto--closest-dir (direction)
  "Jump to the closest imenu item on the current buffer.
If direction is 1, jump to next imenu item.
If direction is -1, jump to previous imenu item.
See https://emacs.stackexchange.com/questions/30673
Adapted from `which-function' in::
https://github.com/typester/emacs/blob/master/lisp/progmodes/which-func.el"
  ;; Ensure `imenu--index-alist' is populated.
  (imenu--make-index-alist)

  (let ((alist imenu--index-alist)
        (minoffset (point-max))
        offset pair mark imstack destination)
    ;; Elements of alist are either ("name" . marker), or
    ;; ("submenu" ("name" . marker) ... ). The list can be
    ;; Arbitrarily nested.
    (while (or alist imstack)
      (if alist
          (progn
            (setq pair (car-safe alist)
                  alist (cdr-safe alist))
            (cond
             ((atom pair)) ;; Skip anything not a cons.

             ((imenu--subalist-p pair)
              (setq imstack   (cons alist imstack)
                    alist     (cdr pair)))

             ((number-or-marker-p (setq mark (cdr pair)))
              (when (> (setq offset (* (- mark (point)) direction)) 0)
                (when (< offset minoffset) ;; Find the closest item.
                  (setq minoffset offset
                        destination mark))))))

        (setq alist   (car imstack)
              imstack (cdr imstack))))
    (when destination
      (imenu-default-goto-function "" destination ""))))

(defun gwp::imenu-goto-next ()
  (interactive)
  (unless (gwp::imenu-goto--closest-dir 1)
    (goto-char (point-max)))
  (recenter))

(defun gwp::imenu-goto-prev ()
  (interactive)
  (unless (gwp::imenu-goto--closest-dir -1)
    (goto-char (point-min)))
  (recenter))

;; vim里没有Alt修饰, M-x类绑定可以放心用
;; (map! :n "M-n" #'gwp::imenu-goto-next)
;; (map! :n "M-p" #'gwp::imenu-goto-prev)
#+end_src

** old
:PROPERTIES:
:header-args: :tangle no
:END:
*** vterm
安装 vterm-toggle package. 这个比doom内置的强, 支持tramp buffer.
#+begin_src elisp :tangle pkg/.doom.d/packages.el
(package! vterm-toggle)
#+end_src

*** yadm [[https://github.com/TheLocehiliosan/yadm/blob/master/yadm.md][yadm/yadm.md at master · TheLocehiliosan/yadm]]
快捷键 SPC g y
#+name: 0717be82
#+begin_src emacs-lisp
;; (magit-status  "/yadm::")
(after! tramp
  (add-to-list 'tramp-methods
             '("yadm"
               (tramp-login-program "yadm")
               (tramp-login-args (("enter")))
               (tramp-login-env (("SHELL") ("/bin/sh")))
               (tramp-remote-shell "/bin/sh")
               (tramp-remote-shell-args ("-c")))))
#+end_src

*** cp2k
#+name: 423df247
#+begin_src elisp
(require 'cp2k-mode)
#+end_src

** packages.el
:PROPERTIES:
:header-args: :tangle modules/gwp/develop/packages.el
:END:
需要安装cargo.el等包
#+name: e86dc54d
#+begin_src elisp
(package! magit)
(package! magit-todos)
(package! cargo)
(package! racer)
(package! rust-mode)
(package! citre)
(package! find-file-in-project)
;; 2021-10-26 上游更新所致 https://github.com/magit/git-modes
;; 这两个包安装报错, 临时禁用
(package! gitconfig-mode :ignore t)
(package! gitignore-mode :ignore t)

(package! block-nav :recipe (:host github :repo "nixin72/block-nav.el"))
#+end_src

* init.el
:PROPERTIES:
:header-args: :tangle init.el
:END:
#+name: 158fcd0c
#+begin_src elisp
;; Load path
(push (expand-file-name "site-lisp" user-emacs-directory) load-path)
(push (expand-file-name "user-lisp" user-emacs-directory) load-path)

;; Packages
(require 'package)
;; (setq package-archives
;;       '(("gnu"   . "http://elpa.gnu.org/packages/")
;;         ("melpa" . "http://melpa.org/packages/")))
(setq package-archives
      '(("gnu" . "http://mirrors.ustc.edu.cn/elpa/gnu/")
        ("melpa" . "http://mirrors.ustc.edu.cn/elpa/melpa/")
        ("melpa-stable" . "http://mirrors.ustc.edu.cn/elpa/melpa-stable/")
        ("org" . "http://mirrors.ustc.edu.cn/elpa/org/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

(use-package command-log-mode)

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))

(use-package general
  :after evil
  :config)

(require 'init-ui)
(require 'init-edit)
(require 'init-org)
(require 'init-develop)
#+end_src

[[https://github.com/emacs-eaf/emacs-application-framework/wiki/Chemacs][Chemacs · emacs-eaf/emacs-application-framework Wiki]]
#+name: f1b9d1b9
#+begin_src elisp
(defun add-subdirs-to-load-path (dir)
  "Recursive add directories to `load-path'."
  (let ((default-directory (file-name-as-directory dir)))
    (add-to-list 'load-path dir)
    (normal-top-level-add-subdirs-to-load-path)))
;; (add-subdirs-to-load-path "~/.emacs.d/site-lisp/emacs-application-framework")
(add-subdirs-to-load-path "~/.emacs.d/")
;; (require 'eaf-browser)
;; (require 'eaf-pdf-viewer)

(require 'eaf)
#+end_src
* user-lisp
配置各种包或自定义的包
** dwim
临时按键绑定. 这和hydra等类似了
#+begin_src elisp :tangle no
(defun gwp::dwim ()
  (interactive)
  (set-temporary-overlay-map
   (let ((map (make-sparse-keymap)))
     (define-key map (kbd "<right>")	'org-next-block)
     (define-key map (kbd "<left>") 	'org-previous-block)
     map) t))

(defun my-setup-extra-keymap (extra-fn-list hint fn &rest args)
  "Map EXTRA-FN-LIST to new keymap and show HINT after calling FN with ARGS."
  (let ((echo-keystrokes nil))
    (when fn (apply fn args))
    (message hint)
    (set-transient-map
     (let ((map (make-sparse-keymap)))
       (dolist (item extra-fn-list)
         (define-key map (kbd (nth 0 item)) (nth 1 item)))
       map)
     t)))

(defun my-navigate ()
  (interactive)
  (my-setup-extra-keymap '(("k" org-up-element)
                           ("p" org-down-element)
                           ("f" my-open-pdf-from-history))
                         "PDF: [k]up [j]down [p]revious-page [n]ext-page [g]oto [f]rom-history [q]uit"
                         nil))
#+end_src

** init-proxy.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-proxy.el
:END:
[[https://www.scanbuf.net/post/manual/proxy/][设置代理 - 如何自定义编辑器 - 7ym0n - 个人技术分享，记录生活]]

#+name: 20064129
#+begin_src elisp
;; (defvar default-proxy "127.0.0.1:8889")
(defvar default-proxy "127.0.0.1:10808")
(defvar socks-server)
(defvar socks-noproxy)
;; Network Proxy
(defun proxy-http-show ()
  "Show HTTP/HTTPS proxy."
  (interactive)
  (if url-proxy-services
      (message "Current HTTP proxy is `%s'" default-proxy)
    (message "No HTTP proxy")))

(defun proxy-http-enable ()
  "Enable HTTP/HTTPS proxy."
  (interactive)
  (setq url-proxy-services
        `(("http" . ,default-proxy)
          ("https" . ,default-proxy)
          ("no_proxy" . "^\\(localhost\\|192.168.*\\|10.*\\)")))
  (proxy-http-show))

(defun proxy-http-disable ()
  "Disable HTTP/HTTPS proxy."
  (interactive)
  (setq url-proxy-services nil)
  (proxy-http-show))

(defun proxy-http-toggle ()
  "Toggle HTTP/HTTPS proxy."
  (interactive)
  (if (bound-and-true-p url-proxy-services)
      (proxy-http-disable)
    (proxy-http-enable)))

(defun proxy-socks-show ()
  "Show SOCKS proxy."
  (interactive)
  (when (fboundp 'cadddr)                ; defined 25.2+
    (if (bound-and-true-p socks-noproxy)
        (message "Current SOCKS%d proxy is %s:%d"
                 (cadddr socks-server) (cadr socks-server) (caddr socks-server))
      (message "No SOCKS proxy"))))

(defun proxy-socks-enable ()
  "Enable SOCKS proxy."
  (interactive)
  (require 'socks)
  (let* ((proxy (split-string default-proxy "\\s-*:\\s-*"))
         (addr (car proxy))
         (port (string-to-number (cadr proxy))))
    (setq url-gateway-method 'socks
          socks-noproxy '("localhost")
          socks-server `("Default server" ,addr ,port 5)))
  (proxy-socks-show))

(defun proxy-socks-disable ()
  "Disable SOCKS proxy."
  (interactive)
  (setq url-gateway-method 'native
        socks-noproxy nil)
  (proxy-socks-show))

(defun proxy-socks-toggle ()
  "Toggle SOCKS proxy."
  (interactive)
  (if (bound-and-true-p socks-noproxy)
      (proxy-socks-disable)
    (proxy-socks-enable)))
(provide 'init-proxy)
#+end_src

** init-dired.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-dired.el
:END:
- [[https://www.emacswiki.org/emacs/DiredOmitMode][EmacsWiki: Dired Omit Mode]]
- note: [[id:2d226fe6-2010-490e-99cf-1a53b511cc8c][dired 文件管理]]

常用命令:
- 在其它窗口打开文件: ,o 或 M-RET

*** use-package
#+name: edd7000d
#+begin_src emacs-lisp
(use-package dired
  :custom
  ;; 方便多个文件夹文件互动
  ;; Set this variable to non-nil, Dired will try to guess a default
  ;; target directory. This means: if there is a dired buffer
  ;; displayed in the next window, use its current subdir, instead
  ;; of the current subdir of this dired buffer. The target is used
  ;; in the prompt for file copy, rename etc.
  (dired-dwim-target t)

  ;; Dired listing switches
  ;;  -a : Do not ignore entries starting with .
  ;;  -l : Use long listing format.
  ;;  -G : Do not print group names like 'users'
  ;;  -h : Human-readable sizes like 1K, 234M, ..
  ;;  -v : Do natural sort .. so the file names starting with . will show up first.
  ;;  -F : Classify filenames by appending '*' to executables,
  ;;       '/' to directories, etc.
  (dired-listing-switches "-alGhvF --group-directories-first") ; default: "-al"

  :config
  (progn
    ;; 安全第一
    (setq delete-by-moving-to-trash t)

    ;; 用于在dired中复制当前文件的全路径.
    (defun gwp/dired-copy-file-path()
      (interactive)
      (let ((current-prefix-arg '(0)))
        (call-interactively 'dired-copy-filename-as-kill)))

    (map! :map dired-mode-map
          :localleader
          :desc "Copy file path" :n "y" #'gwp/dired-copy-file-path
          :desc "Make symlink" :n "l" #'dired-do-symlink
          :desc "display in other window" :n "o" #'dired-find-file-other-window
          :desc "preview file" :n "SPC" #'dired-view-file
          :desc "Async shell command" :n "!" #'dired-do-async-shell-command
          )

    ;; 使用BACKSPACE来上一级目录, 使用Ctrl-shift-n来新建目录(默认为"+")
    (map! :map dired-mode-map
          :nv "DEL"   #'dired-up-directory       ; BACKSPACE
          :nv "C-S-n" #'dired-create-directory)))

;;;###autoload
(defun gwp::dired::symbol-link-at-point-to-home ()
  "在 dired 中, 将光前文件软链接到 HOME 下, 方便快速访问(比如在
virtualbox /windows 中)"
  (interactive)

  (if (derived-mode-p 'dired-mode)
      (let ((this-file (dired-get-file-for-visit))
            (target-path "~/00-dired-tmp-entry-point"))
        (make-symbolic-link this-file target-path)
        (message "symlink to: %s" target-path))
    (user-error "not in dired buffer")))

;; dired 默认用 emacs 模式
;; (use-package evil
;;   :config
;;   (evil-set-initial-state 'dired-mode 'emacs))
#+end_src

*** 隐藏.dotfiles, doom中默认omit的太少
#+name: 67102cd3
#+begin_src emacs-lisp
(use-package dired-x
  :config
  (progn
    (setq dired-omit-verbose t)
    ;; (add-hook 'dired-mode-hook #'dired-omit-mode)
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))))

(provide 'init-dired)
#+end_src

** init-eaf.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-eaf.el
:END:
可以先用 eaf 安装脚本装好相关包即可正常使用.
- [[https://github.com/emacs-eaf/eaf-pdf-viewer][emacs-eaf/eaf-pdf-viewer: Fastest PDF Viewer in Emacs]]
- [[https://github.com/emacs-eaf/emacs-application-framework/pull/267][Eaf interleave by luhuaei · Pull Request #267 · emacs-eaf/emacs-application-framework]]

#+name: 7d6d2068
#+begin_src elisp
(use-package eaf
  :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
  :after org
  :config
  ;;(use-package eaf-video-player)
  ;; (require 'eaf-file-manager)
  ;; (require 'eaf-browser)
  ;; (require 'eaf-image-viewer)
  (require 'eaf-pdf-viewer)
  (require 'eaf-demo)
  (require 'eaf-org)
  (require 'eaf-interleave)
  ;; (require 'eaf-terminal)

  (defun eaf-org-open-file (file &optional link)
    "An wrapper function on `eaf-open'."
    (eaf-open file))

  ;; use `emacs-application-framework' to open PDF file: link
  (add-to-list 'org-file-apps '("\\.pdf\\'" . eaf-org-open-file))

  ;; 修复 evil 按键问题. 这里需要启用 eaf-browser 支持, 不然会报错
  (require 'eaf-evil)
  (define-key key-translation-map (kbd "SPC")
    (lambda (prompt)
      (if (derived-mode-p 'eaf-mode)
          (pcase eaf--buffer-app-name
            ("pdf-viewer" (kbd eaf-evil-leader-key))
            (_  (kbd "SPC")))
        (kbd "SPC"))))

  :custom
  ;; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  ;; (eaf-browser-continue-where-left-off t)
  ;; (eaf-browser-enable-adblocker t)
  (eaf-pdf-dark-mode nil)
  ;; (browse-url-browser-function 'eaf-open-browser)
  )

(provide 'init-eaf)
#+end_src
** init-magit.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-magit.el
:END:
git-timemachine可用来看文件的不同版本(C-n, C-p): git-timemache-mode-map. 默认用 SPC-g-t 来激活.

magit-todos用来查看代码的TODO, FIXME等标记. 按键: SPC-p-t
- [[https://github.com/alphapapa/magit-todos][alphapapa/magit-todos: Show source files' TODOs (and FIXMEs, etc) in Magit status buffer]]

magit-status-mode-map

#+name: 5587631c
#+begin_src elisp
(use-package magit
  :config
  ;; 隐藏untracked文件列表. 更多时候的操作是stage/commit
  (setq magit-section-initial-visibility-alist (quote ((untracked . hide))))
  ;;禁用magit中的gravatars支持, 响应能快一些.
  (setq magit-revision-show-gravatars nil)
  ;; 进入 magit-status 后, 将光标定在 unstaged 一栏
  (setq magit-status-initial-section '(2))
  )

(provide 'init-magit)
#+end_src

** init-note.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-note.el
:END:
*** docs
仿 org-noter 但, 简化操作, 不依赖于 pdf-tools 等包, 可使用外部的 pdf 阅读器来处
理 pdf 文件.

pdf-tools 的缺点是太慢了, llpp 要快得多, 适合看稍大一些的文件. 使用 llpp 来打开
org-noter 生成的note, 用于打开打定的 PDF 页面.

: okular foo.pdf -p 5
: evince foo.pdf -p 5
: llpp foo.pdf -page 5

批注流程
- 使用 dired 打开某个 pdf 文件, 然后 ",nn", 在 pdf 所在目录生成并打开 annotation.note.
- 在 org-mode 下, 自建 heading, ",ni", 插入 property, 标明 pdf 页码信息.
- 在某 heading 下, ",no", 打开该 heading 对应的 pdf 文件及相应的页码

另外, 通过 [[https://github.com/ymarco/paper-mode][ymarco/paper-mode]], 也可以把 llpp 放到 emacs buffer 中.

*** require
还是基于 org-noter 来开发, 能省一些事是一些.
#+name: 2ad3390b
#+begin_src elisp
(require 'org-noter)
#+end_src

*** create file
#+name: 8a535ad4
#+begin_src elisp
(defun gwp::org-note::create-annotation-file (document-path)
  (let* ((note-file "annotation.note")
         (document-name (file-name-nondirectory document-path))
         (document-base (file-name-base document-name)))
    (with-current-buffer (switch-to-buffer (find-file-noselect note-file))
      (goto-char (point-max))
      (insert "* " document-base)
      (org-set-property org-noter-property-doc-file document-name)
      (save-buffer))))

;;;###autoload
(defun gwp::org-note::dired-annotate-file-at-point ()
  "标注 dired buffer 中所定的(pdf)文件"
  (interactive)
  (if (derived-mode-p 'dired-mode)
      (gwp::org-note::create-annotation-file (dired-get-file-for-visit))
    (user-error "not in dired buffer")))
#+end_src

*** open
#+name: 1773f1a3
#+begin_src elisp
(defun gwp::org-note::get-pdf-file ()
  (save-excursion
    (if (search-backward ":NOTER_DOCUMENT" nil t)
        (progn
          (org-back-to-heading)
          (let ((pdf (org-element-property :NOTER_DOCUMENT (org-element-at-point))))
            (message "%s" pdf)))
      (message "no pdf doc found"))))

(defun gwp::org-note::get-pdf-page ()
  (save-excursion
    (org-back-to-heading)
    (let ((property (org-element-property :NOTER_PAGE (org-element-at-point))))
      (let ((value (car (read-from-string property))))
        (cond
         ((consp value) (car value))
         (t value))))))

;;;###autoload
(defun gwp::org-note::new-note ()
  "在当前 heading 下插入新的文献阅读笔记"
  (interactive)
  ;; (let ((current-prefix-arg '(4)))     ; C-u
  ;;   (call-interactively #'org-insert-heading))
  ;; (insert (read-string "笔记标题: "))
  (if (org-at-heading-p)
      (let ((page (read-number "PDF 页码: " 1)))
        (org-set-property "NOTER_PAGE" (number-to-string page)))
    (user-error "not at org heading.")))

;;;###autoload
(defun gwp::org-note::open-pdf ()
  "使用 llpp 来打开当前笔记对应的 pdf 文件, 并转到指定的页码"
  (interactive)
  (let ((page (gwp::org-note::get-pdf-page))
        (pdf (gwp::org-note::get-pdf-file)))
    (if page
        (start-process "llpp" nil "llpp" pdf "-page" (format "%s" page))
      ;; (start-process "okular" nil "okular" pdf "-p" (format "%s" page))
      (start-process "llpp" nil "llpp" pdf)
      ;; (start-process "okular" nil "okular" pdf)
      )))
#+end_src


*** provide
#+name: 8d4b377b
#+begin_src elisp
(provide 'init-note)
#+end_src

** init-search.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-search.el
:END:
*** recent directories
访问 zoxide 的最近文件夹数据
- [[https://github.com/Soft/emacs.d/blob/master/modules/helm-zoxide.el][emacs.d/helm-zoxide.el at master · Soft/emacs.d]]

#+name: 6194c32a
#+begin_src elisp
(defun gwp::zoxide-recent-directories ()
  (let* ((output (shell-command-to-string "zoxide query --list"))
         (dirs (split-string output "[\r\n]+" t)))
    dirs))

(defun gwp::dired-recent-directories ()
  (let* ((recent-dirs
          (mapcar (lambda (file)
                    (if (file-directory-p file) file (file-name-directory file)))
                  recentf-list)))
    recent-dirs))

(defun gwp::zoxide-add-directory (dir)
  "将 dir 加入 zoxide 数据库中"
  (when dir (call-process "zoxide" nil nil nil "add" dir)))

;; open recent directory, requires ivy (part of swiper)
;; borrows from http://stackoverflow.com/questions/23328037/in-emacs-how-to-maintain-a-list-of-recent-directories
;;;###autoload
(defun gwp::ivy-recent-dirs ()
  "Present a list of recently used directories and open the selected one in dired"
  (interactive)
  (let ((recent-dirs
         (delete-dups
          (append (gwp::zoxide-recent-directories) (gwp::dired-recent-directories)))))
    (let ((dir (ivy-read "Directory: " recent-dirs
                         :sort nil
                         :action '(1 ("o" gwp::zoxide-add-directory "open")))))
      (dired dir))))

(provide 'init-search)
#+end_src
* Local variables
# Emacs:
# Local Variables:
# mode: org
# end:
